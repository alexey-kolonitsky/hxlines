// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#ifndef INCLUDED_GameController
#define INCLUDED_GameController

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_IGameLoopHandler
#include <IGameLoopHandler.h>
#endif
HX_DECLARE_CLASS0(GameController)
HX_DECLARE_CLASS0(GameState)
HX_DECLARE_CLASS0(IGameLoopHandler)
HX_DECLARE_CLASS1(events,GameEvent)
HX_DECLARE_CLASS1(model,GameData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(view,GameScreen)



class HXCPP_CLASS_ATTRIBUTES GameController_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GameController_obj OBJ_;
		GameController_obj();

	public:
		enum { _hx_ClassId = 0x3db3474e };

		void __construct( ::model::GameData gameData, ::view::GameScreen gameRenderer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="GameController")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"GameController"); }
		static hx::ObjectPtr< GameController_obj > __new( ::model::GameData gameData, ::view::GameScreen gameRenderer);
		static hx::ObjectPtr< GameController_obj > __alloc(hx::Ctx *_hx_ctx, ::model::GameData gameData, ::view::GameScreen gameRenderer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GameController_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("GameController","\x4e","\x47","\xb3","\x3d"); }

		static void shuffle(::cpp::VirtualArray source);
		static ::Dynamic shuffle_dyn();

		 ::GameState get_state();
		::Dynamic get_state_dyn();

		 ::GameState set_state( ::GameState value);
		::Dynamic set_state_dyn();

		int get_startIndex();
		::Dynamic get_startIndex_dyn();

		int set_startIndex(int value);
		::Dynamic set_startIndex_dyn();

		int get_endIndex();
		::Dynamic get_endIndex_dyn();

		int set_endIndex(int value);
		::Dynamic set_endIndex_dyn();

		Float get_duration();
		::Dynamic get_duration_dyn();

		void dispose();
		::Dynamic dispose_dyn();

		void view_moveHandler( ::events::GameEvent event);
		::Dynamic view_moveHandler_dyn();

		void view_selectHandler( ::events::GameEvent event);
		::Dynamic view_selectHandler_dyn();

		void view_pathHandler( ::events::GameEvent event);
		::Dynamic view_pathHandler_dyn();

		void initFreeCells();
		::Dynamic initFreeCells_dyn();

		void moveTo(int index);
		::Dynamic moveTo_dyn();

		void update(Float time,Float deltaTime);
		::Dynamic update_dyn();

		 ::model::GameData _game;
		 ::view::GameScreen _view;
		::Array< int > _freeFieldIndex;
		::Array< int > _distance;
		::Array< int > addRandomChips();
		::Dynamic addRandomChips_dyn();

		void removeChips(::Array< int > line);
		::Dynamic removeChips_dyn();

		bool removeLines(::Array< int > startIndxes);
		::Dynamic removeLines_dyn();

		bool removeLine(::Array< int > line);
		::Dynamic removeLine_dyn();

		void updateLevel();
		::Dynamic updateLevel_dyn();

		::Array< int > findLine(int colStartIndex,int rowStartIndex,int colIncrement,int rowIncrement,int chipType);
		::Dynamic findLine_dyn();

		int valueAt(int colIndex,int rowIndex);
		::Dynamic valueAt_dyn();

		::Array< int > getAvailableNeighbors( ::Dynamic source,int index);
		::Dynamic getAvailableNeighbors_dyn();

		bool isGameEmpty();
		::Dynamic isGameEmpty_dyn();

};


#endif /* INCLUDED_GameController */ 
