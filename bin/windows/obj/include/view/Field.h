// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#ifndef INCLUDED_view_Field
#define INCLUDED_view_Field

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IShaderDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,DropShadowFilter)
HX_DECLARE_CLASS1(view,Field)
HX_DECLARE_CLASS1(view,FieldBitmapFactory)

namespace view{


class HXCPP_CLASS_ATTRIBUTES Field_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Field_obj OBJ_;
		Field_obj();

	public:
		enum { _hx_ClassId = 0x4512ee15 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="view.Field")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"view.Field"); }
		static hx::ObjectPtr< Field_obj > __new();
		static hx::ObjectPtr< Field_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Field_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Field","\x9a","\x04","\xc1","\x93"); }

		static void __boot();
		static  ::openfl::filters::DropShadowFilter DROP_SHADOW_FILTER;
		bool _select;
		bool get_select();
		::Dynamic get_select_dyn();

		bool set_select(bool value);
		::Dynamic set_select_dyn();

		int _state;
		int get_state();
		::Dynamic get_state_dyn();

		int set_state(int value);
		::Dynamic set_state_dyn();

		int _background;
		int get_background();
		::Dynamic get_background_dyn();

		int set_background(int value);
		::Dynamic set_background_dyn();

		 ::view::FieldBitmapFactory _fieldFactory;
		 ::openfl::display::Bitmap bitmap;
		 ::openfl::display::Bitmap bg;
		void updateBg();
		::Dynamic updateBg_dyn();

		void updateBitmap();
		::Dynamic updateBitmap_dyn();

};

} // end namespace view

#endif /* INCLUDED_view_Field */ 
