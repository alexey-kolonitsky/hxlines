// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#ifndef INCLUDED_view_controls_SimpleButton
#define INCLUDED_view_controls_SimpleButton

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IShaderDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(view,controls,SimpleButton)

namespace view{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES SimpleButton_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef SimpleButton_obj OBJ_;
		SimpleButton_obj();

	public:
		enum { _hx_ClassId = 0x2d3c2c87 };

		void __construct( ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="view.controls.SimpleButton")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"view.controls.SimpleButton"); }
		static hx::ObjectPtr< SimpleButton_obj > __new( ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);
		static hx::ObjectPtr< SimpleButton_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SimpleButton_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SimpleButton","\xe4","\x57","\x52","\xed"); }

		Float _width;
		Float _height;
		 ::openfl::display::Bitmap _bitmap;
		 ::openfl::text::TextField _label;
		::String set_label(::String value);
		::Dynamic set_label_dyn();

		::String get_label();
		::Dynamic get_label_dyn();

		void createCaptionTextField(::String text,bool fitText);
		::Dynamic createCaptionTextField_dyn();

		void mouseDownHandler( ::openfl::events::MouseEvent event);
		::Dynamic mouseDownHandler_dyn();

		void mouseUpHandler( ::openfl::events::MouseEvent event);
		::Dynamic mouseUpHandler_dyn();

		void mouseOverHandler( ::openfl::events::MouseEvent event);
		::Dynamic mouseOverHandler_dyn();

		void mouseOutHandler( ::openfl::events::MouseEvent event);
		::Dynamic mouseOutHandler_dyn();

};

} // end namespace view
} // end namespace controls

#endif /* INCLUDED_view_controls_SimpleButton */ 
