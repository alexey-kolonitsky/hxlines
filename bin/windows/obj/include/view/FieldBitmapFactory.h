// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#ifndef INCLUDED_view_FieldBitmapFactory
#define INCLUDED_view_FieldBitmapFactory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IShaderDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(view,FieldBitmapFactory)

namespace view{


class HXCPP_CLASS_ATTRIBUTES FieldBitmapFactory_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FieldBitmapFactory_obj OBJ_;
		FieldBitmapFactory_obj();

	public:
		enum { _hx_ClassId = 0x33be1946 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="view.FieldBitmapFactory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"view.FieldBitmapFactory"); }
		static hx::ObjectPtr< FieldBitmapFactory_obj > __new();
		static hx::ObjectPtr< FieldBitmapFactory_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FieldBitmapFactory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FieldBitmapFactory","\xa1","\x93","\x86","\xd9"); }

		void init();
		::Dynamic init_dyn();

		 ::openfl::display::BitmapData getChipByCode(int code);
		::Dynamic getChipByCode_dyn();

		 ::openfl::display::BitmapData getFieldByCode(int code);
		::Dynamic getFieldByCode_dyn();

		 ::openfl::display::Bitmap chipsBitmap;
		::Array< ::Dynamic> chips;
		::Array< ::Dynamic> fields;
		 ::openfl::display::BitmapData emptyCellBitmap;
		 ::openfl::display::BitmapData sliceImage(int xIndex,int yIndex);
		::Dynamic sliceImage_dyn();

};

} // end namespace view

#endif /* INCLUDED_view_FieldBitmapFactory */ 
