// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMP
#include <lime/graphics/format/BMP.h>
#endif
#ifndef INCLUDED_lime_graphics_format_BMPType
#include <lime/graphics/format/BMPType.h>
#endif
#ifndef INCLUDED_lime_graphics_format_JPEG
#include <lime/graphics/format/JPEG.h>
#endif
#ifndef INCLUDED_lime_graphics_format_PNG
#include <lime/graphics/format/PNG.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageCanvasUtil
#include <lime/graphics/utils/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_AbstractHTTPRequest
#include <lime/net/_HTTPRequest/AbstractHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_Bytes
#include <lime/net/_HTTPRequest_Bytes.h>
#endif
#ifndef INCLUDED_lime_net__HTTPRequest_lime_graphics_Image
#include <lime/net/_HTTPRequest_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_111_new,"lime.graphics.Image","new",0x344ae603,"lime.graphics.Image.new","lime/graphics/Image.hx",111,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_185_clone,"lime.graphics.Image","clone",0xb88517c0,"lime.graphics.Image.clone","lime/graphics/Image.hx",185,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_212_colorTransform,"lime.graphics.Image","colorTransform",0xaf89aec6,"lime.graphics.Image.colorTransform","lime/graphics/Image.hx",212,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_243_copyChannel,"lime.graphics.Image","copyChannel",0xc3306e31,"lime.graphics.Image.copyChannel","lime/graphics/Image.hx",243,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_295_copyPixels,"lime.graphics.Image","copyPixels",0x19d2897f,"lime.graphics.Image.copyPixels","lime/graphics/Image.hx",295,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_396_encode,"lime.graphics.Image","encode",0xa785c453,"lime.graphics.Image.encode","lime/graphics/Image.hx",396,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_421_fillRect,"lime.graphics.Image","fillRect",0x2421e0c4,"lime.graphics.Image.fillRect","lime/graphics/Image.hx",421,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_463_floodFill,"lime.graphics.Image","floodFill",0x1da9f544,"lime.graphics.Image.floodFill","lime/graphics/Image.hx",463,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_580_getColorBoundsRect,"lime.graphics.Image","getColorBoundsRect",0x21db6743,"lime.graphics.Image.getColorBoundsRect","lime/graphics/Image.hx",580,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_611_getPixel,"lime.graphics.Image","getPixel",0xd9e3718d,"lime.graphics.Image.getPixel","lime/graphics/Image.hx",611,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_650_getPixel32,"lime.graphics.Image","getPixel32",0xaeccdb6c,"lime.graphics.Image.getPixel32","lime/graphics/Image.hx",650,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_689_getPixels,"lime.graphics.Image","getPixels",0xcd1fea46,"lime.graphics.Image.getPixels","lime/graphics/Image.hx",689,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_907_merge,"lime.graphics.Image","merge",0x75e8a71b,"lime.graphics.Image.merge","lime/graphics/Image.hx",907,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_941_resize,"lime.graphics.Image","resize",0xb61d2c31,"lime.graphics.Image.resize","lime/graphics/Image.hx",941,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_978_scroll,"lime.graphics.Image","scroll",0xf506aa4a,"lime.graphics.Image.scroll","lime/graphics/Image.hx",978,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1003_setPixel,"lime.graphics.Image","setPixel",0x8840cb01,"lime.graphics.Image.setPixel","lime/graphics/Image.hx",1003,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1040_setPixel32,"lime.graphics.Image","setPixel32",0xb24a79e0,"lime.graphics.Image.setPixel32","lime/graphics/Image.hx",1040,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1077_setPixels,"lime.graphics.Image","setPixels",0xb070d652,"lime.graphics.Image.setPixels","lime/graphics/Image.hx",1077,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1161_threshold,"lime.graphics.Image","threshold",0xf8c3358e,"lime.graphics.Image.threshold","lime/graphics/Image.hx",1161,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1237___clipRect,"lime.graphics.Image","__clipRect",0xd30737f1,"lime.graphics.Image.__clipRect","lime/graphics/Image.hx",1237,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1280___fromBase64,"lime.graphics.Image","__fromBase64",0x71681bb6,"lime.graphics.Image.__fromBase64","lime/graphics/Image.hx",1280,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1310___fromBytes,"lime.graphics.Image","__fromBytes",0x40972c24,"lime.graphics.Image.__fromBytes","lime/graphics/Image.hx",1310,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1375___fromFile,"lime.graphics.Image","__fromFile",0x1c2444e3,"lime.graphics.Image.__fromFile","lime/graphics/Image.hx",1375,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1552___fromImageBuffer,"lime.graphics.Image","__fromImageBuffer",0xe152fb34,"lime.graphics.Image.__fromImageBuffer","lime/graphics/Image.hx",1552,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1619_get_data,"lime.graphics.Image","get_data",0x7986ad30,"lime.graphics.Image.get_data","lime/graphics/Image.hx",1619,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1643_set_data,"lime.graphics.Image","set_data",0x27e406a4,"lime.graphics.Image.set_data","lime/graphics/Image.hx",1643,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1650_get_format,"lime.graphics.Image","get_format",0xc57a33bd,"lime.graphics.Image.get_format","lime/graphics/Image.hx",1650,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1655_set_format,"lime.graphics.Image","set_format",0xc8f7d231,"lime.graphics.Image.set_format","lime/graphics/Image.hx",1655,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1678_get_powerOfTwo,"lime.graphics.Image","get_powerOfTwo",0x62ee1df6,"lime.graphics.Image.get_powerOfTwo","lime/graphics/Image.hx",1678,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1683_set_powerOfTwo,"lime.graphics.Image","set_powerOfTwo",0x830e066a,"lime.graphics.Image.set_powerOfTwo","lime/graphics/Image.hx",1683,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1735_get_premultiplied,"lime.graphics.Image","get_premultiplied",0xc1478990,"lime.graphics.Image.get_premultiplied","lime/graphics/Image.hx",1735,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1740_set_premultiplied,"lime.graphics.Image","set_premultiplied",0xe4b5619c,"lime.graphics.Image.set_premultiplied","lime/graphics/Image.hx",1740,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1787_get_rect,"lime.graphics.Image","get_rect",0x82caa42a,"lime.graphics.Image.get_rect","lime/graphics/Image.hx",1787,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1802_get_src,"lime.graphics.Image","get_src",0x66c2929e,"lime.graphics.Image.get_src","lime/graphics/Image.hx",1802,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1809_set_src,"lime.graphics.Image","set_src",0x59c423aa,"lime.graphics.Image.set_src","lime/graphics/Image.hx",1809,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1814_get_transparent,"lime.graphics.Image","get_transparent",0xe1ee610c,"lime.graphics.Image.get_transparent","lime/graphics/Image.hx",1814,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1822_set_transparent,"lime.graphics.Image","set_transparent",0xddb9de18,"lime.graphics.Image.set_transparent","lime/graphics/Image.hx",1822,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_500_fromBase64,"lime.graphics.Image","fromBase64",0x6fd03756,"lime.graphics.Image.fromBase64","lime/graphics/Image.hx",500,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_513_fromBitmapData,"lime.graphics.Image","fromBitmapData",0x2e36df00,"lime.graphics.Image.fromBitmapData","lime/graphics/Image.hx",513,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_528_fromBytes,"lime.graphics.Image","fromBytes",0x36406484,"lime.graphics.Image.fromBytes","lime/graphics/Image.hx",528,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_541_fromCanvas,"lime.graphics.Image","fromCanvas",0xd2ea8e9f,"lime.graphics.Image.fromCanvas","lime/graphics/Image.hx",541,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_554_fromFile,"lime.graphics.Image","fromFile",0x58f03883,"lime.graphics.Image.fromFile","lime/graphics/Image.hx",554,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_567_fromImageElement,"lime.graphics.Image","fromImageElement",0x196571a8,"lime.graphics.Image.fromImageElement","lime/graphics/Image.hx",567,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_762_loadFromBase64,"lime.graphics.Image","loadFromBase64",0x3166e39c,"lime.graphics.Image.loadFromBase64","lime/graphics/Image.hx",762,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_842_loadFromBytes,"lime.graphics.Image","loadFromBytes",0xafa862fe,"lime.graphics.Image.loadFromBytes","lime/graphics/Image.hx",842,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_779_loadFromBytes,"lime.graphics.Image","loadFromBytes",0xafa862fe,"lime.graphics.Image.loadFromBytes","lime/graphics/Image.hx",779,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_890_loadFromFile,"lime.graphics.Image","loadFromFile",0xfb592749,"lime.graphics.Image.loadFromFile","lime/graphics/Image.hx",890,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_849_loadFromFile,"lime.graphics.Image","loadFromFile",0xfb592749,"lime.graphics.Image.loadFromFile","lime/graphics/Image.hx",849,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1230___base64Encode,"lime.graphics.Image","__base64Encode",0x6ec3d362,"lime.graphics.Image.__base64Encode","lime/graphics/Image.hx",1230,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1575___isGIF,"lime.graphics.Image","__isGIF",0x6ba10e3d,"lime.graphics.Image.__isGIF","lime/graphics/Image.hx",1575,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1585___isJPG,"lime.graphics.Image","__isJPG",0x6ba35b1a,"lime.graphics.Image.__isJPG","lime/graphics/Image.hx",1585,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1594___isPNG,"lime.graphics.Image","__isPNG",0x6ba7e6e2,"lime.graphics.Image.__isPNG","lime/graphics/Image.hx",1594,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_1603___isWebP,"lime.graphics.Image","__isWebP",0xcbf428e3,"lime.graphics.Image.__isWebP","lime/graphics/Image.hx",1603,0xc7b862ad)
HX_LOCAL_STACK_FRAME(_hx_pos_ef8f6e7e24e3b831_89_boot,"lime.graphics.Image","boot",0x85575d2f,"lime.graphics.Image.boot","lime/graphics/Image.hx",89,0xc7b862ad)
namespace lime{
namespace graphics{

void Image_obj::__construct( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type){
int offsetX = __o_offsetX.Default(0);
int offsetY = __o_offsetY.Default(0);
int width = __o_width.Default(-1);
int height = __o_height.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_111_new)
HXLINE( 113)		this->offsetX = offsetX;
HXLINE( 114)		this->offsetY = offsetY;
HXLINE( 115)		this->width = width;
HXLINE( 116)		this->height = height;
HXLINE( 118)		this->version = (int)0;
HXLINE( 120)		if (hx::IsNull( type )) {
HXLINE( 127)			type = ::lime::graphics::ImageType_obj::DATA_dyn();
            		}
HXLINE( 132)		this->type = type;
HXLINE( 134)		if (hx::IsNull( buffer )) {
HXLINE( 136)			bool _hx_tmp;
HXDLIN( 136)			if ((width > (int)0)) {
HXLINE( 136)				_hx_tmp = (height > (int)0);
            			}
            			else {
HXLINE( 136)				_hx_tmp = false;
            			}
HXDLIN( 136)			if (_hx_tmp) {
HXLINE( 138)				 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 138)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
HXLINE( 142)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(),width,height,null(),null());
HXLINE( 143)						::lime::graphics::utils::ImageCanvasUtil_obj::createCanvas(hx::ObjectPtr<OBJ_>(this),width,height);
HXLINE( 145)						bool _hx_tmp1;
HXDLIN( 145)						if (hx::IsNotNull( color )) {
HXLINE( 145)							_hx_tmp1 = hx::IsNotEq( color,(int)0 );
            						}
            						else {
HXLINE( 145)							_hx_tmp1 = false;
            						}
HXDLIN( 145)						if (_hx_tmp1) {
HXLINE( 147)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 153)						 ::Dynamic elements = ((width * height) * (int)4);
HXDLIN( 153)						 ::lime::utils::ArrayBufferView this1;
HXDLIN( 153)						if (hx::IsNotNull( elements )) {
HXLINE( 153)							this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            						}
            						else {
HXLINE( 153)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
HXDLIN( 153)						this->buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 155)						bool _hx_tmp2;
HXDLIN( 155)						if (hx::IsNotNull( color )) {
HXLINE( 155)							_hx_tmp2 = hx::IsNotEq( color,(int)0 );
            						}
            						else {
HXLINE( 155)							_hx_tmp2 = false;
            						}
HXDLIN( 155)						if (_hx_tmp2) {
HXLINE( 157)							this->fillRect( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),color,null());
            						}
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
            		else {
HXLINE( 176)			this->_hx___fromImageBuffer(buffer);
            		}
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

void *Image_obj::_hx_vtable = 0;

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Image_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x66ea719b;
}

 ::lime::graphics::Image Image_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_185_clone)
HXLINE( 185)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 199)			 ::lime::graphics::ImageBuffer image = this->buffer->clone();
HXDLIN( 199)			 ::lime::graphics::Image image1 =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,image,this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
HXLINE( 200)			image1->version = this->version;
HXLINE( 201)			return image1;
            		}
            		else {
HXLINE( 205)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),this->offsetX,this->offsetY,this->width,this->height,null(),this->type);
            		}
HXLINE( 185)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,clone,return )

void Image_obj::colorTransform( ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_212_colorTransform)
HXLINE( 214)		rect = this->_hx___clipRect(rect);
HXLINE( 215)		bool _hx_tmp;
HXDLIN( 215)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 215)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 215)			_hx_tmp = true;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 215)			return;
            		}
HXLINE( 217)		{
HXLINE( 217)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 217)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 221)					::lime::graphics::utils::ImageCanvasUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)1: {
HXLINE( 229)					::lime::graphics::utils::ImageDataUtil_obj::colorTransform(hx::ObjectPtr<OBJ_>(this),rect,colorMatrix);
            				}
            				break;
            				case (int)2: {
HXLINE( 233)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 234)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic));
HXDLIN( 234)					 ::Dynamic _hx_tmp2 = rect->_hx___toFlashRectangle();
HXDLIN( 234)					_hx_tmp1(_hx_tmp2,::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_hx___toFlashColorTransform(colorMatrix));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,colorTransform,(void))

void Image_obj::copyChannel( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_243_copyChannel)
HXLINE( 245)		sourceRect = this->_hx___clipRect(sourceRect);
HXLINE( 246)		bool _hx_tmp;
HXDLIN( 246)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 246)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 246)			_hx_tmp = true;
            		}
HXDLIN( 246)		if (_hx_tmp) {
HXLINE( 246)			return;
            		}
HXLINE( 247)		bool _hx_tmp1;
HXDLIN( 247)		if (hx::IsEq( destChannel,::lime::graphics::ImageChannel_obj::ALPHA_dyn() )) {
HXLINE( 247)			_hx_tmp1 = !(this->get_transparent());
            		}
            		else {
HXLINE( 247)			_hx_tmp1 = false;
            		}
HXDLIN( 247)		if (_hx_tmp1) {
HXLINE( 247)			return;
            		}
HXLINE( 248)		bool _hx_tmp2;
HXDLIN( 248)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 248)			_hx_tmp2 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 248)			_hx_tmp2 = true;
            		}
HXDLIN( 248)		if (_hx_tmp2) {
HXLINE( 248)			return;
            		}
HXLINE( 249)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 249)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 250)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 250)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 252)		{
HXLINE( 252)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 252)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 256)					::lime::graphics::utils::ImageCanvasUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)1: {
HXLINE( 265)					::lime::graphics::utils::ImageDataUtil_obj::copyChannel(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
            				}
            				break;
            				case (int)2: {
HXLINE( 269)					int srcChannel;
HXDLIN( 269)					switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            						case (int)0: {
HXLINE( 269)							srcChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 269)							srcChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 269)							srcChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 269)							srcChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 276)					int dstChannel;
HXDLIN( 276)					switch((int)(_hx_getEnumValueIndex(destChannel))){
            						case (int)0: {
HXLINE( 276)							dstChannel = (int)1;
            						}
            						break;
            						case (int)1: {
HXLINE( 276)							dstChannel = (int)2;
            						}
            						break;
            						case (int)2: {
HXLINE( 276)							dstChannel = (int)4;
            						}
            						break;
            						case (int)3: {
HXLINE( 276)							dstChannel = (int)8;
            						}
            						break;
            					}
HXLINE( 283)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 284)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 286)					 ::Dynamic _hx_tmp3 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyChannel",8e,7d,e6,22),hx::paccDynamic));
HXDLIN( 286)					 ::Dynamic _hx_tmp4 = sourceImage->buffer->get_src();
HXDLIN( 286)					 ::Dynamic _hx_tmp5 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 286)					_hx_tmp3(_hx_tmp4,_hx_tmp5,destPoint->_hx___toFlashPoint(),srcChannel,dstChannel);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Image_obj,copyChannel,(void))

void Image_obj::copyPixels( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_295_copyPixels)
HXLINE( 297)		bool _hx_tmp;
HXDLIN( 297)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 297)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 297)			_hx_tmp = true;
            		}
HXDLIN( 297)		if (_hx_tmp) {
HXLINE( 297)			return;
            		}
HXLINE( 298)		bool _hx_tmp1;
HXDLIN( 298)		if (!((sourceRect->width <= (int)0))) {
HXLINE( 298)			_hx_tmp1 = (sourceRect->height <= (int)0);
            		}
            		else {
HXLINE( 298)			_hx_tmp1 = true;
            		}
HXDLIN( 298)		if (_hx_tmp1) {
HXLINE( 298)			return;
            		}
HXLINE( 299)		bool _hx_tmp2;
HXDLIN( 299)		if ((this->width > (int)0)) {
HXLINE( 299)			_hx_tmp2 = (this->height <= (int)0);
            		}
            		else {
HXLINE( 299)			_hx_tmp2 = true;
            		}
HXDLIN( 299)		if (_hx_tmp2) {
HXLINE( 299)			return;
            		}
HXLINE( 301)		if (((sourceRect->x + sourceRect->width) > sourceImage->width)) {
HXLINE( 301)			sourceRect->width = (sourceImage->width - sourceRect->x);
            		}
HXLINE( 302)		if (((sourceRect->y + sourceRect->height) > sourceImage->height)) {
HXLINE( 302)			sourceRect->height = (sourceImage->height - sourceRect->y);
            		}
HXLINE( 304)		if ((sourceRect->x < (int)0)) {
HXLINE( 306)			 ::lime::math::Rectangle sourceRect1 = sourceRect;
HXDLIN( 306)			sourceRect1->width = (sourceRect1->width + sourceRect->x);
HXLINE( 307)			sourceRect->x = (int)0;
            		}
HXLINE( 311)		if ((sourceRect->y < (int)0)) {
HXLINE( 313)			 ::lime::math::Rectangle sourceRect2 = sourceRect;
HXDLIN( 313)			sourceRect2->height = (sourceRect2->height + sourceRect->y);
HXLINE( 314)			sourceRect->y = (int)0;
            		}
HXLINE( 318)		if (((destPoint->x + sourceRect->width) > this->width)) {
HXLINE( 318)			sourceRect->width = (this->width - destPoint->x);
            		}
HXLINE( 319)		if (((destPoint->y + sourceRect->height) > this->height)) {
HXLINE( 319)			sourceRect->height = (this->height - destPoint->y);
            		}
HXLINE( 321)		if ((destPoint->x < (int)0)) {
HXLINE( 323)			 ::lime::math::Rectangle sourceRect3 = sourceRect;
HXDLIN( 323)			sourceRect3->width = (sourceRect3->width + destPoint->x);
HXLINE( 324)			 ::lime::math::Rectangle sourceRect4 = sourceRect;
HXDLIN( 324)			sourceRect4->x = (sourceRect4->x - destPoint->x);
HXLINE( 325)			destPoint->x = (int)0;
            		}
HXLINE( 329)		if ((destPoint->y < (int)0)) {
HXLINE( 331)			 ::lime::math::Rectangle sourceRect5 = sourceRect;
HXDLIN( 331)			sourceRect5->height = (sourceRect5->height + destPoint->y);
HXLINE( 332)			 ::lime::math::Rectangle sourceRect6 = sourceRect;
HXDLIN( 332)			sourceRect6->y = (sourceRect6->y - destPoint->y);
HXLINE( 333)			destPoint->y = (int)0;
            		}
HXLINE( 337)		bool _hx_tmp3;
HXDLIN( 337)		bool _hx_tmp4;
HXDLIN( 337)		if (hx::IsEq( sourceImage,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 337)			Float destPoint1 = destPoint->x;
HXDLIN( 337)			_hx_tmp4 = (destPoint1 < sourceRect->get_right());
            		}
            		else {
HXLINE( 337)			_hx_tmp4 = false;
            		}
HXDLIN( 337)		if (_hx_tmp4) {
HXLINE( 337)			Float destPoint2 = destPoint->y;
HXDLIN( 337)			_hx_tmp3 = (destPoint2 < sourceRect->get_bottom());
            		}
            		else {
HXLINE( 337)			_hx_tmp3 = false;
            		}
HXDLIN( 337)		if (_hx_tmp3) {
HXLINE( 340)			sourceImage = this->clone();
            		}
HXLINE( 344)		{
HXLINE( 344)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 344)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 352)					::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 353)					::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(sourceImage,null());
HXLINE( 354)					if (hx::IsNotNull( alphaImage )) {
HXLINE( 354)						::lime::graphics::utils::ImageCanvasUtil_obj::convertToData(alphaImage,null());
            					}
HXLINE( 356)					::lime::graphics::utils::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            				}
            				break;
            				case (int)1: {
HXLINE( 374)					::lime::graphics::utils::ImageDataUtil_obj::copyPixels(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
            				}
            				break;
            				case (int)2: {
HXLINE( 378)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE( 379)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE( 381)					bool _hx_tmp5;
HXDLIN( 381)					if (hx::IsNotNull( alphaImage )) {
HXLINE( 381)						_hx_tmp5 = hx::IsNotNull( alphaPoint );
            					}
            					else {
HXLINE( 381)						_hx_tmp5 = false;
            					}
HXDLIN( 381)					if (_hx_tmp5) {
HXLINE( 383)						alphaPoint->offset(alphaImage->offsetX,alphaImage->offsetY);
            					}
HXLINE( 387)					 ::Dynamic _hx_tmp6 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("copyPixels",c2,54,6e,42),hx::paccDynamic));
HXDLIN( 387)					 ::Dynamic sourceImage1 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN( 387)					 ::Dynamic _hx_tmp7 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 387)					 ::Dynamic _hx_tmp8 = destPoint->_hx___toFlashPoint();
HXDLIN( 387)					 ::Dynamic _hx_tmp9;
HXDLIN( 387)					if (hx::IsNotNull( alphaImage )) {
HXLINE( 387)						_hx_tmp9 = alphaImage->buffer->get_src();
            					}
            					else {
HXLINE( 387)						_hx_tmp9 = null();
            					}
HXDLIN( 387)					 ::Dynamic _hx_tmp10;
HXDLIN( 387)					if (hx::IsNotNull( alphaPoint )) {
HXLINE( 387)						_hx_tmp10 = alphaPoint->_hx___toFlashPoint();
            					}
            					else {
HXLINE( 387)						_hx_tmp10 = null();
            					}
HXDLIN( 387)					_hx_tmp6(sourceImage1,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,mergeAlpha);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,copyPixels,(void))

 ::haxe::io::Bytes Image_obj::encode(::String __o_format,hx::Null< int >  __o_quality){
::String format = __o_format.Default(HX_HCSTRING("png","\xa9","\x5c","\x55","\x00"));
int quality = __o_quality.Default(90);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_396_encode)
HXLINE( 398)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("bmp",45,bc,4a,00)) ){
HXLINE( 410)			return ::lime::graphics::format::BMP_obj::encode(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 410)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ){
HXLINE( 406)			return ::lime::graphics::format::JPEG_obj::encode(hx::ObjectPtr<OBJ_>(this),quality);
HXDLIN( 406)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE( 402)			return ::lime::graphics::format::PNG_obj::encode(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 402)			goto _hx_goto_5;
            		}
            		/* default */{
            		}
            		_hx_goto_5:;
HXLINE( 416)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,encode,return )

void Image_obj::fillRect( ::lime::math::Rectangle rect,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_421_fillRect)
HXLINE( 423)		rect = this->_hx___clipRect(rect);
HXLINE( 424)		bool _hx_tmp;
HXDLIN( 424)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 424)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 424)			_hx_tmp = true;
            		}
HXDLIN( 424)		if (_hx_tmp) {
HXLINE( 424)			return;
            		}
HXLINE( 426)		{
HXLINE( 426)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 426)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 430)					::lime::graphics::utils::ImageCanvasUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 438)					if ((this->buffer->data->length == (int)0)) {
HXLINE( 438)						return;
            					}
HXLINE( 440)					::lime::graphics::utils::ImageDataUtil_obj::fillRect(hx::ObjectPtr<OBJ_>(this),rect,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 444)					rect->offset(this->offsetX,this->offsetY);
HXLINE( 446)					int argb;
HXDLIN( 446)					if (hx::IsNull( format )) {
HXLINE( 450)						int rgba = color;
HXDLIN( 450)						int this1 = (int)0;
HXDLIN( 450)						int argb1 = this1;
HXDLIN( 450)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 446)						argb = argb1;
            					}
            					else {
HXLINE( 446)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 446)							argb = color;
HXDLIN( 446)							goto _hx_goto_7;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 449)							int bgra = color;
HXDLIN( 449)							int this2 = (int)0;
HXDLIN( 449)							int argb2 = this2;
HXDLIN( 449)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 446)							argb = argb2;
HXLINE( 449)							goto _hx_goto_7;
            						}
            						/* default */{
HXLINE( 450)							int rgba1 = color;
HXDLIN( 450)							int this3 = (int)0;
HXDLIN( 450)							int argb3 = this3;
HXDLIN( 450)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 446)							argb = argb3;
            						}
            						_hx_goto_7:;
            					}
HXLINE( 454)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic));
HXDLIN( 454)					_hx_tmp1(rect->_hx___toFlashRectangle(),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,fillRect,(void))

void Image_obj::floodFill(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_463_floodFill)
HXLINE( 465)		if (hx::IsNull( this->buffer )) {
HXLINE( 465)			return;
            		}
HXLINE( 467)		{
HXLINE( 467)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 467)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 471)					::lime::graphics::utils::ImageCanvasUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE( 479)					::lime::graphics::utils::ImageDataUtil_obj::floodFill(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE( 483)					int argb;
HXDLIN( 483)					if (hx::IsNull( format )) {
HXLINE( 487)						int rgba = color;
HXDLIN( 487)						int this1 = (int)0;
HXDLIN( 487)						int argb1 = this1;
HXDLIN( 487)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 483)						argb = argb1;
            					}
            					else {
HXLINE( 483)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE( 483)							argb = color;
HXDLIN( 483)							goto _hx_goto_9;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE( 486)							int bgra = color;
HXDLIN( 486)							int this2 = (int)0;
HXDLIN( 486)							int argb2 = this2;
HXDLIN( 486)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE( 483)							argb = argb2;
HXLINE( 486)							goto _hx_goto_9;
            						}
            						/* default */{
HXLINE( 487)							int rgba1 = color;
HXDLIN( 487)							int this3 = (int)0;
HXDLIN( 487)							int argb3 = this3;
HXDLIN( 487)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE( 483)							argb = argb3;
            						}
            						_hx_goto_9:;
            					}
HXLINE( 491)					 ::Dynamic _hx_tmp =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("floodFill",61,83,8a,59),hx::paccDynamic));
HXDLIN( 491)					int _hx_tmp1 = (x + this->offsetX);
HXDLIN( 491)					_hx_tmp(_hx_tmp1,(y + this->offsetY),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,floodFill,(void))

 ::lime::math::Rectangle Image_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor, ::Dynamic format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_580_getColorBoundsRect)
HXLINE( 582)		if (hx::IsNull( this->buffer )) {
HXLINE( 582)			return null();
            		}
HXLINE( 584)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 584)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 592)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 596)				return ::lime::graphics::utils::ImageDataUtil_obj::getColorBoundsRect(hx::ObjectPtr<OBJ_>(this),mask,color,findColor,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 600)				 ::Dynamic rect = this->buffer->_hx___srcBitmapData->__Field(HX_("getColorBoundsRect",86,ad,e8,80),hx::paccDynamic)(mask,color,findColor);
HXLINE( 601)				return  ::lime::math::Rectangle_obj::__alloc( HX_CTX , ::Dynamic(rect->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("y",79,00,00,00),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(rect->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)));
            			}
            			break;
            			default:{
HXLINE( 605)				return null();
            			}
            		}
HXLINE( 584)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,getColorBoundsRect,return )

int Image_obj::getPixel(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_611_getPixel)
HXLINE( 613)		bool _hx_tmp;
HXDLIN( 613)		bool _hx_tmp1;
HXDLIN( 613)		bool _hx_tmp2;
HXDLIN( 613)		bool _hx_tmp3;
HXDLIN( 613)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 613)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 613)			_hx_tmp3 = true;
            		}
HXDLIN( 613)		if (!(_hx_tmp3)) {
HXLINE( 613)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 613)			_hx_tmp2 = true;
            		}
HXDLIN( 613)		if (!(_hx_tmp2)) {
HXLINE( 613)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 613)			_hx_tmp1 = true;
            		}
HXDLIN( 613)		if (!(_hx_tmp1)) {
HXLINE( 613)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 613)			_hx_tmp = true;
            		}
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 613)			return (int)0;
            		}
HXLINE( 615)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 615)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 619)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 627)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 631)				 ::Dynamic color =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel",10,d6,7a,22),hx::paccDynamic));
HXDLIN( 631)				int color1 = (x + this->offsetX);
HXDLIN( 631)				int color2 = ( (int)(color(color1,(y + this->offsetY))) );
HXLINE( 633)				if (hx::IsNull( format )) {
HXLINE( 637)					int this1 = (int)0;
HXDLIN( 637)					int rgba = this1;
HXDLIN( 637)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 637)					int rgba1 = rgba;
HXDLIN( 637)					return rgba1;
            				}
            				else {
HXLINE( 633)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 635)						return color2;
HXDLIN( 635)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 636)						int this2 = (int)0;
HXDLIN( 636)						int bgra = this2;
HXDLIN( 636)						bgra = ((int)((int)((int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 636)						int bgra1 = bgra;
HXDLIN( 636)						return bgra1;
HXDLIN( 636)						goto _hx_goto_12;
            					}
            					/* default */{
HXLINE( 637)						int this3 = (int)0;
HXDLIN( 637)						int rgba2 = this3;
HXDLIN( 637)						rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 637)						int rgba3 = rgba2;
HXDLIN( 637)						return rgba3;
            					}
            					_hx_goto_12:;
            				}
            			}
            			break;
            			default:{
HXLINE( 643)				return (int)0;
            			}
            		}
HXLINE( 615)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel,return )

int Image_obj::getPixel32(int x,int y, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_650_getPixel32)
HXLINE( 652)		bool _hx_tmp;
HXDLIN( 652)		bool _hx_tmp1;
HXDLIN( 652)		bool _hx_tmp2;
HXDLIN( 652)		bool _hx_tmp3;
HXDLIN( 652)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 652)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE( 652)			_hx_tmp3 = true;
            		}
HXDLIN( 652)		if (!(_hx_tmp3)) {
HXLINE( 652)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE( 652)			_hx_tmp2 = true;
            		}
HXDLIN( 652)		if (!(_hx_tmp2)) {
HXLINE( 652)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE( 652)			_hx_tmp1 = true;
            		}
HXDLIN( 652)		if (!(_hx_tmp1)) {
HXLINE( 652)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE( 652)			_hx_tmp = true;
            		}
HXDLIN( 652)		if (_hx_tmp) {
HXLINE( 652)			return (int)0;
            		}
HXLINE( 654)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 654)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 658)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 666)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixel32(hx::ObjectPtr<OBJ_>(this),x,y,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 670)				 ::Dynamic color =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("getPixel32",af,a6,68,d7),hx::paccDynamic));
HXDLIN( 670)				int color1 = (x + this->offsetX);
HXDLIN( 670)				int color2 = ( (int)(color(color1,(y + this->offsetY))) );
HXLINE( 672)				if (hx::IsNull( format )) {
HXLINE( 676)					int this1 = (int)0;
HXDLIN( 676)					int rgba = this1;
HXDLIN( 676)					rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 676)					int rgba1 = rgba;
HXDLIN( 676)					return rgba1;
            				}
            				else {
HXLINE( 672)					 ::Dynamic _hx_switch_0 = format;
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 674)						return color2;
HXDLIN( 674)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 675)						int this2 = (int)0;
HXDLIN( 675)						int bgra = this2;
HXDLIN( 675)						bgra = ((int)((int)((int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 675)						int bgra1 = bgra;
HXDLIN( 675)						return bgra1;
HXDLIN( 675)						goto _hx_goto_14;
            					}
            					/* default */{
HXLINE( 676)						int this3 = (int)0;
HXDLIN( 676)						int rgba2 = this3;
HXDLIN( 676)						rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(color2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(color2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)color2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(color2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 676)						int rgba3 = rgba2;
HXDLIN( 676)						return rgba3;
            					}
            					_hx_goto_14:;
            				}
            			}
            			break;
            			default:{
HXLINE( 682)				return (int)0;
            			}
            		}
HXLINE( 654)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,getPixel32,return )

 ::haxe::io::Bytes Image_obj::getPixels( ::lime::math::Rectangle rect, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_689_getPixels)
HXLINE( 691)		if (hx::IsNull( this->buffer )) {
HXLINE( 691)			return null();
            		}
HXLINE( 693)		 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 693)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 697)				return ::lime::graphics::utils::ImageCanvasUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)1: {
HXLINE( 705)				return ::lime::graphics::utils::ImageDataUtil_obj::getPixels(hx::ObjectPtr<OBJ_>(this),rect,format);
            			}
            			break;
            			case (int)2: {
HXLINE( 750)				return null();
            			}
            			break;
            			default:{
HXLINE( 755)				return null();
            			}
            		}
HXLINE( 693)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,getPixels,return )

void Image_obj::merge( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_907_merge)
HXLINE( 909)		bool _hx_tmp;
HXDLIN( 909)		if (hx::IsNotNull( this->buffer )) {
HXLINE( 909)			_hx_tmp = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE( 909)			_hx_tmp = true;
            		}
HXDLIN( 909)		if (_hx_tmp) {
HXLINE( 909)			return;
            		}
HXLINE( 911)		{
HXLINE( 911)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 911)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 915)					::lime::graphics::utils::ImageCanvasUtil_obj::convertToCanvas(hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 916)					::lime::graphics::utils::ImageCanvasUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)1: {
HXLINE( 925)					::lime::graphics::utils::ImageDataUtil_obj::merge(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				case (int)2: {
HXLINE( 929)					sourceRect->offset(this->offsetX,this->offsetY);
HXLINE( 930)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("merge",b8,a2,c6,05),hx::paccDynamic));
HXDLIN( 930)					 ::Dynamic sourceImage1 = sourceImage->buffer->_hx___srcBitmapData;
HXDLIN( 930)					 ::Dynamic _hx_tmp2 = sourceRect->_hx___toFlashRectangle();
HXDLIN( 930)					_hx_tmp1(sourceImage1,_hx_tmp2,destPoint->_hx___toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            				}
            				break;
            				default:{
HXLINE( 934)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,merge,(void))

void Image_obj::resize(int newWidth,int newHeight){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_941_resize)
HXLINE( 943)		{
HXLINE( 943)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 943)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 947)					::lime::graphics::utils::ImageCanvasUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)1: {
HXLINE( 951)					::lime::graphics::utils::ImageDataUtil_obj::resize(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 967)		this->buffer->width = newWidth;
HXLINE( 968)		this->buffer->height = newHeight;
HXLINE( 970)		this->offsetX = (int)0;
HXLINE( 971)		this->offsetY = (int)0;
HXLINE( 972)		this->width = newWidth;
HXLINE( 973)		this->height = newHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,resize,(void))

void Image_obj::scroll(int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_978_scroll)
HXLINE( 980)		if (hx::IsNull( this->buffer )) {
HXLINE( 980)			return;
            		}
HXLINE( 982)		{
HXLINE( 982)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN( 982)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE( 986)					::lime::graphics::utils::ImageCanvasUtil_obj::scroll(hx::ObjectPtr<OBJ_>(this),x,y);
            				}
            				break;
            				case (int)1: {
HXLINE( 990)					 ::lime::math::Rectangle _hx_tmp = this->get_rect();
HXDLIN( 990)					this->copyPixels(hx::ObjectPtr<OBJ_>(this),_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,x,y),null(),null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE( 994)					 ::Dynamic _hx_tmp1 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("scroll",0d,d8,64,47),hx::paccDynamic));
HXDLIN( 994)					int _hx_tmp2 = (x + this->offsetX);
HXDLIN( 994)					_hx_tmp1(_hx_tmp2,(y + this->offsetX));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,scroll,(void))

void Image_obj::setPixel(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1003_setPixel)
HXLINE(1005)		bool _hx_tmp;
HXDLIN(1005)		bool _hx_tmp1;
HXDLIN(1005)		bool _hx_tmp2;
HXDLIN(1005)		bool _hx_tmp3;
HXDLIN(1005)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1005)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE(1005)			_hx_tmp3 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp3)) {
HXLINE(1005)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE(1005)			_hx_tmp2 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp2)) {
HXLINE(1005)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE(1005)			_hx_tmp1 = true;
            		}
HXDLIN(1005)		if (!(_hx_tmp1)) {
HXLINE(1005)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE(1005)			_hx_tmp = true;
            		}
HXDLIN(1005)		if (_hx_tmp) {
HXLINE(1005)			return;
            		}
HXLINE(1007)		{
HXLINE(1007)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1007)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1011)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE(1019)					::lime::graphics::utils::ImageDataUtil_obj::setPixel(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1023)					int argb;
HXDLIN(1023)					if (hx::IsNull( format )) {
HXLINE(1027)						int rgba = color;
HXDLIN(1027)						int this1 = (int)0;
HXDLIN(1027)						int argb1 = this1;
HXDLIN(1027)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1023)						argb = argb1;
            					}
            					else {
HXLINE(1023)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1023)							argb = color;
HXDLIN(1023)							goto _hx_goto_20;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1026)							int bgra = color;
HXDLIN(1026)							int this2 = (int)0;
HXDLIN(1026)							int argb2 = this2;
HXDLIN(1026)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1023)							argb = argb2;
HXLINE(1026)							goto _hx_goto_20;
            						}
            						/* default */{
HXLINE(1027)							int rgba1 = color;
HXDLIN(1027)							int this3 = (int)0;
HXDLIN(1027)							int argb3 = this3;
HXDLIN(1027)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1023)							argb = argb3;
            						}
            						_hx_goto_20:;
            					}
HXLINE(1031)					 ::Dynamic _hx_tmp4 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel",84,2f,d8,d0),hx::paccDynamic));
HXDLIN(1031)					int _hx_tmp5 = (x + this->offsetX);
HXDLIN(1031)					_hx_tmp4(_hx_tmp5,(y + this->offsetX),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel,(void))

void Image_obj::setPixel32(int x,int y,int color, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1040_setPixel32)
HXLINE(1042)		bool _hx_tmp;
HXDLIN(1042)		bool _hx_tmp1;
HXDLIN(1042)		bool _hx_tmp2;
HXDLIN(1042)		bool _hx_tmp3;
HXDLIN(1042)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1042)			_hx_tmp3 = (x < (int)0);
            		}
            		else {
HXLINE(1042)			_hx_tmp3 = true;
            		}
HXDLIN(1042)		if (!(_hx_tmp3)) {
HXLINE(1042)			_hx_tmp2 = (y < (int)0);
            		}
            		else {
HXLINE(1042)			_hx_tmp2 = true;
            		}
HXDLIN(1042)		if (!(_hx_tmp2)) {
HXLINE(1042)			_hx_tmp1 = (x >= this->width);
            		}
            		else {
HXLINE(1042)			_hx_tmp1 = true;
            		}
HXDLIN(1042)		if (!(_hx_tmp1)) {
HXLINE(1042)			_hx_tmp = (y >= this->height);
            		}
            		else {
HXLINE(1042)			_hx_tmp = true;
            		}
HXDLIN(1042)		if (_hx_tmp) {
HXLINE(1042)			return;
            		}
HXLINE(1044)		{
HXLINE(1044)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1044)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1048)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)1: {
HXLINE(1056)					::lime::graphics::utils::ImageDataUtil_obj::setPixel32(hx::ObjectPtr<OBJ_>(this),x,y,color,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1060)					int argb;
HXDLIN(1060)					if (hx::IsNull( format )) {
HXLINE(1064)						int rgba = color;
HXDLIN(1064)						int this1 = (int)0;
HXDLIN(1064)						int argb1 = this1;
HXDLIN(1064)						argb1 = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1060)						argb = argb1;
            					}
            					else {
HXLINE(1060)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1060)							argb = color;
HXDLIN(1060)							goto _hx_goto_22;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1063)							int bgra = color;
HXDLIN(1063)							int this2 = (int)0;
HXDLIN(1063)							int argb2 = this2;
HXDLIN(1063)							argb2 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1060)							argb = argb2;
HXLINE(1063)							goto _hx_goto_22;
            						}
            						/* default */{
HXLINE(1064)							int rgba1 = color;
HXDLIN(1064)							int this3 = (int)0;
HXDLIN(1064)							int argb3 = this3;
HXDLIN(1064)							argb3 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1060)							argb = argb3;
            						}
            						_hx_goto_22:;
            					}
HXLINE(1068)					 ::Dynamic _hx_tmp4 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("setPixel32",23,45,e6,da),hx::paccDynamic));
HXDLIN(1068)					int _hx_tmp5 = (x + this->offsetX);
HXDLIN(1068)					_hx_tmp4(_hx_tmp5,(y + this->offsetY),argb);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,setPixel32,(void))

void Image_obj::setPixels( ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer, ::Dynamic format){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1077_setPixels)
HXLINE(1079)		rect = this->_hx___clipRect(rect);
HXLINE(1080)		bool _hx_tmp;
HXDLIN(1080)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1080)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1080)			_hx_tmp = true;
            		}
HXDLIN(1080)		if (_hx_tmp) {
HXLINE(1080)			return;
            		}
HXLINE(1082)		{
HXLINE(1082)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1082)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: {
HXLINE(1086)					::lime::graphics::utils::ImageCanvasUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytePointer,format);
            				}
            				break;
            				case (int)1: {
HXLINE(1094)					::lime::graphics::utils::ImageDataUtil_obj::setPixels(hx::ObjectPtr<OBJ_>(this),rect,bytePointer,format);
            				}
            				break;
            				case (int)2: {
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,setPixels,(void))

int Image_obj::threshold( ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource, ::Dynamic format){
int color = __o_color.Default(0);
int mask = __o_mask.Default(-1);
bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1161_threshold)
HXLINE(1163)		bool _hx_tmp;
HXDLIN(1163)		bool _hx_tmp1;
HXDLIN(1163)		if (hx::IsNotNull( this->buffer )) {
HXLINE(1163)			_hx_tmp1 = hx::IsNull( sourceImage );
            		}
            		else {
HXLINE(1163)			_hx_tmp1 = true;
            		}
HXDLIN(1163)		if (!(_hx_tmp1)) {
HXLINE(1163)			_hx_tmp = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1163)			_hx_tmp = true;
            		}
HXDLIN(1163)		if (_hx_tmp) {
HXLINE(1163)			return (int)0;
            		}
HXLINE(1165)		{
HXLINE(1165)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1165)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: case (int)1: {
HXLINE(1174)					return ::lime::graphics::utils::ImageDataUtil_obj::threshold(hx::ObjectPtr<OBJ_>(this),sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
            				}
            				break;
            				case (int)2: {
HXLINE(1178)					int _color;
HXDLIN(1178)					if (hx::IsNull( format )) {
HXLINE(1182)						int rgba = color;
HXDLIN(1182)						int this1 = (int)0;
HXDLIN(1182)						int argb = this1;
HXDLIN(1182)						argb = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1178)						_color = argb;
            					}
            					else {
HXLINE(1178)						 ::Dynamic _hx_switch_0 = format;
            						if (  (_hx_switch_0==(int)1) ){
HXLINE(1178)							_color = color;
HXDLIN(1178)							goto _hx_goto_25;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1181)							int bgra = color;
HXDLIN(1181)							int this2 = (int)0;
HXDLIN(1181)							int argb1 = this2;
HXDLIN(1181)							argb1 = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1178)							_color = argb1;
HXLINE(1181)							goto _hx_goto_25;
            						}
            						/* default */{
HXLINE(1182)							int rgba1 = color;
HXDLIN(1182)							int this3 = (int)0;
HXDLIN(1182)							int argb2 = this3;
HXDLIN(1182)							argb2 = ((int)((int)((int)((int)((int)((int)rgba1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba1,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1178)							_color = argb2;
            						}
            						_hx_goto_25:;
            					}
HXLINE(1186)					int _mask;
HXDLIN(1186)					if (hx::IsNull( format )) {
HXLINE(1190)						int rgba2 = mask;
HXDLIN(1190)						int this4 = (int)0;
HXDLIN(1190)						int argb3 = this4;
HXDLIN(1190)						argb3 = ((int)((int)((int)((int)((int)((int)rgba2 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba2,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1186)						_mask = argb3;
            					}
            					else {
HXLINE(1186)						 ::Dynamic _hx_switch_1 = format;
            						if (  (_hx_switch_1==(int)1) ){
HXLINE(1186)							_mask = mask;
HXDLIN(1186)							goto _hx_goto_26;
            						}
            						if (  (_hx_switch_1==(int)2) ){
HXLINE(1189)							int bgra1 = mask;
HXDLIN(1189)							int this5 = (int)0;
HXDLIN(1189)							int argb4 = this5;
HXDLIN(1189)							argb4 = ((int)((int)((int)((int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255));
HXLINE(1186)							_mask = argb4;
HXLINE(1189)							goto _hx_goto_26;
            						}
            						/* default */{
HXLINE(1190)							int rgba3 = mask;
HXDLIN(1190)							int this6 = (int)0;
HXDLIN(1190)							int argb5 = this6;
HXDLIN(1190)							argb5 = ((int)((int)((int)((int)((int)((int)rgba3 & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba3,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba3,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba3,(int)8) & (int)(int)255) & (int)(int)255));
HXLINE(1186)							_mask = argb5;
            						}
            						_hx_goto_26:;
            					}
HXLINE(1194)					sourceRect->offset(sourceImage->offsetX,sourceImage->offsetY);
HXLINE(1195)					destPoint->offset(this->offsetX,this->offsetY);
HXLINE(1197)					 ::Dynamic _hx_tmp2 =  ::Dynamic(this->buffer->_hx___srcBitmapData->__Field(HX_("threshold",ab,c3,a3,34),hx::paccDynamic));
HXDLIN(1197)					 ::Dynamic _hx_tmp3 = sourceImage->buffer->get_src();
HXDLIN(1197)					 ::Dynamic _hx_tmp4 = sourceRect->_hx___toFlashRectangle();
HXDLIN(1197)					return _hx_tmp2(_hx_tmp3,_hx_tmp4,destPoint->_hx___toFlashPoint(),operation,threshold,_color,_mask,copySource);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1203)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Image_obj,threshold,return )

 ::lime::math::Rectangle Image_obj::_hx___clipRect( ::lime::math::Rectangle r){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1237___clipRect)
HXLINE(1239)		if (hx::IsNull( r )) {
HXLINE(1239)			return null();
            		}
HXLINE(1241)		if ((r->x < (int)0)) {
HXLINE(1243)			 ::lime::math::Rectangle r1 = r;
HXDLIN(1243)			r1->width = (r1->width - -(r->x));
HXLINE(1244)			r->x = (int)0;
HXLINE(1246)			if (((r->x + r->width) <= (int)0)) {
HXLINE(1246)				return null();
            			}
            		}
HXLINE(1250)		if ((r->y < (int)0)) {
HXLINE(1252)			 ::lime::math::Rectangle r2 = r;
HXDLIN(1252)			r2->height = (r2->height - -(r->y));
HXLINE(1253)			r->y = (int)0;
HXLINE(1255)			if (((r->y + r->height) <= (int)0)) {
HXLINE(1255)				return null();
            			}
            		}
HXLINE(1259)		if (((r->x + r->width) >= this->width)) {
HXLINE(1261)			 ::lime::math::Rectangle r3 = r;
HXDLIN(1261)			r3->width = (r3->width - ((r->x + r->width) - this->width));
HXLINE(1263)			if ((r->width <= (int)0)) {
HXLINE(1263)				return null();
            			}
            		}
HXLINE(1267)		if (((r->y + r->height) >= this->height)) {
HXLINE(1269)			 ::lime::math::Rectangle r4 = r;
HXDLIN(1269)			r4->height = (r4->height - ((r->y + r->height) - this->height));
HXLINE(1271)			if ((r->height <= (int)0)) {
HXLINE(1271)				return null();
            			}
            		}
HXLINE(1275)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___clipRect,return )

void Image_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1280___fromBase64)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromBase64,(void))

void Image_obj::_hx___fromBytes( ::haxe::io::Bytes bytes, ::Dynamic onload){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1310___fromBytes)
HXLINE(1343)		 ::lime::graphics::ImageBuffer imageBuffer = null();
HXLINE(1346)		 ::haxe::io::Bytes buffer = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1346)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1346)		if (hx::IsNotNull( buffer )) {
HXLINE(1346)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1346)			int in_byteOffset = (int)0;
HXDLIN(1346)			if ((in_byteOffset < (int)0)) {
HXLINE(1346)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(1346)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(1346)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(1346)			int bufferByteLength = buffer->length;
HXDLIN(1346)			int elementSize = _this->bytesPerElement;
HXDLIN(1346)			int newByteLength = bufferByteLength;
HXDLIN(1346)			{
HXLINE(1346)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1346)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1346)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1346)				if ((newByteLength < (int)0)) {
HXLINE(1346)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(1346)			_this->buffer = buffer;
HXDLIN(1346)			_this->byteOffset = in_byteOffset;
HXDLIN(1346)			_this->byteLength = newByteLength;
HXDLIN(1346)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(1346)			this1 = _this;
            		}
            		else {
HXLINE(1346)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1346)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null());
HXDLIN(1346)		imageBuffer = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_load(hx::DynamicPtr(bytes),hx::DynamicPtr(buffer1))) );
HXLINE(1354)		if (hx::IsNotNull( imageBuffer )) {
HXLINE(1356)			this->_hx___fromImageBuffer(imageBuffer);
HXLINE(1358)			if (hx::IsNotNull( onload )) {
HXLINE(1360)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,_hx___fromBytes,(void))

void Image_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1375___fromFile)
HXLINE(1423)		 ::lime::graphics::ImageBuffer buffer = null();
HXLINE(1477)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1480)			 ::haxe::io::Bytes buffer1 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(1480)			 ::lime::utils::ArrayBufferView this1;
HXDLIN(1480)			if (hx::IsNotNull( buffer1 )) {
HXLINE(1480)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(1480)				int in_byteOffset = (int)0;
HXDLIN(1480)				if ((in_byteOffset < (int)0)) {
HXLINE(1480)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1480)				if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(1480)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(1480)				int bufferByteLength = buffer1->length;
HXDLIN(1480)				int elementSize = _this->bytesPerElement;
HXDLIN(1480)				int newByteLength = bufferByteLength;
HXDLIN(1480)				{
HXLINE(1480)					newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1480)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(1480)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(1480)					if ((newByteLength < (int)0)) {
HXLINE(1480)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN(1480)				_this->buffer = buffer1;
HXDLIN(1480)				_this->byteOffset = in_byteOffset;
HXDLIN(1480)				_this->byteLength = newByteLength;
HXDLIN(1480)				_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(1480)				this1 = _this;
            			}
            			else {
HXLINE(1480)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN(1480)			 ::Dynamic buffer2 =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null());
HXDLIN(1480)			buffer = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_load(hx::DynamicPtr(path),hx::DynamicPtr(buffer2))) );
            		}
HXLINE(1531)		if (hx::IsNotNull( buffer )) {
HXLINE(1533)			this->_hx___fromImageBuffer(buffer);
HXLINE(1535)			if (hx::IsNotNull( onload )) {
HXLINE(1537)				onload(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,_hx___fromFile,(void))

void Image_obj::_hx___fromImageBuffer( ::lime::graphics::ImageBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1552___fromImageBuffer)
HXLINE(1554)		this->buffer = buffer;
HXLINE(1556)		if (hx::IsNotNull( buffer )) {
HXLINE(1558)			if ((this->width == (int)-1)) {
HXLINE(1560)				this->width = buffer->width;
            			}
HXLINE(1564)			if ((this->height == (int)-1)) {
HXLINE(1566)				this->height = buffer->height;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___fromImageBuffer,(void))

 ::lime::utils::ArrayBufferView Image_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1619_get_data)
HXLINE(1621)		bool _hx_tmp;
HXDLIN(1621)		bool _hx_tmp1;
HXDLIN(1621)		if (hx::IsNull( this->buffer->data )) {
HXLINE(1621)			_hx_tmp1 = (this->buffer->width > (int)0);
            		}
            		else {
HXLINE(1621)			_hx_tmp1 = false;
            		}
HXDLIN(1621)		if (_hx_tmp1) {
HXLINE(1621)			_hx_tmp = (this->buffer->height > (int)0);
            		}
            		else {
HXLINE(1621)			_hx_tmp = false;
            		}
HXLINE(1636)		return this->buffer->data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_data,return )

 ::lime::utils::ArrayBufferView Image_obj::set_data( ::lime::utils::ArrayBufferView value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1643_set_data)
HXLINE(1643)		return (this->buffer->data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_data,return )

int Image_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1650_get_format)
HXLINE(1650)		return this->buffer->format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_format,return )

int Image_obj::set_format(int value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1655_set_format)
HXLINE(1657)		if ((this->buffer->format != value)) {
HXLINE(1659)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1659)			if ((_hx_getEnumValueIndex(_g) == (int)1)) {
HXLINE(1663)				::lime::graphics::utils::ImageDataUtil_obj::setFormat(hx::ObjectPtr<OBJ_>(this),value);
            			}
            		}
HXLINE(1671)		return (this->buffer->format = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_format,return )

bool Image_obj::get_powerOfTwo(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1678_get_powerOfTwo)
HXLINE(1678)		bool _hx_tmp;
HXDLIN(1678)		if ((this->buffer->width != (int)0)) {
HXLINE(1678)			int _hx_tmp1 = this->buffer->width;
HXDLIN(1678)			_hx_tmp = (((int)_hx_tmp1 & (int)(~(this->buffer->width) + (int)1)) == this->buffer->width);
            		}
            		else {
HXLINE(1678)			_hx_tmp = false;
            		}
HXDLIN(1678)		if (_hx_tmp) {
HXLINE(1678)			if ((this->buffer->height != (int)0)) {
HXLINE(1678)				int _hx_tmp2 = this->buffer->height;
HXDLIN(1678)				return (((int)_hx_tmp2 & (int)(~(this->buffer->height) + (int)1)) == this->buffer->height);
            			}
            			else {
HXLINE(1678)				return false;
            			}
            		}
            		else {
HXLINE(1678)			return false;
            		}
HXDLIN(1678)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_powerOfTwo,return )

bool Image_obj::set_powerOfTwo(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1683_set_powerOfTwo)
HXLINE(1685)		if ((value != this->get_powerOfTwo())) {
HXLINE(1687)			int newWidth = (int)1;
HXLINE(1688)			int newHeight = (int)1;
HXLINE(1690)			while((newWidth < this->buffer->width)){
HXLINE(1692)				newWidth = ((int)newWidth << (int)(int)1);
            			}
HXLINE(1696)			while((newHeight < this->buffer->height)){
HXLINE(1698)				newHeight = ((int)newHeight << (int)(int)1);
            			}
HXLINE(1702)			{
HXLINE(1702)				 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1702)				switch((int)(_hx_getEnumValueIndex(_g))){
            					case (int)0: {
            					}
            					break;
            					case (int)1: {
HXLINE(1710)						::lime::graphics::utils::ImageDataUtil_obj::resizeBuffer(hx::ObjectPtr<OBJ_>(this),newWidth,newHeight);
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE(1728)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_powerOfTwo,return )

bool Image_obj::get_premultiplied(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1735_get_premultiplied)
HXLINE(1735)		return this->buffer->premultiplied;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_premultiplied,return )

bool Image_obj::set_premultiplied(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1740_set_premultiplied)
HXLINE(1742)		bool _hx_tmp;
HXDLIN(1742)		if (value) {
HXLINE(1742)			_hx_tmp = !(this->buffer->premultiplied);
            		}
            		else {
HXLINE(1742)			_hx_tmp = false;
            		}
HXDLIN(1742)		if (_hx_tmp) {
HXLINE(1744)			 ::lime::graphics::ImageType _g = this->type;
HXDLIN(1744)			switch((int)(_hx_getEnumValueIndex(_g))){
            				case (int)0: case (int)1: {
HXLINE(1752)					::lime::graphics::utils::ImageDataUtil_obj::multiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            		else {
HXLINE(1760)			bool _hx_tmp1;
HXDLIN(1760)			if (!(value)) {
HXLINE(1760)				_hx_tmp1 = this->buffer->premultiplied;
            			}
            			else {
HXLINE(1760)				_hx_tmp1 = false;
            			}
HXDLIN(1760)			if (_hx_tmp1) {
HXLINE(1762)				 ::lime::graphics::ImageType _g1 = this->type;
HXDLIN(1762)				if ((_hx_getEnumValueIndex(_g1) == (int)1)) {
HXLINE(1770)					::lime::graphics::utils::ImageDataUtil_obj::unmultiplyAlpha(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE(1780)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_premultiplied,return )

 ::lime::math::Rectangle Image_obj::get_rect(){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1787_get_rect)
HXLINE(1787)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_rect,return )

 ::Dynamic Image_obj::get_src(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1802_get_src)
HXLINE(1802)		return this->buffer->get_src();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_src,return )

 ::Dynamic Image_obj::set_src( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1809_set_src)
HXLINE(1809)		return this->buffer->set_src(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_src,return )

bool Image_obj::get_transparent(){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1814_get_transparent)
HXLINE(1816)		if (hx::IsNull( this->buffer )) {
HXLINE(1816)			return false;
            		}
HXLINE(1817)		return this->buffer->transparent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_transparent,return )

bool Image_obj::set_transparent(bool value){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1822_set_transparent)
HXLINE(1825)		if (hx::IsNull( this->buffer )) {
HXLINE(1825)			return false;
            		}
HXLINE(1826)		return (this->buffer->transparent = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_transparent,return )

::String Image_obj::_hx___base64Chars;

 ::haxe::crypto::BaseCode Image_obj::_hx___base64Encoder;

 ::lime::graphics::Image Image_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_500_fromBase64)
HXLINE( 502)		if (hx::IsNull( base64 )) {
HXLINE( 502)			return null();
            		}
HXLINE( 503)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 504)		image->_hx___fromBase64(base64,type,null());
HXLINE( 505)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromBase64,return )

 ::lime::graphics::Image Image_obj::fromBitmapData( ::Dynamic bitmapData){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_513_fromBitmapData)
HXLINE( 516)		if (hx::IsNull( bitmapData )) {
HXLINE( 516)			return null();
            		}
HXLINE( 522)		return  ::Dynamic(bitmapData->__Field(HX_("image",5b,1f,69,bd),hx::paccDynamic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBitmapData,return )

 ::lime::graphics::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_528_fromBytes)
HXLINE( 530)		if (hx::IsNull( bytes )) {
HXLINE( 530)			return null();
            		}
HXLINE( 531)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 532)		image->_hx___fromBytes(bytes,null());
HXLINE( 533)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromBytes,return )

 ::lime::graphics::Image Image_obj::fromCanvas( ::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_541_fromCanvas)
HXLINE( 544)		if (hx::IsNull( canvas )) {
HXLINE( 544)			return null();
            		}
HXLINE( 545)		 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(canvas->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(canvas->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 546)		buffer->set_src(canvas);
HXLINE( 547)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
HXLINE( 548)		image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 549)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromCanvas,return )

 ::lime::graphics::Image Image_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_554_fromFile)
HXLINE( 556)		if (hx::IsNull( path )) {
HXLINE( 556)			return null();
            		}
HXLINE( 557)		 ::lime::graphics::Image image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 558)		image->_hx___fromFile(path,null(),null());
HXLINE( 559)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromFile,return )

 ::lime::graphics::Image Image_obj::fromImageElement( ::Dynamic image){
            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_567_fromImageElement)
HXLINE( 570)		if (hx::IsNull( image )) {
HXLINE( 570)			return null();
            		}
HXLINE( 571)		 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,null(), ::Dynamic(image->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)), ::Dynamic(image->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)),null(),null());
HXLINE( 572)		buffer->set_src(image);
HXLINE( 573)		 ::lime::graphics::Image _image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,null(),null(),null(),null(),null(),null());
HXLINE( 574)		_image->type = ::lime::graphics::ImageType_obj::CANVAS_dyn();
HXLINE( 575)		return _image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,fromImageElement,return )

 ::lime::app::Future Image_obj::loadFromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_762_loadFromBase64)
HXLINE( 764)		bool _hx_tmp;
HXDLIN( 764)		if (hx::IsNotNull( base64 )) {
HXLINE( 764)			_hx_tmp = hx::IsNull( type );
            		}
            		else {
HXLINE( 764)			_hx_tmp = true;
            		}
HXDLIN( 764)		if (_hx_tmp) {
HXLINE( 764)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE( 772)		return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,loadFromBase64,return )

 ::lime::app::Future Image_obj::loadFromBytes( ::haxe::io::Bytes bytes){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::io::Bytes,bytes) HXARGC(0)
            		 ::lime::graphics::Image _hx_run(){
            			HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_842_loadFromBytes)
HXLINE( 842)			return ::lime::graphics::Image_obj::fromBytes(bytes);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_779_loadFromBytes)
HXLINE( 781)		if (hx::IsNull( bytes )) {
HXLINE( 781)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE( 842)		return  ::lime::app::Future_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(bytes)),true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,loadFromBytes,return )

 ::lime::app::Future Image_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_890_loadFromFile)
HXLINE( 890)			if (hx::IsNotNull( image )) {
HXLINE( 892)				return ::lime::app::Future_obj::withValue(image);
            			}
            			else {
HXLINE( 896)				return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            			}
HXLINE( 890)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_849_loadFromFile)
HXLINE( 851)		if (hx::IsNull( path )) {
HXLINE( 851)			return ::lime::app::Future_obj::withValue(null());
            		}
HXLINE( 887)		 ::lime::net::_HTTPRequest_lime_graphics_Image request =  ::lime::net::_HTTPRequest_lime_graphics_Image_obj::__alloc( HX_CTX ,null());
HXLINE( 888)		return request->load(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,loadFromFile,return )

::String Image_obj::_hx___base64Encode( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1230___base64Encode)
HXLINE(1230)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___base64Encode,return )

bool Image_obj::_hx___isGIF( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1575___isGIF)
HXLINE(1577)		bool _hx_tmp;
HXDLIN(1577)		if (hx::IsNotNull( bytes )) {
HXLINE(1577)			_hx_tmp = (bytes->length < (int)6);
            		}
            		else {
HXLINE(1577)			_hx_tmp = true;
            		}
HXDLIN(1577)		if (_hx_tmp) {
HXLINE(1577)			return false;
            		}
HXLINE(1579)		::String header = bytes->getString((int)0,(int)6);
HXLINE(1580)		if ((header != HX_("GIF87a",1e,95,06,9a))) {
HXLINE(1580)			return (header == HX_("GIF89a",dc,96,06,9a));
            		}
            		else {
HXLINE(1580)			return true;
            		}
HXDLIN(1580)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isGIF,return )

bool Image_obj::_hx___isJPG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1585___isJPG)
HXLINE(1587)		bool _hx_tmp;
HXDLIN(1587)		if (hx::IsNotNull( bytes )) {
HXLINE(1587)			_hx_tmp = (bytes->length < (int)4);
            		}
            		else {
HXLINE(1587)			_hx_tmp = true;
            		}
HXDLIN(1587)		if (_hx_tmp) {
HXLINE(1587)			return false;
            		}
HXLINE(1589)		bool _hx_tmp1;
HXDLIN(1589)		bool _hx_tmp2;
HXDLIN(1589)		if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1589)			_hx_tmp2 = (bytes->b->__get((int)1) == (int)216);
            		}
            		else {
HXLINE(1589)			_hx_tmp2 = false;
            		}
HXDLIN(1589)		if (_hx_tmp2) {
HXLINE(1589)			_hx_tmp1 = (bytes->b->__get((bytes->length - (int)2)) == (int)255);
            		}
            		else {
HXLINE(1589)			_hx_tmp1 = false;
            		}
HXDLIN(1589)		if (_hx_tmp1) {
HXLINE(1589)			return (bytes->b->__get((bytes->length - (int)1)) == (int)217);
            		}
            		else {
HXLINE(1589)			return false;
            		}
HXDLIN(1589)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isJPG,return )

bool Image_obj::_hx___isPNG( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1594___isPNG)
HXLINE(1596)		bool _hx_tmp;
HXDLIN(1596)		if (hx::IsNotNull( bytes )) {
HXLINE(1596)			_hx_tmp = (bytes->length < (int)8);
            		}
            		else {
HXLINE(1596)			_hx_tmp = true;
            		}
HXDLIN(1596)		if (_hx_tmp) {
HXLINE(1596)			return false;
            		}
HXLINE(1598)		bool _hx_tmp1;
HXDLIN(1598)		bool _hx_tmp2;
HXDLIN(1598)		bool _hx_tmp3;
HXDLIN(1598)		bool _hx_tmp4;
HXDLIN(1598)		bool _hx_tmp5;
HXDLIN(1598)		bool _hx_tmp6;
HXDLIN(1598)		if ((bytes->b->__get((int)0) == (int)137)) {
HXLINE(1598)			_hx_tmp6 = (bytes->b->__get((int)1) == (int)80);
            		}
            		else {
HXLINE(1598)			_hx_tmp6 = false;
            		}
HXDLIN(1598)		if (_hx_tmp6) {
HXLINE(1598)			_hx_tmp5 = (bytes->b->__get((int)2) == (int)78);
            		}
            		else {
HXLINE(1598)			_hx_tmp5 = false;
            		}
HXDLIN(1598)		if (_hx_tmp5) {
HXLINE(1598)			_hx_tmp4 = (bytes->b->__get((int)3) == (int)71);
            		}
            		else {
HXLINE(1598)			_hx_tmp4 = false;
            		}
HXDLIN(1598)		if (_hx_tmp4) {
HXLINE(1598)			_hx_tmp3 = (bytes->b->__get((int)4) == (int)13);
            		}
            		else {
HXLINE(1598)			_hx_tmp3 = false;
            		}
HXDLIN(1598)		if (_hx_tmp3) {
HXLINE(1598)			_hx_tmp2 = (bytes->b->__get((int)5) == (int)10);
            		}
            		else {
HXLINE(1598)			_hx_tmp2 = false;
            		}
HXDLIN(1598)		if (_hx_tmp2) {
HXLINE(1598)			_hx_tmp1 = (bytes->b->__get((int)6) == (int)26);
            		}
            		else {
HXLINE(1598)			_hx_tmp1 = false;
            		}
HXDLIN(1598)		if (_hx_tmp1) {
HXLINE(1598)			return (bytes->b->__get((int)7) == (int)10);
            		}
            		else {
HXLINE(1598)			return false;
            		}
HXDLIN(1598)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isPNG,return )

bool Image_obj::_hx___isWebP( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_1603___isWebP)
HXLINE(1605)		bool _hx_tmp;
HXDLIN(1605)		if (hx::IsNotNull( bytes )) {
HXLINE(1605)			_hx_tmp = (bytes->length < (int)16);
            		}
            		else {
HXLINE(1605)			_hx_tmp = true;
            		}
HXDLIN(1605)		if (_hx_tmp) {
HXLINE(1605)			return false;
            		}
HXLINE(1607)		if ((bytes->getString((int)0,(int)4) == HX_("RIFF",b7,20,6b,36))) {
HXLINE(1607)			return (bytes->getString((int)8,(int)4) == HX_("WEBP",5c,25,b6,39));
            		}
            		else {
HXLINE(1607)			return false;
            		}
HXDLIN(1607)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,_hx___isWebP,return )


hx::ObjectPtr< Image_obj > Image_obj::__new( ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	hx::ObjectPtr< Image_obj > __this = new Image_obj();
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

hx::ObjectPtr< Image_obj > Image_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::ImageBuffer buffer,hx::Null< int >  __o_offsetX,hx::Null< int >  __o_offsetY,hx::Null< int >  __o_width,hx::Null< int >  __o_height, ::Dynamic color, ::lime::graphics::ImageType type) {
	Image_obj *__this = (Image_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Image_obj), true, "lime.graphics.Image"));
	*(void **)__this = Image_obj::_hx_vtable;
	__this->__construct(buffer,__o_offsetX,__o_offsetY,__o_width,__o_height,color,type);
	return __this;
}

Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_src()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_data()); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( inCallProp == hx::paccAlways ? get_rect() : rect); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_format()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return hx::Val( get_src_dyn()); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return hx::Val( set_src_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn()); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rect") ) { return hx::Val( get_rect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_powerOfTwo()); }
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__clipRect") ) { return hx::Val( _hx___clipRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn()); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transparent()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_premultiplied()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"get_powerOfTwo") ) { return hx::Val( get_powerOfTwo_dyn()); }
		if (HX_FIELD_EQ(inName,"set_powerOfTwo") ) { return hx::Val( set_powerOfTwo_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_transparent") ) { return hx::Val( get_transparent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transparent") ) { return hx::Val( set_transparent_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__fromImageBuffer") ) { return hx::Val( _hx___fromImageBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_premultiplied") ) { return hx::Val( get_premultiplied_dyn()); }
		if (HX_FIELD_EQ(inName,"set_premultiplied") ) { return hx::Val( set_premultiplied_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__isGIF") ) { outValue = _hx___isGIF_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isJPG") ) { outValue = _hx___isJPG_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isPNG") ) { outValue = _hx___isPNG_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__isWebP") ) { outValue = _hx___isWebP_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCanvas") ) { outValue = fromCanvas_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { outValue = _hx___base64Chars; return true; }
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__base64Encode") ) { outValue = _hx___base64Encode_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { outValue = _hx___base64Encoder; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromImageElement") ) { outValue = fromImageElement_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_src(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue) ); }
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::lime::graphics::ImageType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::ImageBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_powerOfTwo(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transparent(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"premultiplied") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultiplied(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"__base64Chars") ) { _hx___base64Chars=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__base64Encoder") ) { _hx___base64Encoder=ioValue.Cast<  ::haxe::crypto::BaseCode >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"));
	outFields->push(HX_HCSTRING("premultiplied","\x56","\xf1","\x4e","\xa4"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::ImageBuffer*/ ,(int)offsetof(Image_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsBool,(int)offsetof(Image_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetX),HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7")},
	{hx::fsInt,(int)offsetof(Image_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(Image_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsObject /*::lime::graphics::ImageType*/ ,(int)offsetof(Image_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Image_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Image_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Image_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Image_obj::_hx___base64Chars,HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36")},
	{hx::fsObject /*::haxe::crypto::BaseCode*/ ,(void *) &Image_obj::_hx___base64Encoder,HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("__clipRect","\x34","\x03","\xa3","\xfb"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImageBuffer","\x51","\x6e","\xca","\xca"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_powerOfTwo","\xb9","\x46","\xa4","\x60"),
	HX_HCSTRING("set_powerOfTwo","\x2d","\x2f","\xc4","\x80"),
	HX_HCSTRING("get_premultiplied","\xad","\xfc","\xbe","\xaa"),
	HX_HCSTRING("set_premultiplied","\xb9","\xd4","\x2c","\xce"),
	HX_HCSTRING("get_rect","\xad","\x08","\x62","\xcb"),
	HX_HCSTRING("get_src","\x7b","\x6f","\xcc","\x26"),
	HX_HCSTRING("set_src","\x87","\x00","\xce","\x19"),
	HX_HCSTRING("get_transparent","\xe9","\xe2","\x9b","\xe3"),
	HX_HCSTRING("set_transparent","\xf5","\x5f","\x67","\xdf"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_MARK_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Chars,"__base64Chars");
	HX_VISIT_MEMBER_NAME(Image_obj::_hx___base64Encoder,"__base64Encoder");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("__base64Chars","\xae","\xc9","\x24","\x36"),
	HX_HCSTRING("__base64Encoder","\xad","\xa4","\x42","\x7e"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromCanvas","\xe2","\x59","\x86","\xfb"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImageElement","\x2b","\x91","\x89","\x8f"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("__base64Encode","\x25","\xfc","\x79","\x6c"),
	HX_HCSTRING("__isGIF","\x1a","\xeb","\xaa","\x2b"),
	HX_HCSTRING("__isJPG","\xf7","\x37","\xad","\x2b"),
	HX_HCSTRING("__isPNG","\xbf","\xc3","\xb1","\x2b"),
	HX_HCSTRING("__isWebP","\x66","\x8d","\x8b","\x14"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Object *dummy = new Image_obj;
	Image_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.Image","\x91","\x28","\xc1","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ef8f6e7e24e3b831_89_boot)
HXLINE(  89)		_hx___base64Chars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",03,41,03,7f);
            	}
}

} // end namespace lime
} // end namespace graphics
