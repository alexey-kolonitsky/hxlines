// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_HtmlParser
#include <openfl/_internal/text/HtmlParser.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_125_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",125,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_158_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",158,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_173_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",173,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_202_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",202,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_249_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",249,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_277_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",277,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_304_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",304,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_325_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",325,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_355_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",355,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_380_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",380,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_401_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",401,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_432_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_445_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",445,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_489_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",489,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_504_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",504,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_560_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",560,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_568_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",568,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_723_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",723,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_750___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",750,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_763___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",763,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_792___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",792,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_801___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",801,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_830___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",830,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_839___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",839,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_867___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",867,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_880___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",880,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_915___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",915,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_939___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",939,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1077___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1077,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1094___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1094,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1132___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1132,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1151___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1151,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1207___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1207,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1243___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1243,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1271___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1271,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1290___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1290,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1300___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",1300,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1361___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",1361,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1397___renderDOMClear,"openfl.text.TextField","__renderDOMClear",0x09e66c65,"openfl.text.TextField.__renderDOMClear","openfl/text/TextField.hx",1397,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1406___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",1406,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1419___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",1419,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1429___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",1429,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1448___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",1448,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1468___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",1468,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1483___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",1483,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1523___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",1523,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1561___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",1561,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1578_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",1578,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1583_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",1583,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1598_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",1598,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1603_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",1603,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1620_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",1620,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1625_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",1625,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1641_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1641,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1646_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1646,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1662_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1662,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1667_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1667,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1683_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1683,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1688_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1688,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1702_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1702,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1711_get_cacheAsBitmap,"openfl.text.TextField","get_cacheAsBitmap",0xd9261d96,"openfl.text.TextField.get_cacheAsBitmap","openfl/text/TextField.hx",1711,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1722_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1722,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1729_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1729,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1734_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1734,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1749_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1749,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1754_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1754,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1774_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1774,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1788_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1788,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1795_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1795,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1809_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1809,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1814_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1814,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1822_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1822,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1842_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1842,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1847_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1847,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1897_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",1897,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1912_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",1912,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1917_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",1917,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1932_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",1932,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1941_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",1941,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1952_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",1952,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1959_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",1959,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1966_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",1966,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1971_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",1971,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1986_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",1986,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1997_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",1997,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2004_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2004,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2011_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2011,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2016_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2016,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2038_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2038,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2043_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2043,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2065_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2065,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2070_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2070,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2093_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2093,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2100_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2107_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2107,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2112_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2112,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2128_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2128,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2133_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2133,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2170_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2170,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2175_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2175,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2194_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2194,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2202_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2202,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2212_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2212,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2217_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",2217,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2251_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",2251,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2259_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",2259,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2279_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",2279,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2284_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",2284,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2306_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",2306,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2335_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",2335,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2382_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",2382,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2389_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",2389,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2400_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",2400,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2405_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",2405,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2426_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",2426,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2670_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",2670,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_59_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",59,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_125_new)
HXLINE( 127)		super::__construct();
HXLINE( 129)		this->_hx___caretIndex = (int)-1;
HXLINE( 130)		this->_hx___displayAsPassword = false;
HXLINE( 131)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 132)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 133)		this->_hx___layoutDirty = true;
HXLINE( 134)		this->_hx___offsetX = (int)0;
HXLINE( 135)		this->_hx___offsetY = (int)0;
HXLINE( 136)		this->_hx___tabEnabled = true;
HXLINE( 137)		this->_hx___mouseWheelEnabled = true;
HXLINE( 138)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 140)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 142)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 143)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 144)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 145)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 146)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 150)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 151)		{
HXLINE( 151)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 151)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0));
            		}
HXLINE( 153)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

static ::openfl::display::IShaderDrawable_obj _hx_openfl_text_TextField__hx_openfl_display_IShaderDrawable= {
};

void *TextField_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa78ed11a: return &_hx_openfl_text_TextField__hx_openfl_display_IShaderDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_158_appendText)
HXLINE( 160)		bool _hx_tmp;
HXDLIN( 160)		if (hx::IsNotNull( text )) {
HXLINE( 160)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 160)			_hx_tmp = true;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 160)			return;
            		}
HXLINE( 162)		this->_hx___dirty = true;
HXLINE( 163)		this->_hx___layoutDirty = true;
HXLINE( 164)		if (!(this->_hx___renderDirty)) {
HXLINE( 164)			this->_hx___renderDirty = true;
HXDLIN( 164)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 166)		this->_hx___updateText(::lime::text::_UTF8String::UTF8String_Impl__obj::plus(this->_hx___text,text));
HXLINE( 168)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 168)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_173_getCharBoundaries)
HXLINE( 175)		bool _hx_tmp;
HXDLIN( 175)		if ((charIndex >= (int)0)) {
HXLINE( 175)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 175)			_hx_tmp = true;
            		}
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 175)			return null();
            		}
HXLINE( 177)		this->_hx___updateLayout();
HXLINE( 179)		{
HXLINE( 179)			int _g = (int)0;
HXDLIN( 179)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 179)			while((_g < _g1->get_length())){
HXLINE( 179)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 179)				_g = (_g + (int)1);
HXLINE( 181)				bool _hx_tmp1;
HXDLIN( 181)				if ((charIndex >= group->startIndex)) {
HXLINE( 181)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 181)					_hx_tmp1 = false;
            				}
HXDLIN( 181)				if (_hx_tmp1) {
HXLINE( 183)					Float x = group->offsetX;
HXLINE( 185)					{
HXLINE( 185)						int _g3 = (int)0;
HXDLIN( 185)						int _g2 = (charIndex - group->startIndex);
HXDLIN( 185)						while((_g3 < _g2)){
HXLINE( 185)							_g3 = (_g3 + (int)1);
HXDLIN( 185)							int i = (_g3 - (int)1);
HXLINE( 187)							x = (x + group->advances->__get(i));
            						}
            					}
HXLINE( 191)					Float group1 = group->offsetY;
HXDLIN( 191)					::Array< Float > group2 = group->advances;
HXDLIN( 191)					Float group3 = group2->__get((charIndex - group->startIndex));
HXDLIN( 191)					return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,group1,group3,(group->ascent + group->descent));
            				}
            			}
            		}
HXLINE( 197)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_202_getCharIndexAtPoint)
HXLINE( 204)		bool _hx_tmp;
HXDLIN( 204)		bool _hx_tmp1;
HXDLIN( 204)		bool _hx_tmp2;
HXDLIN( 204)		if (!((x <= (int)2))) {
HXLINE( 204)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 204)			_hx_tmp2 = true;
            		}
HXDLIN( 204)		if (!(_hx_tmp2)) {
HXLINE( 204)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 204)			_hx_tmp1 = true;
            		}
HXDLIN( 204)		if (!(_hx_tmp1)) {
HXLINE( 204)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 204)			_hx_tmp = true;
            		}
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 204)			return (int)-1;
            		}
HXLINE( 206)		this->_hx___updateLayout();
HXLINE( 208)		x = (x + this->get_scrollH());
HXLINE( 210)		{
HXLINE( 210)			int _g1 = (int)0;
HXDLIN( 210)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 210)			while((_g1 < _g)){
HXLINE( 210)				_g1 = (_g1 + (int)1);
HXDLIN( 210)				int i = (_g1 - (int)1);
HXLINE( 212)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 216)		{
HXLINE( 216)			int _g2 = (int)0;
HXDLIN( 216)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 216)			while((_g2 < _g11->get_length())){
HXLINE( 216)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 216)				_g2 = (_g2 + (int)1);
HXLINE( 218)				bool _hx_tmp3;
HXDLIN( 218)				if ((y >= group->offsetY)) {
HXLINE( 218)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 218)					_hx_tmp3 = false;
            				}
HXDLIN( 218)				if (_hx_tmp3) {
HXLINE( 220)					bool _hx_tmp4;
HXDLIN( 220)					if ((x >= group->offsetX)) {
HXLINE( 220)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 220)						_hx_tmp4 = false;
            					}
HXDLIN( 220)					if (_hx_tmp4) {
HXLINE( 222)						Float advance = ((Float)0.0);
HXLINE( 224)						{
HXLINE( 224)							int _g3 = (int)0;
HXDLIN( 224)							int _g21 = group->advances->length;
HXDLIN( 224)							while((_g3 < _g21)){
HXLINE( 224)								_g3 = (_g3 + (int)1);
HXDLIN( 224)								int i1 = (_g3 - (int)1);
HXLINE( 226)								advance = (advance + group->advances->__get(i1));
HXLINE( 228)								if ((x <= (group->offsetX + advance))) {
HXLINE( 230)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 236)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 244)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_249_getFirstCharInParagraph)
HXLINE( 251)		bool _hx_tmp;
HXDLIN( 251)		if ((charIndex >= (int)0)) {
HXLINE( 251)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 251)			_hx_tmp = true;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 251)			return (int)0;
            		}
HXLINE( 253)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 254)		int startIndex = (int)0;
HXLINE( 256)		while((index > (int)-1)){
HXLINE( 258)			if ((index <= charIndex)) {
HXLINE( 260)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 262)				if ((index > charIndex)) {
HXLINE( 264)					goto _hx_goto_9;
            				}
            			}
HXLINE( 268)			 ::openfl::_internal::text::TextEngine index1 = this->_hx___textEngine;
HXDLIN( 268)			index = index1->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_9:;
HXLINE( 272)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_277_getLineIndexAtPoint)
HXLINE( 279)		this->_hx___updateLayout();
HXLINE( 281)		bool _hx_tmp;
HXDLIN( 281)		bool _hx_tmp1;
HXDLIN( 281)		bool _hx_tmp2;
HXDLIN( 281)		if (!((x <= (int)2))) {
HXLINE( 281)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 281)			_hx_tmp2 = true;
            		}
HXDLIN( 281)		if (!(_hx_tmp2)) {
HXLINE( 281)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 281)			_hx_tmp1 = true;
            		}
HXDLIN( 281)		if (!(_hx_tmp1)) {
HXLINE( 281)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 281)			_hx_tmp = true;
            		}
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 281)			return (int)-1;
            		}
HXLINE( 283)		{
HXLINE( 283)			int _g1 = (int)0;
HXDLIN( 283)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 283)			while((_g1 < _g)){
HXLINE( 283)				_g1 = (_g1 + (int)1);
HXDLIN( 283)				int i = (_g1 - (int)1);
HXLINE( 285)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 289)		{
HXLINE( 289)			int _g2 = (int)0;
HXDLIN( 289)			 ::openfl::_Vector::ObjectVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 289)			while((_g2 < _g11->get_length())){
HXLINE( 289)				 ::openfl::_internal::text::TextLayoutGroup group = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 289)				_g2 = (_g2 + (int)1);
HXLINE( 291)				bool _hx_tmp3;
HXDLIN( 291)				if ((y >= group->offsetY)) {
HXLINE( 291)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 291)					_hx_tmp3 = false;
            				}
HXDLIN( 291)				if (_hx_tmp3) {
HXLINE( 293)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 299)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_304_getLineIndexOfChar)
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		if ((charIndex >= (int)0)) {
HXLINE( 306)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 306)			_hx_tmp = true;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 306)			return (int)-1;
            		}
HXLINE( 308)		this->_hx___updateLayout();
HXLINE( 310)		{
HXLINE( 310)			int _g = (int)0;
HXDLIN( 310)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 310)			while((_g < _g1->get_length())){
HXLINE( 310)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 310)				_g = (_g + (int)1);
HXLINE( 312)				bool _hx_tmp1;
HXDLIN( 312)				if ((group->startIndex <= charIndex)) {
HXLINE( 312)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 312)					_hx_tmp1 = false;
            				}
HXDLIN( 312)				if (_hx_tmp1) {
HXLINE( 314)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 320)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_325_getLineLength)
HXLINE( 327)		this->_hx___updateLayout();
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if ((lineIndex >= (int)0)) {
HXLINE( 329)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 329)			return (int)0;
            		}
HXLINE( 331)		int startIndex = (int)-1;
HXLINE( 332)		int endIndex = (int)-1;
HXLINE( 334)		{
HXLINE( 334)			int _g = (int)0;
HXDLIN( 334)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 334)			while((_g < _g1->get_length())){
HXLINE( 334)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 334)				_g = (_g + (int)1);
HXLINE( 336)				if ((group->lineIndex == lineIndex)) {
HXLINE( 338)					if ((startIndex == (int)-1)) {
HXLINE( 338)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 340)					int group1 = group->lineIndex;
HXDLIN( 340)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 342)						endIndex = group->startIndex;
HXLINE( 343)						goto _hx_goto_16;
            					}
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 349)		if ((endIndex == (int)-1)) {
HXLINE( 349)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 350)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_355_getLineMetrics)
HXLINE( 357)		this->_hx___updateLayout();
HXLINE( 359)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE( 360)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE( 361)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE( 362)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE( 363)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE( 367)		Float margin;
HXDLIN( 367)		 ::Dynamic _g = this->_hx___textFormat->align;
HXDLIN( 367)		 ::Dynamic _hx_switch_0 = _g;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 367)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 367)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 367)			margin = (int)2;
HXDLIN( 367)			goto _hx_goto_18;
            		}
            		_hx_goto_18:;
HXLINE( 375)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_380_getLineOffset)
HXLINE( 382)		this->_hx___updateLayout();
HXLINE( 384)		bool _hx_tmp;
HXDLIN( 384)		if ((lineIndex >= (int)0)) {
HXLINE( 384)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 384)			_hx_tmp = true;
            		}
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 384)			return (int)-1;
            		}
HXLINE( 386)		{
HXLINE( 386)			int _g = (int)0;
HXDLIN( 386)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 386)			while((_g < _g1->get_length())){
HXLINE( 386)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 386)				_g = (_g + (int)1);
HXLINE( 388)				if ((group->lineIndex == lineIndex)) {
HXLINE( 390)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 396)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_401_getLineText)
HXLINE( 403)		this->_hx___updateLayout();
HXLINE( 405)		bool _hx_tmp;
HXDLIN( 405)		if ((lineIndex >= (int)0)) {
HXLINE( 405)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 405)			_hx_tmp = true;
            		}
HXDLIN( 405)		if (_hx_tmp) {
HXLINE( 405)			return null();
            		}
HXLINE( 407)		int startIndex = (int)-1;
HXLINE( 408)		int endIndex = (int)-1;
HXLINE( 410)		{
HXLINE( 410)			int _g = (int)0;
HXDLIN( 410)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 410)			while((_g < _g1->get_length())){
HXLINE( 410)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 410)				_g = (_g + (int)1);
HXLINE( 412)				if ((group->lineIndex == lineIndex)) {
HXLINE( 414)					if ((startIndex == (int)-1)) {
HXLINE( 414)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 416)					int group1 = group->lineIndex;
HXDLIN( 416)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 418)						endIndex = group->startIndex;
HXLINE( 419)						goto _hx_goto_22;
            					}
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 425)		if ((endIndex == (int)-1)) {
HXLINE( 425)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 427)		return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___textEngine->text,startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_432_getParagraphLength)
HXLINE( 434)		bool _hx_tmp;
HXDLIN( 434)		if ((charIndex >= (int)0)) {
HXLINE( 434)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 434)			_hx_tmp = true;
            		}
HXDLIN( 434)		if (_hx_tmp) {
HXLINE( 434)			return (int)0;
            		}
HXLINE( 436)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE( 437)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE( 439)		if ((endIndex == (int)0)) {
HXLINE( 439)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 440)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_445_getTextFormat)
HXLINE( 447)		 ::openfl::text::TextFormat format = null();
HXLINE( 449)		{
HXLINE( 449)			int _g = (int)0;
HXDLIN( 449)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 449)			while((_g < _g1->get_length())){
HXLINE( 449)				 ::openfl::_internal::text::TextFormatRange group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 449)				_g = (_g + (int)1);
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				bool _hx_tmp1;
HXDLIN( 451)				if ((group->start <= beginIndex)) {
HXLINE( 451)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 451)					_hx_tmp1 = false;
            				}
HXDLIN( 451)				if (!(_hx_tmp1)) {
HXLINE( 451)					if ((group->start <= endIndex)) {
HXLINE( 451)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 451)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 451)					_hx_tmp = true;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 453)					if (hx::IsNull( format )) {
HXLINE( 455)						format = group->format->clone();
            					}
            					else {
HXLINE( 459)						if ((group->format->font != format->font)) {
HXLINE( 459)							format->font = null();
            						}
HXLINE( 460)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE( 460)							format->size = null();
            						}
HXLINE( 461)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE( 461)							format->color = null();
            						}
HXLINE( 462)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE( 462)							format->bold = null();
            						}
HXLINE( 463)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE( 463)							format->italic = null();
            						}
HXLINE( 464)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE( 464)							format->underline = null();
            						}
HXLINE( 465)						if ((group->format->url != format->url)) {
HXLINE( 465)							format->url = null();
            						}
HXLINE( 466)						if ((group->format->target != format->target)) {
HXLINE( 466)							format->target = null();
            						}
HXLINE( 467)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE( 467)							format->align = null();
            						}
HXLINE( 468)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE( 468)							format->leftMargin = null();
            						}
HXLINE( 469)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE( 469)							format->rightMargin = null();
            						}
HXLINE( 470)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE( 470)							format->indent = null();
            						}
HXLINE( 471)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE( 471)							format->leading = null();
            						}
HXLINE( 472)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE( 472)							format->blockIndent = null();
            						}
HXLINE( 473)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE( 473)							format->bullet = null();
            						}
HXLINE( 474)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE( 474)							format->kerning = null();
            						}
HXLINE( 475)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE( 475)							format->letterSpacing = null();
            						}
HXLINE( 476)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 476)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 484)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_489_replaceSelectedText)
HXLINE( 491)		bool _hx_tmp;
HXDLIN( 491)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 491)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 491)			_hx_tmp = false;
            		}
HXDLIN( 491)		if (_hx_tmp) {
HXLINE( 491)			return;
            		}
HXLINE( 493)		int startIndex;
HXDLIN( 493)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 493)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 493)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 494)		int endIndex;
HXDLIN( 494)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 494)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 494)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 496)		this->replaceText(startIndex,endIndex,value);
HXLINE( 498)		int i = (startIndex + ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value));
HXLINE( 499)		this->setSelection(i,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_504_replaceText)
HXLINE( 506)		bool _hx_tmp;
HXDLIN( 506)		bool _hx_tmp1;
HXDLIN( 506)		bool _hx_tmp2;
HXDLIN( 506)		if ((endIndex >= beginIndex)) {
HXLINE( 506)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 506)			_hx_tmp2 = true;
            		}
HXDLIN( 506)		if (!(_hx_tmp2)) {
HXLINE( 506)			_hx_tmp1 = (endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 506)			_hx_tmp1 = true;
            		}
HXDLIN( 506)		if (!(_hx_tmp1)) {
HXLINE( 506)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 506)			_hx_tmp = true;
            		}
HXDLIN( 506)		if (_hx_tmp) {
HXLINE( 506)			return;
            		}
HXLINE( 508)		::String _hx_tmp3 = (::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,(int)0,beginIndex) + newText);
HXDLIN( 508)		this->_hx___updateText((_hx_tmp3 + ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,endIndex,null())));
HXLINE( 510)		int newText1 = newText.length;
HXDLIN( 510)		int offset = (newText1 - (endIndex - beginIndex));
HXLINE( 512)		int i = (int)0;
HXLINE( 513)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 515)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE( 517)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 519)			bool _hx_tmp4;
HXDLIN( 519)			if ((range->start <= beginIndex)) {
HXLINE( 519)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 519)				_hx_tmp4 = false;
            			}
HXDLIN( 519)			if (_hx_tmp4) {
HXLINE( 521)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN( 521)				range1->end = (range1->end + offset);
HXLINE( 522)				i = (i + (int)1);
            			}
            			else {
HXLINE( 524)				bool _hx_tmp5;
HXDLIN( 524)				if ((range->start >= beginIndex)) {
HXLINE( 524)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 524)					_hx_tmp5 = false;
            				}
HXDLIN( 524)				if (_hx_tmp5) {
HXLINE( 526)					if ((i > (int)0)) {
HXLINE( 528)						this->_hx___textEngine->textFormatRanges->splice(i,(int)1);
            					}
            					else {
HXLINE( 532)						range->start = (int)0;
HXLINE( 533)						range->end = (beginIndex + newText.length);
HXLINE( 534)						i = (i + (int)1);
            					}
HXLINE( 538)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE( 540)					bool _hx_tmp6;
HXDLIN( 540)					if ((range->start > beginIndex)) {
HXLINE( 540)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 540)						_hx_tmp6 = false;
            					}
HXDLIN( 540)					if (_hx_tmp6) {
HXLINE( 542)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN( 542)						range2->start = (range2->start + offset);
HXLINE( 543)						i = (i + (int)1);
            					}
            					else {
HXLINE( 547)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE( 553)		this->_hx___dirty = true;
HXLINE( 554)		this->_hx___layoutDirty = true;
HXLINE( 555)		if (!(this->_hx___renderDirty)) {
HXLINE( 555)			this->_hx___renderDirty = true;
HXDLIN( 555)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_560_setSelection)
HXLINE( 562)		this->_hx___selectionIndex = beginIndex;
HXLINE( 563)		this->_hx___caretIndex = endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_568_setTextFormat)
HXLINE( 570)		int max = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE( 571)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 573)		if ((beginIndex < (int)0)) {
HXLINE( 573)			beginIndex = (int)0;
            		}
HXLINE( 574)		if ((endIndex < (int)0)) {
HXLINE( 574)			endIndex = (int)0;
            		}
HXLINE( 576)		if ((endIndex == (int)0)) {
HXLINE( 578)			if ((beginIndex == (int)0)) {
HXLINE( 580)				endIndex = max;
            			}
            			else {
HXLINE( 584)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE( 590)		if ((endIndex < beginIndex)) {
HXLINE( 590)			return;
            		}
HXLINE( 592)		bool _hx_tmp;
HXDLIN( 592)		if ((beginIndex == (int)0)) {
HXLINE( 592)			_hx_tmp = (endIndex == max);
            		}
            		else {
HXLINE( 592)			_hx_tmp = false;
            		}
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 594)			this->_hx___textFormat->_hx___merge(format);
HXLINE( 596)			if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE( 598)				{
HXLINE( 598)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 598)					( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            				}
HXLINE( 600)				range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 601)				range->format = this->_hx___textFormat;
HXLINE( 602)				range->start = (int)0;
HXLINE( 603)				range->end = max;
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_723_setTextFormat)
HXLINE( 725)				bool _hx_tmp4;
HXDLIN( 725)				if ((a->start >= b->start)) {
HXLINE( 725)					_hx_tmp4 = (a->end < b->end);
            				}
            				else {
HXLINE( 725)					_hx_tmp4 = true;
            				}
HXDLIN( 725)				if (_hx_tmp4) {
HXLINE( 727)					return (int)-1;
            				}
            				else {
HXLINE( 729)					bool _hx_tmp5;
HXDLIN( 729)					if ((a->start <= b->start)) {
HXLINE( 729)						_hx_tmp5 = (a->end > b->end);
            					}
            					else {
HXLINE( 729)						_hx_tmp5 = true;
            					}
HXDLIN( 729)					if (_hx_tmp5) {
HXLINE( 731)						return (int)1;
            					}
            				}
HXLINE( 735)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 609)			int index = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE( 610)			int searchIndex;
HXLINE( 612)			while((index > (int)0)){
HXLINE( 614)				index = (index - (int)1);
HXLINE( 615)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 617)				bool _hx_tmp1;
HXDLIN( 617)				if ((range->start == beginIndex)) {
HXLINE( 617)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE( 617)					_hx_tmp1 = false;
            				}
HXDLIN( 617)				if (_hx_tmp1) {
HXLINE( 619)					range->format = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 620)					range->format->_hx___merge(format);
HXLINE( 621)					return;
            				}
HXLINE( 625)				bool _hx_tmp2;
HXDLIN( 625)				if ((range->start > beginIndex)) {
HXLINE( 625)					_hx_tmp2 = (range->end < endIndex);
            				}
            				else {
HXLINE( 625)					_hx_tmp2 = false;
            				}
HXDLIN( 625)				if (_hx_tmp2) {
HXLINE( 627)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,(int)0);
HXLINE( 629)					if ((searchIndex > (int)-1)) {
HXLINE( 631)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 639)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN( 639)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE( 641)			{
HXLINE( 641)				int _g1 = (int)0;
HXDLIN( 641)				int _g = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN( 641)				while((_g1 < _g)){
HXLINE( 641)					_g1 = (_g1 + (int)1);
HXDLIN( 641)					int i = (_g1 - (int)1);
HXLINE( 643)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 645)					if ((beginIndex > (int)0)) {
HXLINE( 647)						bool _hx_tmp3;
HXDLIN( 647)						if (hx::IsNull( prevRange )) {
HXLINE( 647)							_hx_tmp3 = (range->end >= beginIndex);
            						}
            						else {
HXLINE( 647)							_hx_tmp3 = false;
            						}
HXDLIN( 647)						if (_hx_tmp3) {
HXLINE( 649)							prevRange = range;
            						}
            					}
HXLINE( 657)					if ((endIndex < max)) {
HXLINE( 659)						if ((range->start <= endIndex)) {
HXLINE( 661)							nextRange = range;
            						}
            					}
            				}
            			}
HXLINE( 671)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE( 673)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN( 673)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE( 674)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE( 678)			if (hx::IsNotNull( prevRange )) {
HXLINE( 680)				prevRange->end = beginIndex;
HXLINE( 682)				if ((prevRange->end <= prevRange->start)) {
HXLINE( 684)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(prevRange,(int)0);
HXLINE( 686)					if ((searchIndex > (int)-1)) {
HXLINE( 688)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
HXLINE( 692)					prevRange = null();
            				}
            			}
HXLINE( 698)			if (hx::IsNotNull( nextRange )) {
HXLINE( 700)				nextRange->start = endIndex;
HXLINE( 702)				if ((nextRange->start >= nextRange->end)) {
HXLINE( 704)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(nextRange,(int)0);
HXLINE( 706)					if ((searchIndex > (int)-1)) {
HXLINE( 708)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
HXLINE( 712)					nextRange = null();
            				}
            			}
HXLINE( 718)			 ::openfl::text::TextFormat textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 719)			textFormat->_hx___merge(format);
HXLINE( 721)			{
HXLINE( 721)				::Dynamic this2 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 721)				( ( ::openfl::_Vector::ObjectVector)(this2) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex));
            			}
HXLINE( 723)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 741)		this->_hx___dirty = true;
HXLINE( 742)		this->_hx___layoutDirty = true;
HXLINE( 743)		if (!(this->_hx___renderDirty)) {
HXLINE( 743)			this->_hx___renderDirty = true;
HXDLIN( 743)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_750___caretBeginningOfLine)
HXLINE( 750)		bool _hx_tmp;
HXDLIN( 750)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE( 750)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXLINE( 750)			_hx_tmp = true;
            		}
HXDLIN( 750)		if (_hx_tmp) {
HXLINE( 752)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE( 756)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_763___caretEndOfLine)
HXLINE( 765)		int lineIndex;
HXLINE( 767)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE( 769)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE( 773)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE( 777)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE( 779)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE( 783)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_792___caretNextCharacter)
HXLINE( 792)		int _hx_tmp = this->_hx___caretIndex;
HXDLIN( 792)		if ((_hx_tmp < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 794)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_801___caretNextLine)
HXLINE( 803)		if (hx::IsNull( lineIndex )) {
HXLINE( 805)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 809)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE( 811)			if (hx::IsNull( caretIndex )) {
HXLINE( 813)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 817)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE( 821)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_830___caretPreviousCharacter)
HXLINE( 830)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE( 832)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_839___caretPreviousLine)
HXLINE( 841)		if (hx::IsNull( lineIndex )) {
HXLINE( 843)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 847)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE( 849)			if (hx::IsNull( caretIndex )) {
HXLINE( 851)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 855)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE( 859)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_867___disableInput)
HXLINE( 867)		bool _hx_tmp;
HXDLIN( 867)		if (this->_hx___inputEnabled) {
HXLINE( 867)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE( 867)			_hx_tmp = false;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 869)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE( 870)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE( 871)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE( 873)			this->_hx___inputEnabled = false;
HXLINE( 874)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_880___dispatch)
HXLINE( 882)		bool _hx_tmp;
HXDLIN( 882)		if ((event->eventPhase == (int)2)) {
HXLINE( 882)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 882)			_hx_tmp = false;
            		}
HXDLIN( 882)		if (_hx_tmp) {
HXLINE( 884)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 885)			Float group = this->get_mouseX();
HXDLIN( 885)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE( 887)			if (hx::IsNotNull( group1 )) {
HXLINE( 889)				::String url = group1->format->url;
HXLINE( 891)				if ((url != HX_("",00,00,00,00))) {
HXLINE( 893)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE( 895)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr((int)6,null())));
            					}
            					else {
HXLINE( 899)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE( 909)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_915___enableInput)
HXLINE( 915)		if (hx::IsNotNull( this->stage )) {
HXLINE( 917)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 919)			if (!(this->_hx___inputEnabled)) {
HXLINE( 921)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 923)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE( 925)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE( 926)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE( 930)				this->_hx___inputEnabled = true;
HXLINE( 931)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_939___fromSymbol)
HXLINE( 941)		this->_hx___symbol = symbol;
HXLINE( 943)		this->set_width(symbol->width);
HXLINE( 944)		this->set_height(symbol->height);
HXLINE( 946)		this->_hx___offsetX = symbol->x;
HXLINE( 947)		this->_hx___offsetY = symbol->y;
HXLINE( 949)		this->set_multiline(symbol->multiline);
HXLINE( 950)		this->set_wordWrap(symbol->wordWrap);
HXLINE( 951)		this->set_displayAsPassword(symbol->password);
HXLINE( 953)		if (symbol->border) {
HXLINE( 955)			this->set_border(true);
HXLINE( 956)			this->set_background(true);
            		}
HXLINE( 960)		this->set_selectable(symbol->selectable);
HXLINE( 962)		if (symbol->input) {
HXLINE( 964)			this->set_type((int)1);
            		}
HXLINE( 968)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 969)		if (hx::IsNotNull( symbol->color )) {
HXLINE( 969)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE( 970)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE( 972)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE( 974)		if (hx::IsNotNull( font )) {
HXLINE( 984)			format->_hx___ascent = ((Float)((Float)font->ascent / (Float)(int)20) / (Float)(int)1024);
HXLINE( 985)			format->_hx___descent = ((Float)((Float)font->descent / (Float)(int)20) / (Float)(int)1024);
            		}
HXLINE( 989)		format->font = symbol->fontName;
HXLINE( 991)		bool found = false;
HXLINE( 993)		{
HXLINE( 993)			::String _g = format->font;
HXDLIN( 993)			if (hx::IsNull( _g )) {
HXLINE( 997)				found = true;
            			}
            			else {
HXLINE( 993)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 997)					found = true;
HXDLIN( 997)					goto _hx_goto_45;
            				}
            				/* default */{
HXLINE(1001)					int _g1 = (int)0;
HXDLIN(1001)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1001)					while((_g1 < _g11->length)){
HXLINE(1001)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN(1001)						_g1 = (_g1 + (int)1);
HXLINE(1003)						if ((font1->name == format->font)) {
HXLINE(1005)							found = true;
HXLINE(1006)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
            				_hx_goto_45:;
            			}
            		}
HXLINE(1014)		if (!(found)) {
HXLINE(1016)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("",00,00,00,00));
HXLINE(1018)			{
HXLINE(1018)				int _g12 = (int)0;
HXDLIN(1018)				::Array< ::Dynamic> _g2 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1018)				while((_g12 < _g2->length)){
HXLINE(1018)					 ::openfl::text::Font font2 = _g2->__get(_g12).StaticCast<  ::openfl::text::Font >();
HXDLIN(1018)					_g12 = (_g12 + (int)1);
HXLINE(1020)					::String _hx_tmp = alpha->replace(font2->name,HX_("",00,00,00,00)).substr((int)0,symbol->fontName.length);
HXDLIN(1020)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1022)						format->font = font2->name;
HXLINE(1023)						found = true;
HXLINE(1024)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            		}
HXLINE(1032)		if (found) {
HXLINE(1034)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1036)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1038)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1039)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),1039,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1043)		if (hx::IsNotNull( symbol->align )) {
HXLINE(1045)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1045)				format->align = (int)0;
            			}
            			else {
HXLINE(1046)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1046)					format->align = (int)4;
            				}
            				else {
HXLINE(1047)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1047)						format->align = (int)2;
            					}
            				}
            			}
HXLINE(1049)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE(1050)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE(1051)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE(1052)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
            		}
HXLINE(1056)		this->set_defaultTextFormat(format);
HXLINE(1058)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1060)			if (symbol->html) {
HXLINE(1062)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1066)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1077___getBounds)
HXLINE(1079)		this->_hx___updateLayout();
HXLINE(1081)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1082)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1083)		 ::openfl::geom::Rectangle bounds1 = bounds;
HXDLIN(1083)		bounds1->x = (bounds1->x + this->_hx___offsetX);
HXLINE(1084)		 ::openfl::geom::Rectangle bounds2 = bounds;
HXDLIN(1084)		bounds2->y = (bounds2->y + this->_hx___offsetY);
HXLINE(1085)		bounds->_hx___transform(bounds,matrix);
HXLINE(1087)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1089)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1094___getCharIndexOnDifferentLine)
HXLINE(1096)		bool _hx_tmp;
HXDLIN(1096)		if ((charIndex >= (int)0)) {
HXLINE(1096)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(1096)			_hx_tmp = true;
            		}
HXDLIN(1096)		if (_hx_tmp) {
HXLINE(1096)			return (int)-1;
            		}
HXLINE(1097)		bool _hx_tmp1;
HXDLIN(1097)		if ((lineIndex >= (int)0)) {
HXLINE(1097)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1097)			_hx_tmp1 = true;
            		}
HXDLIN(1097)		if (_hx_tmp1) {
HXLINE(1097)			return (int)-1;
            		}
HXLINE(1099)		 ::Dynamic x = null();
HXDLIN(1099)		 ::Dynamic y = null();
HXLINE(1101)		{
HXLINE(1101)			int _g = (int)0;
HXDLIN(1101)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1101)			while((_g < _g1->get_length())){
HXLINE(1101)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1101)				_g = (_g + (int)1);
HXLINE(1103)				bool _hx_tmp2;
HXDLIN(1103)				if ((charIndex >= group->startIndex)) {
HXLINE(1103)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1103)					_hx_tmp2 = false;
            				}
HXDLIN(1103)				if (_hx_tmp2) {
HXLINE(1105)					x = group->offsetX;
HXLINE(1107)					{
HXLINE(1107)						int _g3 = (int)0;
HXDLIN(1107)						int _g2 = (charIndex - group->startIndex);
HXDLIN(1107)						while((_g3 < _g2)){
HXLINE(1107)							_g3 = (_g3 + (int)1);
HXDLIN(1107)							int i = (_g3 - (int)1);
HXLINE(1109)							x = (x + group->advances->__get(i));
            						}
            					}
HXLINE(1113)					if (hx::IsNotNull( y )) {
HXLINE(1113)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1117)				if ((group->lineIndex == lineIndex)) {
HXLINE(1119)					Float group1 = group->offsetY;
HXDLIN(1119)					y = (group1 + ((Float)group->height / (Float)(int)2));
HXLINE(1121)					if (hx::IsNotNull( x )) {
HXLINE(1121)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1127)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1132___getCursor)
HXLINE(1134)		Float group = this->get_mouseX();
HXDLIN(1134)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1136)		bool _hx_tmp;
HXDLIN(1136)		if (hx::IsNotNull( group1 )) {
HXLINE(1136)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1136)			_hx_tmp = false;
            		}
HXDLIN(1136)		if (_hx_tmp) {
HXLINE(1138)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(1140)			if (this->_hx___textEngine->selectable) {
HXLINE(1142)				return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            			}
            		}
HXLINE(1146)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1151___getGroup)
HXLINE(1153)		this->_hx___updateLayout();
HXLINE(1155)		x = (x + this->get_scrollH());
HXLINE(1157)		{
HXLINE(1157)			int _g1 = (int)0;
HXDLIN(1157)			int _g = (this->get_scrollV() - (int)1);
HXDLIN(1157)			while((_g1 < _g)){
HXLINE(1157)				_g1 = (_g1 + (int)1);
HXDLIN(1157)				int i = (_g1 - (int)1);
HXLINE(1159)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1163)		bool _hx_tmp;
HXDLIN(1163)		if (!(precise)) {
HXLINE(1163)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1163)			_hx_tmp = false;
            		}
HXDLIN(1163)		if (_hx_tmp) {
HXLINE(1163)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1165)		bool firstGroup = true;
HXLINE(1166)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1166)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1168)		{
HXLINE(1168)			int _g11 = (int)0;
HXDLIN(1168)			int _g2 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1168)			while((_g11 < _g2)){
HXLINE(1168)				_g11 = (_g11 + (int)1);
HXDLIN(1168)				int i1 = (_g11 - (int)1);
HXLINE(1170)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1172)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - (int)1))) {
HXLINE(1174)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1178)					nextGroup = null();
            				}
HXLINE(1182)				if (firstGroup) {
HXLINE(1184)					if ((y < group->offsetY)) {
HXLINE(1184)						y = group->offsetY;
            					}
HXLINE(1185)					if ((x < group->offsetX)) {
HXLINE(1185)						x = group->offsetX;
            					}
HXLINE(1186)					firstGroup = false;
            				}
HXLINE(1190)				bool _hx_tmp1;
HXDLIN(1190)				bool _hx_tmp2;
HXDLIN(1190)				if ((y >= group->offsetY)) {
HXLINE(1190)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1190)					_hx_tmp2 = false;
            				}
HXDLIN(1190)				if (!(_hx_tmp2)) {
HXLINE(1190)					if (!(precise)) {
HXLINE(1190)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1190)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1190)					_hx_tmp1 = true;
            				}
HXDLIN(1190)				if (_hx_tmp1) {
HXLINE(1192)					bool _hx_tmp3;
HXDLIN(1192)					bool _hx_tmp4;
HXDLIN(1192)					if ((x >= group->offsetX)) {
HXLINE(1192)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1192)						_hx_tmp4 = false;
            					}
HXDLIN(1192)					if (!(_hx_tmp4)) {
HXLINE(1192)						if (!(precise)) {
HXLINE(1192)							if (hx::IsNotNull( nextGroup )) {
HXLINE(1192)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1192)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1192)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1192)						_hx_tmp3 = true;
            					}
HXDLIN(1192)					if (_hx_tmp3) {
HXLINE(1194)						return group;
            					}
            				}
            			}
            		}
HXLINE(1202)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1207___getPosition)
HXLINE(1209)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1211)		if (hx::IsNull( group )) {
HXLINE(1213)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1217)		Float advance = ((Float)0.0);
HXLINE(1219)		{
HXLINE(1219)			int _g1 = (int)0;
HXDLIN(1219)			int _g = group->advances->length;
HXDLIN(1219)			while((_g1 < _g)){
HXLINE(1219)				_g1 = (_g1 + (int)1);
HXDLIN(1219)				int i = (_g1 - (int)1);
HXLINE(1221)				advance = (advance + group->advances->__get(i));
HXLINE(1223)				if ((x <= (group->offsetX + advance))) {
HXLINE(1225)					Float group1 = group->offsetX;
HXDLIN(1225)					Float _hx_tmp = (group1 + (advance - group->advances->__get(i)));
HXDLIN(1225)					if ((x <= (_hx_tmp + ((Float)group->advances->__get(i) / (Float)(int)2)))) {
HXLINE(1227)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1231)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1231)							return ((group->startIndex + i) + (int)1);
            						}
            						else {
HXLINE(1231)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1239)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1243___hitTest)
HXLINE(1245)		bool _hx_tmp;
HXDLIN(1245)		bool _hx_tmp1;
HXDLIN(1245)		if (!(!(hitObject->get_visible()))) {
HXLINE(1245)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1245)			_hx_tmp1 = true;
            		}
HXDLIN(1245)		if (!(_hx_tmp1)) {
HXLINE(1245)			if (interactiveOnly) {
HXLINE(1245)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1245)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1245)			_hx_tmp = true;
            		}
HXDLIN(1245)		if (_hx_tmp) {
HXLINE(1245)			return false;
            		}
HXLINE(1246)		bool _hx_tmp2;
HXDLIN(1246)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1246)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1246)			_hx_tmp2 = false;
            		}
HXDLIN(1246)		if (_hx_tmp2) {
HXLINE(1246)			return false;
            		}
HXLINE(1248)		this->_hx___getRenderTransform();
HXLINE(1249)		this->_hx___updateLayout();
HXLINE(1251)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1251)		Float norm = (_this->a * _this->d);
HXDLIN(1251)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1251)		Float px;
HXDLIN(1251)		if ((norm1 == (int)0)) {
HXLINE(1251)			px = -(_this->tx);
            		}
            		else {
HXLINE(1251)			Float _this1 = _this->c;
HXDLIN(1251)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1251)			Float _this2 = _this->d;
HXDLIN(1251)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1252)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1252)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1252)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1252)		Float py;
HXDLIN(1252)		if ((norm3 == (int)0)) {
HXLINE(1252)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1252)			Float _this4 = _this3->a;
HXDLIN(1252)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1252)			Float _this5 = _this3->b;
HXDLIN(1252)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1254)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1256)			if (hx::IsNotNull( stack )) {
HXLINE(1258)				stack->push(hitObject);
            			}
HXLINE(1262)			return true;
            		}
HXLINE(1266)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1271___hitTestMask)
HXLINE(1273)		this->_hx___getRenderTransform();
HXLINE(1274)		this->_hx___updateLayout();
HXLINE(1276)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1276)		Float norm = (_this->a * _this->d);
HXDLIN(1276)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1276)		Float px;
HXDLIN(1276)		if ((norm1 == (int)0)) {
HXLINE(1276)			px = -(_this->tx);
            		}
            		else {
HXLINE(1276)			Float _this1 = _this->c;
HXDLIN(1276)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1276)			Float _this2 = _this->d;
HXDLIN(1276)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1277)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1277)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1277)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1277)		Float py;
HXDLIN(1277)		if ((norm3 == (int)0)) {
HXLINE(1277)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1277)			Float _this4 = _this3->a;
HXDLIN(1277)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1277)			Float _this5 = _this3->b;
HXDLIN(1277)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1279)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1281)			return true;
            		}
HXLINE(1285)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1290___renderCairo)
HXLINE(1293)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1294)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1300___renderCanvas)
HXLINE(1326)		 ::openfl::geom::Matrix transform = this->_hx___worldTransform;
HXLINE(1328)		bool _hx_tmp;
HXDLIN(1328)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE(1328)			_hx_tmp = hx::IsEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE(1328)			_hx_tmp = false;
            		}
HXDLIN(1328)		if (_hx_tmp) {
HXLINE(1330)			bool smoothingEnabled = renderSession->context->imageSmoothingEnabled;
HXLINE(1332)			if (smoothingEnabled) {
HXLINE(1334)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),false,hx::paccDynamic);
HXLINE(1336)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),false,hx::paccDynamic);
HXLINE(1337)				renderSession->context->imageSmoothingEnabled = false;
            			}
HXLINE(1341)			this->super::_hx___renderCanvas(renderSession);
HXLINE(1343)			if (smoothingEnabled) {
HXLINE(1345)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),true,hx::paccDynamic);
HXLINE(1347)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),true,hx::paccDynamic);
HXLINE(1348)				renderSession->context->imageSmoothingEnabled = true;
            			}
            		}
            		else {
HXLINE(1354)			this->super::_hx___renderCanvas(renderSession);
            		}
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1361___renderDOM)
            	}


void TextField_obj::_hx___renderDOMClear( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1397___renderDOMClear)
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1406___renderGL)
HXLINE(1411)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1414)		this->super::_hx___renderGL(renderSession);
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1419___startCursorTimer)
HXLINE(1421)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(1422)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(1423)		this->_hx___dirty = true;
HXLINE(1424)		if (!(this->_hx___renderDirty)) {
HXLINE(1424)			this->_hx___renderDirty = true;
HXDLIN(1424)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1429___startTextInput)
HXLINE(1431)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(1433)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(1434)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(1437)		bool enableInput = true;
HXLINE(1439)		if (enableInput) {
HXLINE(1441)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1448___stopCursorTimer)
HXLINE(1450)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(1452)			this->_hx___cursorTimer->stop();
HXLINE(1453)			this->_hx___cursorTimer = null();
            		}
HXLINE(1457)		if (this->_hx___showCursor) {
HXLINE(1459)			this->_hx___showCursor = false;
HXLINE(1460)			this->_hx___dirty = true;
HXLINE(1461)			if (!(this->_hx___renderDirty)) {
HXLINE(1461)				this->_hx___renderDirty = true;
HXDLIN(1461)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1468___stopTextInput)
HXLINE(1470)		bool disableInput = true;
HXLINE(1472)		if (disableInput) {
HXLINE(1474)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1483___updateLayout)
HXLINE(1483)		if (this->_hx___layoutDirty) {
HXLINE(1485)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(1486)			Float cacheHeight = this->_hx___textEngine->height;
HXLINE(1488)			this->_hx___textEngine->update();
HXLINE(1490)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(1492)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(1494)					 ::Dynamic _g = this->_hx___textEngine->autoSize;
HXDLIN(1494)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1502)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1502)						Float _hx_tmp = _g1->get_x();
HXDLIN(1502)						_g1->set_x((_hx_tmp + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(1502)						goto _hx_goto_69;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1498)						 ::openfl::text::TextField _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1498)						Float _hx_tmp1 = _g2->get_x();
HXDLIN(1498)						_g2->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(1498)						goto _hx_goto_69;
            					}
            					/* default */{
            					}
            					_hx_goto_69:;
            				}
HXLINE(1512)				this->_hx___textEngine->getBounds();
            			}
HXLINE(1516)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1523___updateText)
HXLINE(1531)		this->_hx___text = value;
HXLINE(1533)		int _hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(1533)		if ((_hx_tmp < this->_hx___caretIndex)) {
HXLINE(1535)			this->_hx___selectionIndex = (this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
HXLINE(1539)		if (!(this->_hx___displayAsPassword)) {
HXLINE(1541)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(1545)			int length = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE(1546)			::String mask = HX_("",00,00,00,00);
HXLINE(1548)			{
HXLINE(1548)				int _g1 = (int)0;
HXDLIN(1548)				int _g = length;
HXDLIN(1548)				while((_g1 < _g)){
HXLINE(1548)					_g1 = (_g1 + (int)1);
HXDLIN(1548)					int i = (_g1 - (int)1);
HXLINE(1550)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(1554)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1561___updateTransforms)
HXLINE(1563)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(1564)		{
HXLINE(1564)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1564)			Float px = this->_hx___offsetX;
HXDLIN(1564)			Float py = this->_hx___offsetY;
HXDLIN(1564)			Float _hx_tmp = (px * _this->a);
HXDLIN(1564)			_this->tx = ((_hx_tmp + (py * _this->c)) + _this->tx);
HXDLIN(1564)			Float _hx_tmp1 = (px * _this->b);
HXDLIN(1564)			_this->ty = ((_hx_tmp1 + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1578_get_antiAliasType)
HXLINE(1578)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1583_set_antiAliasType)
HXLINE(1585)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(1591)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1598_get_autoSize)
HXLINE(1598)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1603_set_autoSize)
HXLINE(1605)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(1607)			this->_hx___dirty = true;
HXLINE(1608)			this->_hx___layoutDirty = true;
HXLINE(1609)			if (!(this->_hx___renderDirty)) {
HXLINE(1609)				this->_hx___renderDirty = true;
HXDLIN(1609)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1613)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1620_get_background)
HXLINE(1620)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1625_set_background)
HXLINE(1627)		if ((value != this->_hx___textEngine->background)) {
HXLINE(1629)			this->_hx___dirty = true;
HXLINE(1630)			if (!(this->_hx___renderDirty)) {
HXLINE(1630)				this->_hx___renderDirty = true;
HXDLIN(1630)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1634)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1641_get_backgroundColor)
HXLINE(1641)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1646_set_backgroundColor)
HXLINE(1648)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(1650)			this->_hx___dirty = true;
HXLINE(1651)			if (!(this->_hx___renderDirty)) {
HXLINE(1651)				this->_hx___renderDirty = true;
HXDLIN(1651)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1655)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1662_get_border)
HXLINE(1662)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1667_set_border)
HXLINE(1669)		if ((value != this->_hx___textEngine->border)) {
HXLINE(1671)			this->_hx___dirty = true;
HXLINE(1672)			if (!(this->_hx___renderDirty)) {
HXLINE(1672)				this->_hx___renderDirty = true;
HXDLIN(1672)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1676)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1683_get_borderColor)
HXLINE(1683)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1688_set_borderColor)
HXLINE(1690)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(1692)			this->_hx___dirty = true;
HXLINE(1693)			if (!(this->_hx___renderDirty)) {
HXLINE(1693)				this->_hx___renderDirty = true;
HXDLIN(1693)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1697)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1702_get_bottomScrollV)
HXLINE(1704)		this->_hx___updateLayout();
HXLINE(1706)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

bool TextField_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1711_get_cacheAsBitmap)
HXLINE(1714)		bool _hx_tmp;
HXDLIN(1714)		bool _hx_tmp1;
HXDLIN(1714)		if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(1714)			_hx_tmp1 = (this->_hx___filters->length == (int)1);
            		}
            		else {
HXLINE(1714)			_hx_tmp1 = false;
            		}
HXDLIN(1714)		if (_hx_tmp1) {
HXLINE(1714)			_hx_tmp = ::Std_obj::is(this->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >(),hx::ClassOf< ::openfl::filters::GlowFilter >());
            		}
            		else {
HXLINE(1714)			_hx_tmp = false;
            		}
HXDLIN(1714)		if (_hx_tmp) {
HXLINE(1714)			return false;
            		}
HXLINE(1715)		return this->super::get_cacheAsBitmap();
            	}


int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1722_get_caretIndex)
HXLINE(1722)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1729_get_defaultTextFormat)
HXLINE(1729)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1734_set_defaultTextFormat)
HXLINE(1736)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1738)		this->_hx___layoutDirty = true;
HXLINE(1739)		this->_hx___dirty = true;
HXLINE(1740)		if (!(this->_hx___renderDirty)) {
HXLINE(1740)			this->_hx___renderDirty = true;
HXDLIN(1740)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1742)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1749_get_displayAsPassword)
HXLINE(1749)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1754_set_displayAsPassword)
HXLINE(1756)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(1758)			this->_hx___dirty = true;
HXLINE(1759)			this->_hx___layoutDirty = true;
HXLINE(1760)			if (!(this->_hx___renderDirty)) {
HXLINE(1760)				this->_hx___renderDirty = true;
HXDLIN(1760)				this->_hx___setParentRenderDirty();
            			}
HXLINE(1762)			this->_hx___displayAsPassword = value;
HXLINE(1763)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(1767)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1774_get_embedFonts)
HXLINE(1774)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1788_set_embedFonts)
HXLINE(1788)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1795_get_gridFitType)
HXLINE(1795)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1809_set_gridFitType)
HXLINE(1809)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1814_get_height)
HXLINE(1816)		this->_hx___updateLayout();
HXLINE(1817)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1817)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1822_set_height)
HXLINE(1824)		if ((value != this->_hx___textEngine->height)) {
HXLINE(1826)			this->_hx___setTransformDirty();
HXLINE(1827)			this->_hx___dirty = true;
HXLINE(1828)			this->_hx___layoutDirty = true;
HXLINE(1829)			if (!(this->_hx___renderDirty)) {
HXLINE(1829)				this->_hx___renderDirty = true;
HXDLIN(1829)				this->_hx___setParentRenderDirty();
            			}
HXLINE(1831)			this->_hx___textEngine->height = value;
            		}
HXLINE(1835)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1835)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1842_get_htmlText)
HXLINE(1842)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1847_set_htmlText)
HXLINE(1849)		bool _hx_tmp;
HXDLIN(1849)		if (!(!(this->_hx___isHTML))) {
HXLINE(1849)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1849)			_hx_tmp = true;
            		}
HXDLIN(1849)		if (_hx_tmp) {
HXLINE(1851)			this->_hx___dirty = true;
HXLINE(1852)			this->_hx___layoutDirty = true;
HXLINE(1853)			if (!(this->_hx___renderDirty)) {
HXLINE(1853)				this->_hx___renderDirty = true;
HXDLIN(1853)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1857)		this->_hx___isHTML = true;
HXLINE(1863)		value = ::openfl::_internal::text::HtmlParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(1889)		this->_hx___updateText(value);
HXLINE(1892)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1897_get_length)
HXLINE(1899)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(1901)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1905)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1912_get_maxChars)
HXLINE(1912)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1917_set_maxChars)
HXLINE(1919)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(1921)			this->_hx___dirty = true;
HXLINE(1922)			this->_hx___layoutDirty = true;
HXLINE(1923)			if (!(this->_hx___renderDirty)) {
HXLINE(1923)				this->_hx___renderDirty = true;
HXDLIN(1923)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1927)		return (this->_hx___textEngine->maxChars = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1932_get_maxScrollH)
HXLINE(1934)		this->_hx___updateLayout();
HXLINE(1936)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1941_get_maxScrollV)
HXLINE(1943)		this->_hx___updateLayout();
HXLINE(1945)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1952_get_mouseWheelEnabled)
HXLINE(1952)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1959_set_mouseWheelEnabled)
HXLINE(1959)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1966_get_multiline)
HXLINE(1966)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1971_set_multiline)
HXLINE(1973)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(1975)			this->_hx___dirty = true;
HXLINE(1976)			this->_hx___layoutDirty = true;
HXLINE(1977)			if (!(this->_hx___renderDirty)) {
HXLINE(1977)				this->_hx___renderDirty = true;
HXDLIN(1977)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1981)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1986_get_numLines)
HXLINE(1988)		this->_hx___updateLayout();
HXLINE(1990)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1997_get_restrict)
HXLINE(1997)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2004_set_restrict)
HXLINE(2004)		return this->_hx___textEngine->set_restrict(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2011_get_scrollH)
HXLINE(2011)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2016_set_scrollH)
HXLINE(2018)		this->_hx___updateLayout();
HXLINE(2020)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2020)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2021)		if ((value < (int)0)) {
HXLINE(2021)			value = (int)0;
            		}
HXLINE(2023)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2025)			this->_hx___dirty = true;
HXLINE(2026)			if (!(this->_hx___renderDirty)) {
HXLINE(2026)				this->_hx___renderDirty = true;
HXDLIN(2026)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2027)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2031)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2038_get_scrollV)
HXLINE(2038)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2043_set_scrollV)
HXLINE(2045)		this->_hx___updateLayout();
HXLINE(2047)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2047)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2048)		if ((value < (int)1)) {
HXLINE(2048)			value = (int)1;
            		}
HXLINE(2050)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(2052)			this->_hx___dirty = true;
HXLINE(2053)			if (!(this->_hx___renderDirty)) {
HXLINE(2053)				this->_hx___renderDirty = true;
HXDLIN(2053)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2054)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2058)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2065_get_selectable)
HXLINE(2065)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2070_set_selectable)
HXLINE(2072)		bool _hx_tmp;
HXDLIN(2072)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2072)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2072)			_hx_tmp = false;
            		}
HXDLIN(2072)		if (_hx_tmp) {
HXLINE(2074)			bool _hx_tmp1;
HXDLIN(2074)			if (hx::IsNotNull( this->stage )) {
HXLINE(2074)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2074)				_hx_tmp1 = false;
            			}
HXDLIN(2074)			if (_hx_tmp1) {
HXLINE(2076)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2078)				if (!(value)) {
HXLINE(2080)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2086)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2093_get_selectionBeginIndex)
HXLINE(2093)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2100_get_selectionEndIndex)
HXLINE(2100)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2107_get_sharpness)
HXLINE(2107)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2112_set_sharpness)
HXLINE(2114)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2116)			this->_hx___dirty = true;
HXLINE(2117)			if (!(this->_hx___renderDirty)) {
HXLINE(2117)				this->_hx___renderDirty = true;
HXDLIN(2117)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2121)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2128_get_text)
HXLINE(2128)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2133_set_text)
HXLINE(2135)		bool _hx_tmp;
HXDLIN(2135)		if (!(this->_hx___isHTML)) {
HXLINE(2135)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2135)			_hx_tmp = true;
            		}
HXDLIN(2135)		if (_hx_tmp) {
HXLINE(2137)			this->_hx___dirty = true;
HXLINE(2138)			this->_hx___layoutDirty = true;
HXLINE(2139)			if (!(this->_hx___renderDirty)) {
HXLINE(2139)				this->_hx___renderDirty = true;
HXDLIN(2139)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2143)			return value;
            		}
HXLINE(2147)		if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(2149)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2149)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            		}
HXLINE(2153)		::String utfValue = value;
HXLINE(2154)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2155)		range->format = this->_hx___textFormat;
HXLINE(2156)		range->start = (int)0;
HXLINE(2157)		range->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(utfValue);
HXLINE(2159)		this->_hx___isHTML = false;
HXLINE(2161)		this->_hx___updateText(value);
HXLINE(2163)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2170_get_textColor)
HXLINE(2170)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2175_set_textColor)
HXLINE(2177)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2179)			this->_hx___dirty = true;
HXLINE(2180)			if (!(this->_hx___renderDirty)) {
HXLINE(2180)				this->_hx___renderDirty = true;
HXDLIN(2180)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2184)		{
HXLINE(2184)			int _g = (int)0;
HXDLIN(2184)			 ::openfl::_Vector::ObjectVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2184)			while((_g < _g1->get_length())){
HXLINE(2184)				 ::openfl::_internal::text::TextFormatRange range = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(2184)				_g = (_g + (int)1);
HXLINE(2186)				range->format->color = value;
            			}
            		}
HXLINE(2190)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2194_get_textWidth)
HXLINE(2196)		this->_hx___updateLayout();
HXLINE(2197)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2202_get_textHeight)
HXLINE(2204)		this->_hx___updateLayout();
HXLINE(2205)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2212_get_type)
HXLINE(2212)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2217_set_type)
HXLINE(2219)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(2221)			if (hx::IsEq( value,(int)1 )) {
HXLINE(2223)				this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE(2224)				this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE(2225)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(2227)				this->this_onFocusIn(null());
HXLINE(2228)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(2232)				this->removeEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null());
HXLINE(2233)				this->removeEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null());
HXLINE(2234)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(2236)				this->_hx___stopTextInput();
HXLINE(2237)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(2241)			this->_hx___dirty = true;
HXLINE(2242)			if (!(this->_hx___renderDirty)) {
HXLINE(2242)				this->_hx___renderDirty = true;
HXDLIN(2242)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2246)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2251_get_width)
HXLINE(2253)		this->_hx___updateLayout();
HXLINE(2254)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2254)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2259_set_width)
HXLINE(2261)		if ((value != this->_hx___textEngine->width)) {
HXLINE(2263)			this->_hx___setTransformDirty();
HXLINE(2264)			this->_hx___dirty = true;
HXLINE(2265)			this->_hx___layoutDirty = true;
HXLINE(2266)			if (!(this->_hx___renderDirty)) {
HXLINE(2266)				this->_hx___renderDirty = true;
HXDLIN(2266)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2268)			this->_hx___textEngine->width = value;
            		}
HXLINE(2272)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2272)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2279_get_wordWrap)
HXLINE(2279)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2284_set_wordWrap)
HXLINE(2286)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(2288)			this->_hx___dirty = true;
HXLINE(2289)			this->_hx___layoutDirty = true;
HXLINE(2290)			if (!(this->_hx___renderDirty)) {
HXLINE(2290)				this->_hx___renderDirty = true;
HXDLIN(2290)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2294)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2306_stage_onMouseMove)
HXLINE(2308)		if (hx::IsNull( this->stage )) {
HXLINE(2308)			return;
            		}
HXLINE(2310)		bool _hx_tmp;
HXDLIN(2310)		if (this->_hx___textEngine->selectable) {
HXLINE(2310)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(2310)			_hx_tmp = false;
            		}
HXDLIN(2310)		if (_hx_tmp) {
HXLINE(2312)			this->_hx___updateLayout();
HXLINE(2314)			Float position = this->get_mouseX();
HXDLIN(2314)			int position1 = this->_hx___getPosition(position,this->get_mouseY());
HXLINE(2316)			if ((position1 != this->_hx___caretIndex)) {
HXLINE(2318)				this->_hx___caretIndex = position1;
HXLINE(2320)				this->_hx___dirty = true;
HXLINE(2321)				if (!(this->_hx___renderDirty)) {
HXLINE(2321)					this->_hx___renderDirty = true;
HXDLIN(2321)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2335_stage_onMouseUp)
HXLINE(2337)		if (hx::IsNull( this->stage )) {
HXLINE(2337)			return;
            		}
HXLINE(2339)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(2340)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(2342)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2344)			this->_hx___getWorldTransform();
HXLINE(2345)			this->_hx___updateLayout();
HXLINE(2347)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(2347)			Float px = this->get_x();
HXDLIN(2347)			Float py = this->get_y();
HXDLIN(2347)			Float norm = (_this->a * _this->d);
HXDLIN(2347)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2347)			Float px1;
HXDLIN(2347)			if ((norm1 == (int)0)) {
HXLINE(2347)				px1 = -(_this->tx);
            			}
            			else {
HXLINE(2347)				Float _this1 = _this->c;
HXDLIN(2347)				Float px2 = (_this1 * (_this->ty - py));
HXDLIN(2347)				Float _this2 = _this->d;
HXDLIN(2347)				px1 = (((Float)((Float)1.0) / (Float)norm1) * (px2 + (_this2 * (px - _this->tx))));
            			}
HXLINE(2348)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(2348)			Float px3 = this->get_x();
HXDLIN(2348)			Float py1 = this->get_y();
HXDLIN(2348)			Float norm2 = (_this3->a * _this3->d);
HXDLIN(2348)			Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(2348)			Float py2;
HXDLIN(2348)			if ((norm3 == (int)0)) {
HXLINE(2348)				py2 = -(_this3->ty);
            			}
            			else {
HXLINE(2348)				Float _this4 = _this3->a;
HXDLIN(2348)				Float py3 = (_this4 * (py1 - _this3->ty));
HXDLIN(2348)				Float _this5 = _this3->b;
HXDLIN(2348)				py2 = (((Float)((Float)1.0) / (Float)norm3) * (py3 + (_this5 * (_this3->tx - px3))));
            			}
HXLINE(2350)			Float upPos = this->get_mouseX();
HXDLIN(2350)			int upPos1 = this->_hx___getPosition(upPos,this->get_mouseY());
HXLINE(2351)			int leftPos;
HXLINE(2352)			int rightPos;
HXLINE(2354)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos1));
HXLINE(2355)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos1));
HXLINE(2357)			this->_hx___selectionIndex = leftPos;
HXLINE(2358)			this->_hx___caretIndex = rightPos;
HXLINE(2360)			if (this->_hx___inputEnabled) {
HXLINE(2362)				this->this_onFocusIn(null());
HXLINE(2364)				this->_hx___stopCursorTimer();
HXLINE(2365)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2382_this_onAddedToStage)
HXLINE(2382)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2389_this_onFocusIn)
HXLINE(2389)		bool _hx_tmp;
HXDLIN(2389)		bool _hx_tmp1;
HXDLIN(2389)		bool _hx_tmp2;
HXDLIN(2389)		if (this->get_selectable()) {
HXLINE(2389)			_hx_tmp2 = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2389)			_hx_tmp2 = false;
            		}
HXDLIN(2389)		if (_hx_tmp2) {
HXLINE(2389)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE(2389)			_hx_tmp1 = false;
            		}
HXDLIN(2389)		if (_hx_tmp1) {
HXLINE(2389)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2389)			_hx_tmp = false;
            		}
HXDLIN(2389)		if (_hx_tmp) {
HXLINE(2391)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2400_this_onFocusOut)
HXLINE(2400)		this->_hx___stopTextInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2405_this_onMouseDown)
HXLINE(2407)		if (!(this->get_selectable())) {
HXLINE(2407)			return;
            		}
HXLINE(2409)		this->_hx___updateLayout();
HXLINE(2411)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2411)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp,this->get_mouseY());
HXLINE(2412)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2414)		this->_hx___dirty = true;
HXLINE(2415)		if (!(this->_hx___renderDirty)) {
HXLINE(2415)			this->_hx___renderDirty = true;
HXDLIN(2415)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2418)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(2419)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2426_window_onKeyDown)
HXLINE(2426)		switch((int)(key)){
            			case (int)8: {
HXLINE(2439)				bool _hx_tmp;
HXDLIN(2439)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2439)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(2439)					_hx_tmp = false;
            				}
HXDLIN(2439)				if (_hx_tmp) {
HXLINE(2441)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(2445)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2447)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2448)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2450)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(2656)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2658)					this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(2659)					this->_hx___selectionIndex = (int)0;
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(2607)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2609)					::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(2631)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2633)					::String text = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(2635)					if (hx::IsNotNull( text )) {
HXLINE(2637)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(2641)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(2645)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(2649)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2649)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1,(( (int)(this->_hx___textEngine->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) )->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(2615)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2617)					::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(2619)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2621)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2622)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(2456)				bool _hx_tmp1;
HXDLIN(2456)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2456)					int _hx_tmp2 = this->_hx___caretIndex;
HXDLIN(2456)					_hx_tmp1 = (_hx_tmp2 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            				}
            				else {
HXLINE(2456)					_hx_tmp1 = false;
            				}
HXDLIN(2456)				if (_hx_tmp1) {
HXLINE(2458)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(2462)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2464)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2465)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2467)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2595)				this->_hx___caretBeginningOfLine();
HXLINE(2596)				this->_hx___stopCursorTimer();
HXLINE(2597)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2601)				this->_hx___caretEndOfLine();
HXLINE(2602)				this->_hx___stopCursorTimer();
HXLINE(2603)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2508)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2510)					this->_hx___caretEndOfLine();
HXLINE(2512)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2514)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2518)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2520)						this->_hx___caretNextCharacter();
            					}
            					else {
HXLINE(2524)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2526)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(2530)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2534)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2538)				this->_hx___stopCursorTimer();
HXLINE(2539)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2473)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2475)					this->_hx___caretBeginningOfLine();
HXLINE(2477)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2479)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2483)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2485)						this->_hx___caretPreviousCharacter();
            					}
            					else {
HXLINE(2489)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2491)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(2495)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2499)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2503)				this->_hx___stopCursorTimer();
HXLINE(2504)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2543)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2545)					this->_hx___caretNextLine(null(),null());
            				}
            				else {
HXLINE(2549)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2551)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(2555)						int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2556)						this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2560)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2564)				this->_hx___stopCursorTimer();
HXLINE(2565)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2569)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2571)					this->_hx___caretPreviousLine(null(),null());
            				}
            				else {
HXLINE(2575)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2577)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(2581)						int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2582)						this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2586)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2590)				this->_hx___stopCursorTimer();
HXLINE(2591)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(2430)				if (this->_hx___textEngine->multiline) {
HXLINE(2432)					this->replaceSelectedText(HX_("\n",0a,00,00,00));
HXLINE(2433)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2670_window_onTextInput)
HXLINE(2672)		this->replaceSelectedText(value);
HXLINE(2674)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_text()); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_border()); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollH()); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollV()); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_autoSize()); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_htmlText()); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxChars()); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numLines()); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_restrict()); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_wordWrap()); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn()); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_multiline()); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sharpness()); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textColor()); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textWidth()); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_background()); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_caretIndex()); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_embedFonts()); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollH()); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollV()); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectable()); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textHeight()); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn()); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn()); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn()); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_borderColor()); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gridFitType()); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn()); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_antiAliasType()); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomScrollV()); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return hx::Val( _hx___enableInput_dyn()); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn()); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return hx::Val( _hx___disableInput_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn()); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn()); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_backgroundColor()); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn()); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_defaultTextFormat()); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_displayAsPassword()); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseWheelEnabled()); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionEndIndex()); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn()); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn()); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionBeginIndex()); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn()); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn()); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = _hx___defaultTextFormat; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = _hx___missingFontWarning; return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue) ); }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(TextField_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__disableInput","\x22","\x64","\x62","\x1d"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__enableInput","\x67","\x4b","\x65","\xd1"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getGroup","\xe9","\x35","\x04","\x9d"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_59_boot)
HXLINE(  59)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
