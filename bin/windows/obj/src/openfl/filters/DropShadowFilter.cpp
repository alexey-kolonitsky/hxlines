// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_786269b8d678908e_16_new,"openfl.filters.DropShadowFilter","new",0xf784b84a,"openfl.filters.DropShadowFilter.new","openfl/filters/DropShadowFilter.hx",16,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_63_clone,"openfl.filters.DropShadowFilter","clone",0x1b8d49c7,"openfl.filters.DropShadowFilter.clone","openfl/filters/DropShadowFilter.hx",63,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_68___applyFilter,"openfl.filters.DropShadowFilter","__applyFilter",0x5aedd110,"openfl.filters.DropShadowFilter.__applyFilter","openfl/filters/DropShadowFilter.hx",68,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_89___updateSize,"openfl.filters.DropShadowFilter","__updateSize",0xd6a7d160,"openfl.filters.DropShadowFilter.__updateSize","openfl/filters/DropShadowFilter.hx",89,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_108_set_alpha,"openfl.filters.DropShadowFilter","set_alpha",0xa487a32b,"openfl.filters.DropShadowFilter.set_alpha","openfl/filters/DropShadowFilter.hx",108,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_116_set_angle,"openfl.filters.DropShadowFilter","set_angle",0xa5d33fa0,"openfl.filters.DropShadowFilter.set_angle","openfl/filters/DropShadowFilter.hx",116,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_128_set_blurX,"openfl.filters.DropShadowFilter","set_blurX",0x37f20b9e,"openfl.filters.DropShadowFilter.set_blurX","openfl/filters/DropShadowFilter.hx",128,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_140_set_blurY,"openfl.filters.DropShadowFilter","set_blurY",0x37f20b9f,"openfl.filters.DropShadowFilter.set_blurY","openfl/filters/DropShadowFilter.hx",140,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_152_set_color,"openfl.filters.DropShadowFilter","set_color",0xcd4d6d30,"openfl.filters.DropShadowFilter.set_color","openfl/filters/DropShadowFilter.hx",152,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_160_set_distance,"openfl.filters.DropShadowFilter","set_distance",0xcf183588,"openfl.filters.DropShadowFilter.set_distance","openfl/filters/DropShadowFilter.hx",160,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_172_set_hideObject,"openfl.filters.DropShadowFilter","set_hideObject",0x0e8f4234,"openfl.filters.DropShadowFilter.set_hideObject","openfl/filters/DropShadowFilter.hx",172,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_183_set_inner,"openfl.filters.DropShadowFilter","set_inner",0x410d2d63,"openfl.filters.DropShadowFilter.set_inner","openfl/filters/DropShadowFilter.hx",183,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_191_set_knockout,"openfl.filters.DropShadowFilter","set_knockout",0xd2c44c4d,"openfl.filters.DropShadowFilter.set_knockout","openfl/filters/DropShadowFilter.hx",191,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_199_set_quality,"openfl.filters.DropShadowFilter","set_quality",0x224d4dcc,"openfl.filters.DropShadowFilter.set_quality","openfl/filters/DropShadowFilter.hx",199,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_207_set_strength,"openfl.filters.DropShadowFilter","set_strength",0xf1ad74d4,"openfl.filters.DropShadowFilter.set_strength","openfl/filters/DropShadowFilter.hx",207,0x048fdea4)
namespace openfl{
namespace filters{

void DropShadowFilter_obj::__construct(hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject){
Float distance = __o_distance.Default(4);
Float angle = __o_angle.Default(45);
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
Float strength = __o_strength.Default(1);
int quality = __o_quality.Default(1);
bool inner = __o_inner.Default(false);
bool knockout = __o_knockout.Default(false);
bool hideObject = __o_hideObject.Default(false);
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_16_new)
HXLINE(  24)		this->distance = ((Float)4);
HXLINE(  22)		this->blurY = ((Float)0);
HXLINE(  21)		this->blurX = ((Float)0);
HXLINE(  20)		this->angle = ((Float)45);
HXLINE(  37)		super::__construct();
HXLINE(  39)		this->_hx___offsetX = (int)0;
HXLINE(  40)		this->_hx___offsetY = (int)0;
HXLINE(  41)		this->_hx___updateSize();
HXLINE(  43)		this->set_distance(distance);
HXLINE(  44)		this->set_angle(angle);
HXLINE(  45)		this->set_color(color);
HXLINE(  46)		this->set_alpha(alpha);
HXLINE(  47)		this->set_blurX(blurX);
HXLINE(  48)		this->set_blurY(blurY);
HXLINE(  49)		this->set_strength(strength);
HXLINE(  50)		this->set_quality(quality);
HXLINE(  51)		this->set_inner(inner);
HXLINE(  52)		this->set_knockout(knockout);
HXLINE(  53)		this->set_hideObject(hideObject);
HXLINE(  55)		this->_hx___needSecondBitmapData = true;
HXLINE(  56)		this->_hx___preserveObject = !(hideObject);
            	}

Dynamic DropShadowFilter_obj::__CreateEmpty() { return new DropShadowFilter_obj; }

void *DropShadowFilter_obj::_hx_vtable = 0;

Dynamic DropShadowFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DropShadowFilter_obj > _hx_result = new DropShadowFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool DropShadowFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x29444992) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x29444992;
	} else {
		return inClassId==(int)0x4f68d692;
	}
}

 ::openfl::filters::BitmapFilter DropShadowFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_786269b8d678908e_63_clone)
HXLINE(  63)		return  ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,this->distance,this->angle,this->color,this->alpha,this->blurX,this->blurY,this->strength,this->quality,this->inner,this->knockout,this->hideObject);
            	}


 ::openfl::display::BitmapData DropShadowFilter_obj::_hx___applyFilter( ::openfl::display::BitmapData bitmapData, ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint){
            	HX_GC_STACKFRAME(&_hx_pos_786269b8d678908e_68___applyFilter)
HXLINE(  72)		int a = ((int)((int)this->color >> (int)(int)24) & (int)(int)255);
HXLINE(  73)		int r = ((int)((int)this->color >> (int)(int)16) & (int)(int)255);
HXLINE(  74)		int g = ((int)((int)this->color >> (int)(int)8) & (int)(int)255);
HXLINE(  75)		int b = ((int)this->color & (int)(int)255);
HXLINE(  76)		 ::openfl::geom::Rectangle sourceBitmapData1 = sourceBitmapData->rect;
HXDLIN(  76)		sourceBitmapData->colorTransform(sourceBitmapData1, ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1,r,g,b,a));
HXLINE(  78)		 ::openfl::geom::Point destPoint1 = destPoint;
HXDLIN(  78)		destPoint1->x = (destPoint1->x + this->_hx___offsetX);
HXLINE(  79)		 ::openfl::geom::Point destPoint2 = destPoint;
HXDLIN(  79)		destPoint2->y = (destPoint2->y + this->_hx___offsetY);
HXLINE(  81)		 ::lime::graphics::Image bitmapData1 = bitmapData->image;
HXDLIN(  81)		 ::lime::graphics::Image sourceBitmapData2 = sourceBitmapData->image;
HXDLIN(  81)		 ::lime::math::Rectangle finalImage = sourceRect->_hx___toLimeRectangle();
HXDLIN(  81)		 ::lime::math::Vector2 finalImage1 = destPoint->_hx___toLimeVector2();
HXDLIN(  81)		 ::lime::graphics::Image finalImage2 = ::lime::graphics::utils::ImageDataUtil_obj::gaussianBlur(bitmapData1,sourceBitmapData2,finalImage,finalImage1,this->blurX,this->blurY,this->quality,this->strength);
HXLINE(  83)		if (hx::IsEq( finalImage2,bitmapData->image )) {
HXLINE(  83)			return bitmapData;
            		}
HXLINE(  84)		return sourceBitmapData;
            	}


void DropShadowFilter_obj::_hx___updateSize(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_89___updateSize)
HXLINE(  91)		Float _hx_tmp = this->distance;
HXDLIN(  91)		this->_hx___offsetX = ::Std_obj::_hx_int((_hx_tmp * ::Math_obj::cos(((Float)(this->angle * ::Math_obj::PI) / (Float)(int)180))));
HXLINE(  92)		Float _hx_tmp1 = this->distance;
HXDLIN(  92)		this->_hx___offsetY = ::Std_obj::_hx_int((_hx_tmp1 * ::Math_obj::sin(((Float)(this->angle * ::Math_obj::PI) / (Float)(int)180))));
HXLINE(  93)		Float _hx_tmp2;
HXDLIN(  93)		if ((this->_hx___offsetY < (int)0)) {
HXLINE(  93)			_hx_tmp2 = -(this->_hx___offsetY);
            		}
            		else {
HXLINE(  93)			_hx_tmp2 = (int)0;
            		}
HXDLIN(  93)		this->_hx___topExtension = ::Math_obj::ceil((_hx_tmp2 + this->blurY));
HXLINE(  94)		Float _hx_tmp3;
HXDLIN(  94)		if ((this->_hx___offsetY > (int)0)) {
HXLINE(  94)			_hx_tmp3 = this->_hx___offsetY;
            		}
            		else {
HXLINE(  94)			_hx_tmp3 = (int)0;
            		}
HXDLIN(  94)		this->_hx___bottomExtension = ::Math_obj::ceil((_hx_tmp3 + this->blurY));
HXLINE(  95)		Float _hx_tmp4;
HXDLIN(  95)		if ((this->_hx___offsetX < (int)0)) {
HXLINE(  95)			_hx_tmp4 = -(this->_hx___offsetX);
            		}
            		else {
HXLINE(  95)			_hx_tmp4 = (int)0;
            		}
HXDLIN(  95)		this->_hx___leftExtension = ::Math_obj::ceil((_hx_tmp4 + this->blurX));
HXLINE(  96)		Float _hx_tmp5;
HXDLIN(  96)		if ((this->_hx___offsetX > (int)0)) {
HXLINE(  96)			_hx_tmp5 = this->_hx___offsetX;
            		}
            		else {
HXLINE(  96)			_hx_tmp5 = (int)0;
            		}
HXDLIN(  96)		this->_hx___rightExtension = ::Math_obj::ceil((_hx_tmp5 + this->blurX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,_hx___updateSize,(void))

Float DropShadowFilter_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_108_set_alpha)
HXLINE( 110)		if ((value != this->alpha)) {
HXLINE( 110)			this->_hx___renderDirty = true;
            		}
HXLINE( 111)		return (this->alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_alpha,return )

Float DropShadowFilter_obj::set_angle(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_116_set_angle)
HXLINE( 118)		if ((value != this->angle)) {
HXLINE( 119)			this->angle = value;
HXLINE( 120)			this->_hx___renderDirty = true;
HXLINE( 121)			this->_hx___updateSize();
            		}
HXLINE( 123)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_angle,return )

Float DropShadowFilter_obj::set_blurX(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_128_set_blurX)
HXLINE( 130)		if ((value != this->blurX)) {
HXLINE( 131)			this->blurX = value;
HXLINE( 132)			this->_hx___renderDirty = true;
HXLINE( 133)			this->_hx___updateSize();
            		}
HXLINE( 135)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_blurX,return )

Float DropShadowFilter_obj::set_blurY(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_140_set_blurY)
HXLINE( 142)		if ((value != this->blurY)) {
HXLINE( 143)			this->blurY = value;
HXLINE( 144)			this->_hx___renderDirty = true;
HXLINE( 145)			this->_hx___updateSize();
            		}
HXLINE( 147)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_blurY,return )

int DropShadowFilter_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_152_set_color)
HXLINE( 154)		if ((value != this->color)) {
HXLINE( 154)			this->_hx___renderDirty = true;
            		}
HXLINE( 155)		return (this->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_color,return )

Float DropShadowFilter_obj::set_distance(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_160_set_distance)
HXLINE( 162)		if ((value != this->distance)) {
HXLINE( 163)			this->distance = value;
HXLINE( 164)			this->_hx___renderDirty = true;
HXLINE( 165)			this->_hx___updateSize();
            		}
HXLINE( 167)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_distance,return )

bool DropShadowFilter_obj::set_hideObject(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_172_set_hideObject)
HXLINE( 174)		if ((value != this->hideObject)) {
HXLINE( 175)			this->_hx___renderDirty = true;
HXLINE( 176)			this->_hx___preserveObject = !(value);
            		}
HXLINE( 178)		return (this->hideObject = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_hideObject,return )

bool DropShadowFilter_obj::set_inner(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_183_set_inner)
HXLINE( 185)		if ((value != this->inner)) {
HXLINE( 185)			this->_hx___renderDirty = true;
            		}
HXLINE( 186)		return (this->inner = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_inner,return )

bool DropShadowFilter_obj::set_knockout(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_191_set_knockout)
HXLINE( 193)		if ((value != this->knockout)) {
HXLINE( 193)			this->_hx___renderDirty = true;
            		}
HXLINE( 194)		return (this->knockout = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_knockout,return )

int DropShadowFilter_obj::set_quality(int value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_199_set_quality)
HXLINE( 201)		if ((value != this->quality)) {
HXLINE( 201)			this->_hx___renderDirty = true;
            		}
HXLINE( 202)		return (this->quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_quality,return )

Float DropShadowFilter_obj::set_strength(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_207_set_strength)
HXLINE( 209)		if ((value != this->strength)) {
HXLINE( 209)			this->_hx___renderDirty = true;
            		}
HXLINE( 210)		return (this->strength = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_strength,return )


hx::ObjectPtr< DropShadowFilter_obj > DropShadowFilter_obj::__new(hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject) {
	hx::ObjectPtr< DropShadowFilter_obj > __this = new DropShadowFilter_obj();
	__this->__construct(__o_distance,__o_angle,__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout,__o_hideObject);
	return __this;
}

hx::ObjectPtr< DropShadowFilter_obj > DropShadowFilter_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject) {
	DropShadowFilter_obj *__this = (DropShadowFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DropShadowFilter_obj), false, "openfl.filters.DropShadowFilter"));
	*(void **)__this = DropShadowFilter_obj::_hx_vtable;
	__this->__construct(__o_distance,__o_angle,__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout,__o_hideObject);
	return __this;
}

DropShadowFilter_obj::DropShadowFilter_obj()
{
}

hx::Val DropShadowFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"blurX") ) { return hx::Val( blurX); }
		if (HX_FIELD_EQ(inName,"blurY") ) { return hx::Val( blurY); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { return hx::Val( distance); }
		if (HX_FIELD_EQ(inName,"knockout") ) { return hx::Val( knockout); }
		if (HX_FIELD_EQ(inName,"strength") ) { return hx::Val( strength); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blurX") ) { return hx::Val( set_blurX_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blurY") ) { return hx::Val( set_blurY_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_inner") ) { return hx::Val( set_inner_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideObject") ) { return hx::Val( hideObject); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__updateSize") ) { return hx::Val( _hx___updateSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_distance") ) { return hx::Val( set_distance_dyn()); }
		if (HX_FIELD_EQ(inName,"set_knockout") ) { return hx::Val( set_knockout_dyn()); }
		if (HX_FIELD_EQ(inName,"set_strength") ) { return hx::Val( set_strength_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__applyFilter") ) { return hx::Val( _hx___applyFilter_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_hideObject") ) { return hx::Val( set_hideObject_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DropShadowFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue) );angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blurX(inValue) );blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blurY(inValue) );blurY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inner") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_inner(inValue) );inner=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue) );quality=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_distance(inValue) );distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_knockout(inValue) );knockout=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_strength(inValue) );strength=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideObject") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hideObject(inValue) );hideObject=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DropShadowFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("hideObject","\x21","\x25","\xc5","\xac"));
	outFields->push(HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"));
	outFields->push(HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DropShadowFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,blurX),HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,blurY),HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5")},
	{hx::fsInt,(int)offsetof(DropShadowFilter_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,distance),HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,hideObject),HX_HCSTRING("hideObject","\x21","\x25","\xc5","\xac")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,inner),HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,knockout),HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f")},
	{hx::fsInt,(int)offsetof(DropShadowFilter_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,strength),HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DropShadowFilter_obj_sStaticStorageInfo = 0;
#endif

static ::String DropShadowFilter_obj_sMemberFields[] = {
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"),
	HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("hideObject","\x21","\x25","\xc5","\xac"),
	HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"),
	HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__applyFilter","\xa6","\x20","\xa8","\x09"),
	HX_HCSTRING("__updateSize","\x8a","\x06","\x9c","\x3d"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_blurX","\x34","\x58","\xfb","\xdb"),
	HX_HCSTRING("set_blurY","\x35","\x58","\xfb","\xdb"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_distance","\xb2","\x6a","\x0c","\x36"),
	HX_HCSTRING("set_hideObject","\xde","\x95","\xda","\x42"),
	HX_HCSTRING("set_inner","\xf9","\x79","\x16","\xe5"),
	HX_HCSTRING("set_knockout","\x77","\x81","\xb8","\x39"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	HX_HCSTRING("set_strength","\xfe","\xa9","\xa1","\x58"),
	::String(null()) };

static void DropShadowFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DropShadowFilter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DropShadowFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DropShadowFilter_obj::__mClass,"__mClass");
};

#endif

hx::Class DropShadowFilter_obj::__mClass;

void DropShadowFilter_obj::__register()
{
	hx::Object *dummy = new DropShadowFilter_obj;
	DropShadowFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.DropShadowFilter","\x58","\x8b","\xe4","\x38");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DropShadowFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DropShadowFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DropShadowFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DropShadowFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DropShadowFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DropShadowFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace filters
