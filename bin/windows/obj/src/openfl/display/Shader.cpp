// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLContextType
#include <lime/graphics/opengl/GLContextType.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_GLUtils
#include <lime/utils/GLUtils.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4b006e5218f2daf8_24_new,"openfl.display.Shader","new",0x88fbb381,"openfl.display.Shader.new","openfl/display/Shader.hx",24,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_169___disable,"openfl.display.Shader","__disable",0x171f2ca9,"openfl.display.Shader.__disable","openfl/display/Shader.hx",169,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_178___disableGL,"openfl.display.Shader","__disableGL",0x7ec2a70e,"openfl.display.Shader.__disableGL","openfl/display/Shader.hx",178,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_216___enable,"openfl.display.Shader","__enable",0x8f5f3ee2,"openfl.display.Shader.__enable","openfl/display/Shader.hx",216,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_229___enableGL,"openfl.display.Shader","__enableGL",0x94d67987,"openfl.display.Shader.__enableGL","openfl/display/Shader.hx",229,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_249___init,"openfl.display.Shader","__init",0x2faba5af,"openfl.display.Shader.__init","openfl/display/Shader.hx",249,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_266___initGL,"openfl.display.Shader","__initGL",0x2e23ed94,"openfl.display.Shader.__initGL","openfl/display/Shader.hx",266,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_366___processGLData,"openfl.display.Shader","__processGLData",0x90b8a01f,"openfl.display.Shader.__processGLData","openfl/display/Shader.hx",366,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_463___update,"openfl.display.Shader","__update",0x1ddd1668,"openfl.display.Shader.__update","openfl/display/Shader.hx",463,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_472___updateGL,"openfl.display.Shader","__updateGL",0x201dbe8d,"openfl.display.Shader.__updateGL","openfl/display/Shader.hx",472,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_687_get_data,"openfl.display.Shader","get_data",0xb0c636f2,"openfl.display.Shader.get_data","openfl/display/Shader.hx",687,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_702_set_data,"openfl.display.Shader","set_data",0x5f239066,"openfl.display.Shader.set_data","openfl/display/Shader.hx",702,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_709_get_glFragmentSource,"openfl.display.Shader","get_glFragmentSource",0x5d5fb298,"openfl.display.Shader.get_glFragmentSource","openfl/display/Shader.hx",709,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_714_set_glFragmentSource,"openfl.display.Shader","set_glFragmentSource",0x2a176a0c,"openfl.display.Shader.set_glFragmentSource","openfl/display/Shader.hx",714,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_729_get_glVertexSource,"openfl.display.Shader","get_glVertexSource",0xa3c917ec,"openfl.display.Shader.get_glVertexSource","openfl/display/Shader.hx",729,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_734_set_glVertexSource,"openfl.display.Shader","set_glVertexSource",0x80784a60,"openfl.display.Shader.set_glVertexSource","openfl/display/Shader.hx",734,0xae8f5dcd)
namespace openfl{
namespace display{

void Shader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_GC_STACKFRAME(&_hx_pos_4b006e5218f2daf8_24_new)
HXLINE(  20)		this->_hx___data =  ::openfl::display::ShaderData_obj::__alloc( HX_CTX ,null());
HXLINE( 111)		if (hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 111)			this->_hx___glFragmentSource = HX_("varying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = vColorOffsets + (color * vColorMultipliers);\n\t\t\t\t\n\t\t\t\tif(color.a > 0.0){\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}",37,5a,24,e5);
            		}
HXLINE( 110)		if (hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 110)			this->_hx___glVertexSource = HX_("attribute float aAlpha;\n\t\tattribute mat4 aColorMultipliers;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying mat4 vColorMultipliers;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers = aColorMultipliers;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}",a9,64,b7,ce);
            		}
HXLINE( 158)		this->byteCode = code;
HXLINE( 159)		this->precisionHint = (int)1;
HXLINE( 161)		this->_hx___glSourceDirty = true;
HXLINE( 162)		this->_hx___numPasses = (int)1;
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

void *Shader_obj::_hx_vtable = 0;

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Shader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x676ab1f7;
}

void Shader_obj::_hx___disable(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_169___disable)
HXLINE( 169)		if (hx::IsNotNull( this->glProgram )) {
HXLINE( 171)			this->_hx___disableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disable,(void))

void Shader_obj::_hx___disableGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_178___disableGL)
HXLINE( 180)		if (hx::IsNotNull( this->get_data()->uImage0 )) {
HXLINE( 182)			this->get_data()->uImage0->input = null();
            		}
HXLINE( 186)		{
HXLINE( 186)			int _g = (int)0;
HXDLIN( 186)			::Array< ::Dynamic> _g1 = this->_hx___paramBool;
HXDLIN( 186)			while((_g < _g1->length)){
HXLINE( 186)				 ::openfl::display::ShaderParameter_Bool parameter = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 186)				_g = (_g + (int)1);
HXLINE( 188)				this->gl->disableVertexAttribArray(parameter->index);
            			}
            		}
HXLINE( 192)		{
HXLINE( 192)			int _g2 = (int)0;
HXDLIN( 192)			::Array< ::Dynamic> _g11 = this->_hx___paramFloat;
HXDLIN( 192)			while((_g2 < _g11->length)){
HXLINE( 192)				 ::openfl::display::ShaderParameter_Float parameter1 = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 192)				_g2 = (_g2 + (int)1);
HXLINE( 194)				this->gl->disableVertexAttribArray(parameter1->index);
            			}
            		}
HXLINE( 198)		{
HXLINE( 198)			int _g3 = (int)0;
HXDLIN( 198)			::Array< ::Dynamic> _g12 = this->_hx___paramInt;
HXDLIN( 198)			while((_g3 < _g12->length)){
HXLINE( 198)				 ::openfl::display::ShaderParameter_Int parameter2 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 198)				_g3 = (_g3 + (int)1);
HXLINE( 200)				this->gl->disableVertexAttribArray(parameter2->index);
            			}
            		}
HXLINE( 204)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,null());
HXLINE( 205)		this->gl->bindTexture(this->gl->TEXTURE_2D,null());
HXLINE( 207)		if (hx::IsEq( this->gl->type,::lime::graphics::opengl::GLContextType_obj::OPENGL_dyn() )) {
HXLINE( 209)			this->gl->disable(this->gl->TEXTURE_2D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disableGL,(void))

void Shader_obj::_hx___enable(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_216___enable)
HXLINE( 218)		this->_hx___init();
HXLINE( 220)		if (hx::IsNotNull( this->glProgram )) {
HXLINE( 222)			this->_hx___enableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enable,(void))

void Shader_obj::_hx___enableGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_229___enableGL)
HXLINE( 231)		int textureCount = (int)0;
HXLINE( 233)		{
HXLINE( 233)			int _g = (int)0;
HXDLIN( 233)			::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 233)			while((_g < _g1->length)){
HXLINE( 233)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 233)				_g = (_g + (int)1);
HXLINE( 235)				this->gl->uniform1i(input->index,textureCount);
HXLINE( 236)				textureCount = (textureCount + (int)1);
            			}
            		}
HXLINE( 240)		bool _hx_tmp;
HXDLIN( 240)		if (hx::IsEq( this->gl->type,::lime::graphics::opengl::GLContextType_obj::OPENGL_dyn() )) {
HXLINE( 240)			_hx_tmp = (textureCount > (int)0);
            		}
            		else {
HXLINE( 240)			_hx_tmp = false;
            		}
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 242)			this->gl->enable(this->gl->TEXTURE_2D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enableGL,(void))

void Shader_obj::_hx___init(){
            	HX_GC_STACKFRAME(&_hx_pos_4b006e5218f2daf8_249___init)
HXLINE( 251)		if (hx::IsNull( this->_hx___data )) {
HXLINE( 253)			this->_hx___data =  ::openfl::display::ShaderData_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 257)		bool _hx_tmp;
HXDLIN( 257)		bool _hx_tmp1;
HXDLIN( 257)		if (hx::IsNotNull( this->_hx___glFragmentSource )) {
HXLINE( 257)			_hx_tmp1 = hx::IsNotNull( this->_hx___glVertexSource );
            		}
            		else {
HXLINE( 257)			_hx_tmp1 = false;
            		}
HXDLIN( 257)		if (_hx_tmp1) {
HXLINE( 257)			if (hx::IsNotNull( this->glProgram )) {
HXLINE( 257)				_hx_tmp = this->_hx___glSourceDirty;
            			}
            			else {
HXLINE( 257)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 259)			this->_hx___initGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___init,(void))

void Shader_obj::_hx___initGL(){
            	HX_GC_STACKFRAME(&_hx_pos_4b006e5218f2daf8_266___initGL)
HXLINE( 268)		bool _hx_tmp;
HXDLIN( 268)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 268)			_hx_tmp = hx::IsNull( this->_hx___isUniform );
            		}
            		else {
HXLINE( 268)			_hx_tmp = true;
            		}
HXDLIN( 268)		if (_hx_tmp) {
HXLINE( 270)			this->_hx___glSourceDirty = false;
HXLINE( 271)			this->glProgram = null();
HXLINE( 273)			this->_hx___isUniform =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 275)			this->_hx___inputBitmapData = ::Array_obj< ::Dynamic>::__new();
HXLINE( 276)			this->_hx___paramBool = ::Array_obj< ::Dynamic>::__new();
HXLINE( 277)			this->_hx___paramFloat = ::Array_obj< ::Dynamic>::__new();
HXLINE( 278)			this->_hx___paramInt = ::Array_obj< ::Dynamic>::__new();
HXLINE( 280)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)4,(int)8);
HXDLIN( 280)			this->_hx___uniformMatrix2 = this1;
HXLINE( 281)			 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)9,(int)8);
HXDLIN( 281)			this->_hx___uniformMatrix3 = this2;
HXLINE( 282)			 ::lime::utils::ArrayBufferView this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)16,(int)8);
HXDLIN( 282)			this->_hx___uniformMatrix4 = this3;
HXLINE( 284)			this->_hx___processGLData(this->get_glVertexSource(),HX_("attribute",1c,70,f0,fa));
HXLINE( 285)			this->_hx___processGLData(this->get_glVertexSource(),HX_("uniform",34,41,64,b5));
HXLINE( 286)			this->_hx___processGLData(this->get_glFragmentSource(),HX_("uniform",34,41,64,b5));
            		}
HXLINE( 290)		bool _hx_tmp1;
HXDLIN( 290)		if (hx::IsNotNull( this->gl )) {
HXLINE( 290)			_hx_tmp1 = hx::IsNull( this->glProgram );
            		}
            		else {
HXLINE( 290)			_hx_tmp1 = false;
            		}
HXDLIN( 290)		if (_hx_tmp1) {
HXLINE( 295)			::String fragment;
HXDLIN( 295)			if (hx::IsEq( this->precisionHint,(int)1 )) {
HXLINE( 295)				fragment = HX_("mediump",5b,92,81,f0);
            			}
            			else {
HXLINE( 295)				fragment = HX_("lowp",5c,ad,b7,47);
            			}
HXLINE( 294)			::String fragment1 = ((HX_("#ifdef GL_ES\n\t\t\t\tprecision ",df,92,6a,64) + fragment) + HX_(" float;\n\t\t\t\t#endif\n\t\t\t\t",ea,d3,26,bb));
HXLINE( 292)			::String fragment2 = (fragment1 + this->get_glFragmentSource());
HXLINE( 299)			this->glProgram = ::lime::utils::GLUtils_obj::createProgram(this->get_glVertexSource(),fragment2);
HXLINE( 301)			if (hx::IsNotNull( this->glProgram )) {
HXLINE( 303)				{
HXLINE( 303)					int _g = (int)0;
HXDLIN( 303)					::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 303)					while((_g < _g1->length)){
HXLINE( 303)						 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 303)						_g = (_g + (int)1);
HXLINE( 305)						if (( (bool)(this->_hx___isUniform->get(input->name)) )) {
HXLINE( 307)							input->index = this->gl->getUniformLocation(this->glProgram,input->name);
            						}
            						else {
HXLINE( 311)							input->index = this->gl->getAttribLocation(this->glProgram,input->name);
            						}
            					}
            				}
HXLINE( 317)				{
HXLINE( 317)					int _g2 = (int)0;
HXDLIN( 317)					::Array< ::Dynamic> _g11 = this->_hx___paramBool;
HXDLIN( 317)					while((_g2 < _g11->length)){
HXLINE( 317)						 ::openfl::display::ShaderParameter_Bool parameter = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 317)						_g2 = (_g2 + (int)1);
HXLINE( 319)						if (( (bool)(this->_hx___isUniform->get(parameter->name)) )) {
HXLINE( 321)							parameter->index = this->gl->getUniformLocation(this->glProgram,parameter->name);
            						}
            						else {
HXLINE( 325)							parameter->index = this->gl->getAttribLocation(this->glProgram,parameter->name);
            						}
            					}
            				}
HXLINE( 331)				{
HXLINE( 331)					int _g3 = (int)0;
HXDLIN( 331)					::Array< ::Dynamic> _g12 = this->_hx___paramFloat;
HXDLIN( 331)					while((_g3 < _g12->length)){
HXLINE( 331)						 ::openfl::display::ShaderParameter_Float parameter1 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 331)						_g3 = (_g3 + (int)1);
HXLINE( 333)						if (( (bool)(this->_hx___isUniform->get(parameter1->name)) )) {
HXLINE( 335)							parameter1->index = this->gl->getUniformLocation(this->glProgram,parameter1->name);
            						}
            						else {
HXLINE( 339)							parameter1->index = this->gl->getAttribLocation(this->glProgram,parameter1->name);
            						}
            					}
            				}
HXLINE( 345)				{
HXLINE( 345)					int _g4 = (int)0;
HXDLIN( 345)					::Array< ::Dynamic> _g13 = this->_hx___paramInt;
HXDLIN( 345)					while((_g4 < _g13->length)){
HXLINE( 345)						 ::openfl::display::ShaderParameter_Int parameter2 = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 345)						_g4 = (_g4 + (int)1);
HXLINE( 347)						if (( (bool)(this->_hx___isUniform->get(parameter2->name)) )) {
HXLINE( 349)							parameter2->index = this->gl->getUniformLocation(this->glProgram,parameter2->name);
            						}
            						else {
HXLINE( 353)							parameter2->index = this->gl->getAttribLocation(this->glProgram,parameter2->name);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___initGL,(void))

void Shader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_GC_STACKFRAME(&_hx_pos_4b006e5218f2daf8_366___processGLData)
HXLINE( 368)		int lastMatch = (int)0;
HXDLIN( 368)		 ::Dynamic position;
HXDLIN( 368)		 ::EReg regex;
HXDLIN( 368)		::String name;
HXDLIN( 368)		::String type;
HXLINE( 370)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 372)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)",74,9c,40,21),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 376)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)",5c,61,a8,c8),HX_("",00,00,00,00));
            		}
HXLINE( 380)		while(regex->matchSub(source,lastMatch,null())){
HXLINE( 382)			type = regex->matched((int)1);
HXLINE( 383)			name = regex->matched((int)2);
HXLINE( 385)			if (::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83))) {
HXLINE( 387)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input =  ::openfl::display::ShaderInput_openfl_display_BitmapData_obj::__alloc( HX_CTX );
HXLINE( 388)				input->name = name;
HXLINE( 389)				this->_hx___inputBitmapData->push(input);
HXLINE( 390)				::Reflect_obj::setField(this->get_data(),name,input);
            			}
            			else {
HXLINE( 394)				 ::Dynamic parameterType;
HXDLIN( 394)				::String _hx_switch_0 = type;
            				if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 394)					parameterType = (int)0;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 394)					parameterType = (int)1;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 394)					parameterType = (int)2;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 394)					parameterType = (int)3;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_0==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 394)					parameterType = (int)5;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_0==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 394)					parameterType = (int)6;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("double",11,2b,cb,32)) ||  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 394)					parameterType = (int)4;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 394)					parameterType = (int)10;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 394)					parameterType = (int)11;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat2",92,41,56,48)) ||  (_hx_switch_0==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 394)					parameterType = (int)12;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 394)					parameterType = (int)13;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 394)					parameterType = (int)14;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 394)					parameterType = (int)15;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat3",93,41,56,48)) ||  (_hx_switch_0==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 394)					parameterType = (int)16;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 394)					parameterType = (int)17;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat4",94,41,56,48)) ||  (_hx_switch_0==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 394)					parameterType = (int)20;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 394)					parameterType = (int)18;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 394)					parameterType = (int)19;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 394)					parameterType = (int)8;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 394)					parameterType = (int)9;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_0==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 394)					parameterType = (int)7;
HXDLIN( 394)					goto _hx_goto_16;
            				}
            				/* default */{
HXLINE( 394)					parameterType = null();
            				}
            				_hx_goto_16:;
HXLINE( 421)				 ::Dynamic _hx_switch_1 = parameterType;
            				if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)3) ){
HXLINE( 425)					 ::openfl::display::ShaderParameter_Bool parameter =  ::openfl::display::ShaderParameter_Bool_obj::__alloc( HX_CTX );
HXLINE( 426)					parameter->name = name;
HXLINE( 427)					parameter->type = parameterType;
HXLINE( 428)					this->_hx___paramBool->push(parameter);
HXLINE( 429)					::Reflect_obj::setField(this->get_data(),name,parameter);
HXLINE( 423)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_1==(int)8) ||  (_hx_switch_1==(int)9) ||  (_hx_switch_1==(int)10) ||  (_hx_switch_1==(int)11) ){
HXLINE( 433)					 ::openfl::display::ShaderParameter_Int parameter1 =  ::openfl::display::ShaderParameter_Int_obj::__alloc( HX_CTX );
HXLINE( 434)					parameter1->name = name;
HXLINE( 435)					parameter1->type = parameterType;
HXLINE( 436)					this->_hx___paramInt->push(parameter1);
HXLINE( 437)					::Reflect_obj::setField(this->get_data(),name,parameter1);
HXLINE( 431)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE( 441)					 ::openfl::display::ShaderParameter_Float parameter2 =  ::openfl::display::ShaderParameter_Float_obj::__alloc( HX_CTX );
HXLINE( 442)					parameter2->name = name;
HXLINE( 443)					parameter2->type = parameterType;
HXLINE( 444)					this->_hx___paramFloat->push(parameter2);
HXLINE( 445)					::Reflect_obj::setField(this->get_data(),name,parameter2);
            				}
            				_hx_goto_17:;
            			}
HXLINE( 451)			this->_hx___isUniform->set(name,(storageType == HX_("uniform",34,41,64,b5)));
HXLINE( 453)			position = regex->matchedPos();
HXLINE( 454)			lastMatch = (( (int)(position->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (int)(position->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___processGLData,(void))

void Shader_obj::_hx___update(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_463___update)
HXLINE( 463)		if (hx::IsNotNull( this->glProgram )) {
HXLINE( 465)			this->_hx___updateGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___update,(void))

void Shader_obj::_hx___updateGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_472___updateGL)
HXLINE( 474)		int textureCount = (int)0;
HXLINE( 476)		{
HXLINE( 476)			int _g = (int)0;
HXDLIN( 476)			::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 476)			while((_g < _g1->length)){
HXLINE( 476)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 476)				_g = (_g + (int)1);
HXLINE( 478)				if (hx::IsNotNull( input->input )) {
HXLINE( 480)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = this->gl;
HXDLIN( 480)					_hx_tmp->activeTexture((this->gl->TEXTURE0 + textureCount));
HXLINE( 481)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp1 = this->gl;
HXDLIN( 481)					int _hx_tmp2 = this->gl->TEXTURE_2D;
HXDLIN( 481)					_hx_tmp1->bindTexture(_hx_tmp2,input->input->getTexture(this->gl));
HXLINE( 483)					if (input->smoothing) {
HXLINE( 485)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MAG_FILTER,this->gl->LINEAR);
HXLINE( 486)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MIN_FILTER,this->gl->LINEAR);
            					}
            					else {
HXLINE( 490)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MAG_FILTER,this->gl->NEAREST);
HXLINE( 491)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MIN_FILTER,this->gl->NEAREST);
            					}
            				}
HXLINE( 497)				textureCount = (textureCount + (int)1);
            			}
            		}
HXLINE( 501)		::Array< bool > value;
HXDLIN( 501)		int index;
HXLINE( 503)		{
HXLINE( 503)			int _g2 = (int)0;
HXDLIN( 503)			::Array< ::Dynamic> _g11 = this->_hx___paramBool;
HXDLIN( 503)			while((_g2 < _g11->length)){
HXLINE( 503)				 ::openfl::display::ShaderParameter_Bool parameter = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 503)				_g2 = (_g2 + (int)1);
HXLINE( 505)				value = parameter->value;
HXLINE( 506)				index = parameter->index;
HXLINE( 508)				if (hx::IsNotNull( value )) {
HXLINE( 510)					 ::Dynamic _g21 = parameter->type;
HXDLIN( 510)					 ::Dynamic _hx_switch_0 = _g21;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE( 514)						int _hx_tmp3;
HXDLIN( 514)						if (value->__get((int)0)) {
HXLINE( 514)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE( 514)							_hx_tmp3 = (int)0;
            						}
HXDLIN( 514)						this->gl->uniform1i(index,_hx_tmp3);
HXDLIN( 514)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 518)						int _hx_tmp4;
HXDLIN( 518)						if (value->__get((int)0)) {
HXLINE( 518)							_hx_tmp4 = (int)1;
            						}
            						else {
HXLINE( 518)							_hx_tmp4 = (int)0;
            						}
HXDLIN( 518)						int _hx_tmp5;
HXDLIN( 518)						if (value->__get((int)1)) {
HXLINE( 518)							_hx_tmp5 = (int)1;
            						}
            						else {
HXLINE( 518)							_hx_tmp5 = (int)0;
            						}
HXDLIN( 518)						this->gl->uniform2i(index,_hx_tmp4,_hx_tmp5);
HXDLIN( 518)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 522)						int _hx_tmp6;
HXDLIN( 522)						if (value->__get((int)0)) {
HXLINE( 522)							_hx_tmp6 = (int)1;
            						}
            						else {
HXLINE( 522)							_hx_tmp6 = (int)0;
            						}
HXDLIN( 522)						int _hx_tmp7;
HXDLIN( 522)						if (value->__get((int)1)) {
HXLINE( 522)							_hx_tmp7 = (int)1;
            						}
            						else {
HXLINE( 522)							_hx_tmp7 = (int)0;
            						}
HXDLIN( 522)						int _hx_tmp8;
HXDLIN( 522)						if (value->__get((int)2)) {
HXLINE( 522)							_hx_tmp8 = (int)1;
            						}
            						else {
HXLINE( 522)							_hx_tmp8 = (int)0;
            						}
HXDLIN( 522)						this->gl->uniform3i(index,_hx_tmp6,_hx_tmp7,_hx_tmp8);
HXDLIN( 522)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE( 526)						int _hx_tmp9;
HXDLIN( 526)						if (value->__get((int)0)) {
HXLINE( 526)							_hx_tmp9 = (int)1;
            						}
            						else {
HXLINE( 526)							_hx_tmp9 = (int)0;
            						}
HXDLIN( 526)						int _hx_tmp10;
HXDLIN( 526)						if (value->__get((int)1)) {
HXLINE( 526)							_hx_tmp10 = (int)1;
            						}
            						else {
HXLINE( 526)							_hx_tmp10 = (int)0;
            						}
HXDLIN( 526)						int _hx_tmp11;
HXDLIN( 526)						if (value->__get((int)2)) {
HXLINE( 526)							_hx_tmp11 = (int)1;
            						}
            						else {
HXLINE( 526)							_hx_tmp11 = (int)0;
            						}
HXDLIN( 526)						int _hx_tmp12;
HXDLIN( 526)						if (value->__get((int)3)) {
HXLINE( 526)							_hx_tmp12 = (int)1;
            						}
            						else {
HXLINE( 526)							_hx_tmp12 = (int)0;
            						}
HXDLIN( 526)						this->gl->uniform4i(index,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12);
HXDLIN( 526)						goto _hx_goto_22;
            					}
            					/* default */{
            					}
            					_hx_goto_22:;
            				}
            				else {
HXLINE( 532)					if (!(( (bool)(this->_hx___isUniform->get(parameter->name)) ))) {
HXLINE( 534)						this->gl->enableVertexAttribArray(parameter->index);
            					}
            				}
            			}
            		}
HXLINE( 540)		::Array< Float > value1;
HXDLIN( 540)		int index1;
HXLINE( 542)		{
HXLINE( 542)			int _g3 = (int)0;
HXDLIN( 542)			::Array< ::Dynamic> _g12 = this->_hx___paramFloat;
HXDLIN( 542)			while((_g3 < _g12->length)){
HXLINE( 542)				 ::openfl::display::ShaderParameter_Float parameter1 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 542)				_g3 = (_g3 + (int)1);
HXLINE( 544)				value1 = parameter1->value;
HXLINE( 545)				index1 = parameter1->index;
HXLINE( 547)				if (hx::IsNotNull( value1 )) {
HXLINE( 549)					 ::Dynamic _g22 = parameter1->type;
HXDLIN( 549)					 ::Dynamic _hx_switch_1 = _g22;
            					if (  (_hx_switch_1==(int)4) ){
HXLINE( 553)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp13 = this->gl;
HXDLIN( 553)						_hx_tmp13->uniform1f(index1,value1->__get((int)0));
HXDLIN( 553)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)5) ){
HXLINE( 557)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp14 = this->gl;
HXDLIN( 557)						_hx_tmp14->uniform2f(index1,value1->__get((int)0),value1->__get((int)1));
HXDLIN( 557)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)6) ){
HXLINE( 561)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp15 = this->gl;
HXDLIN( 561)						_hx_tmp15->uniform3f(index1,value1->__get((int)0),value1->__get((int)1),value1->__get((int)2));
HXDLIN( 561)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)7) ){
HXLINE( 565)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp16 = this->gl;
HXDLIN( 565)						_hx_tmp16->uniform4f(index1,value1->__get((int)0),value1->__get((int)1),value1->__get((int)2),value1->__get((int)3));
HXDLIN( 565)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)12) ){
HXLINE( 569)						{
HXLINE( 569)							int _g23 = (int)0;
HXDLIN( 569)							while((_g23 < (int)4)){
HXLINE( 569)								_g23 = (_g23 + (int)1);
HXDLIN( 569)								int i = (_g23 - (int)1);
HXLINE( 571)								{
HXLINE( 571)									 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix2;
HXDLIN( 571)									Float val = value1->__get(i);
HXDLIN( 571)									{
HXLINE( 571)										int this2 = this1->byteOffset;
HXDLIN( 571)										::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (i * (int)4)),val);
            									}
            								}
            							}
            						}
HXLINE( 575)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp17 = this->gl;
HXDLIN( 575)						_hx_tmp17->uniformMatrix2fv(index1,(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix2));
HXLINE( 567)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)16) ){
HXLINE( 583)						{
HXLINE( 583)							int _g24 = (int)0;
HXDLIN( 583)							while((_g24 < (int)9)){
HXLINE( 583)								_g24 = (_g24 + (int)1);
HXDLIN( 583)								int i1 = (_g24 - (int)1);
HXLINE( 585)								{
HXLINE( 585)									 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix3;
HXDLIN( 585)									Float val1 = value1->__get(i1);
HXDLIN( 585)									{
HXLINE( 585)										int this4 = this3->byteOffset;
HXDLIN( 585)										::__hxcpp_memory_set_float(this3->buffer->b,(this4 + (i1 * (int)4)),val1);
            									}
            								}
            							}
            						}
HXLINE( 589)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp18 = this->gl;
HXDLIN( 589)						_hx_tmp18->uniformMatrix3fv(index1,(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix3));
HXLINE( 581)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_1==(int)20) ){
HXLINE( 597)						{
HXLINE( 597)							int _g25 = (int)0;
HXDLIN( 597)							while((_g25 < (int)16)){
HXLINE( 597)								_g25 = (_g25 + (int)1);
HXDLIN( 597)								int i2 = (_g25 - (int)1);
HXLINE( 599)								{
HXLINE( 599)									 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix4;
HXDLIN( 599)									Float val2 = value1->__get(i2);
HXDLIN( 599)									{
HXLINE( 599)										int this6 = this5->byteOffset;
HXDLIN( 599)										::__hxcpp_memory_set_float(this5->buffer->b,(this6 + (i2 * (int)4)),val2);
            									}
            								}
            							}
            						}
HXLINE( 603)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp19 = this->gl;
HXDLIN( 603)						_hx_tmp19->uniformMatrix4fv(index1,(int)1,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(this->_hx___uniformMatrix4));
HXLINE( 595)						goto _hx_goto_24;
            					}
            					/* default */{
            					}
            					_hx_goto_24:;
            				}
            				else {
HXLINE( 609)					if (!(( (bool)(this->_hx___isUniform->get(parameter1->name)) ))) {
HXLINE( 611)						this->gl->enableVertexAttribArray(parameter1->index);
HXLINE( 613)						{
HXLINE( 613)							 ::Dynamic _g26 = parameter1->type;
HXDLIN( 613)							 ::Dynamic _hx_switch_2 = _g26;
            							if (  (_hx_switch_2==(int)12) ){
HXLINE( 617)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp20 = this->gl;
HXDLIN( 617)								_hx_tmp20->enableVertexAttribArray((parameter1->index + (int)1));
HXDLIN( 617)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_2==(int)16) ){
HXLINE( 621)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp21 = this->gl;
HXDLIN( 621)								_hx_tmp21->enableVertexAttribArray((parameter1->index + (int)1));
HXLINE( 622)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp22 = this->gl;
HXDLIN( 622)								_hx_tmp22->enableVertexAttribArray((parameter1->index + (int)2));
HXLINE( 619)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_2==(int)20) ){
HXLINE( 626)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp23 = this->gl;
HXDLIN( 626)								_hx_tmp23->enableVertexAttribArray((parameter1->index + (int)1));
HXLINE( 627)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp24 = this->gl;
HXDLIN( 627)								_hx_tmp24->enableVertexAttribArray((parameter1->index + (int)2));
HXLINE( 628)								 ::lime::_backend::native::NativeGLRenderContext _hx_tmp25 = this->gl;
HXDLIN( 628)								_hx_tmp25->enableVertexAttribArray((parameter1->index + (int)3));
HXLINE( 624)								goto _hx_goto_28;
            							}
            							/* default */{
            							}
            							_hx_goto_28:;
            						}
            					}
            				}
            			}
            		}
HXLINE( 638)		::Array< int > value2;
HXDLIN( 638)		int index2;
HXLINE( 640)		{
HXLINE( 640)			int _g4 = (int)0;
HXDLIN( 640)			::Array< ::Dynamic> _g13 = this->_hx___paramInt;
HXDLIN( 640)			while((_g4 < _g13->length)){
HXLINE( 640)				 ::openfl::display::ShaderParameter_Int parameter2 = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 640)				_g4 = (_g4 + (int)1);
HXLINE( 642)				value2 = parameter2->value;
HXLINE( 643)				index2 = parameter2->index;
HXLINE( 645)				if (hx::IsNotNull( value2 )) {
HXLINE( 647)					 ::Dynamic _g27 = parameter2->type;
HXDLIN( 647)					 ::Dynamic _hx_switch_3 = _g27;
            					if (  (_hx_switch_3==(int)8) ){
HXLINE( 651)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp26 = this->gl;
HXDLIN( 651)						_hx_tmp26->uniform1i(index2,value2->__get((int)0));
HXDLIN( 651)						goto _hx_goto_30;
            					}
            					if (  (_hx_switch_3==(int)9) ){
HXLINE( 655)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp27 = this->gl;
HXDLIN( 655)						_hx_tmp27->uniform2i(index2,value2->__get((int)0),value2->__get((int)1));
HXDLIN( 655)						goto _hx_goto_30;
            					}
            					if (  (_hx_switch_3==(int)10) ){
HXLINE( 659)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp28 = this->gl;
HXDLIN( 659)						_hx_tmp28->uniform3i(index2,value2->__get((int)0),value2->__get((int)1),value2->__get((int)2));
HXDLIN( 659)						goto _hx_goto_30;
            					}
            					if (  (_hx_switch_3==(int)11) ){
HXLINE( 663)						 ::lime::_backend::native::NativeGLRenderContext _hx_tmp29 = this->gl;
HXDLIN( 663)						_hx_tmp29->uniform4i(index2,value2->__get((int)0),value2->__get((int)1),value2->__get((int)2),value2->__get((int)3));
HXDLIN( 663)						goto _hx_goto_30;
            					}
            					/* default */{
            					}
            					_hx_goto_30:;
            				}
            				else {
HXLINE( 669)					if (!(( (bool)(this->_hx___isUniform->get(parameter2->name)) ))) {
HXLINE( 671)						this->gl->enableVertexAttribArray(parameter2->index);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___updateGL,(void))

 ::openfl::display::ShaderData Shader_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_687_get_data)
HXLINE( 689)		bool _hx_tmp;
HXDLIN( 689)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 689)			_hx_tmp = hx::IsNull( this->_hx___data );
            		}
            		else {
HXLINE( 689)			_hx_tmp = true;
            		}
HXDLIN( 689)		if (_hx_tmp) {
HXLINE( 691)			this->_hx___init();
            		}
HXLINE( 695)		return this->_hx___data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_data,return )

 ::openfl::display::ShaderData Shader_obj::set_data( ::openfl::display::ShaderData value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_702_set_data)
HXLINE( 702)		return (this->_hx___data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_data,return )

::String Shader_obj::get_glFragmentSource(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_709_get_glFragmentSource)
HXLINE( 709)		return this->_hx___glFragmentSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glFragmentSource,return )

::String Shader_obj::set_glFragmentSource(::String value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_714_set_glFragmentSource)
HXLINE( 716)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 718)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 722)		return (this->_hx___glFragmentSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glFragmentSource,return )

::String Shader_obj::get_glVertexSource(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_729_get_glVertexSource)
HXLINE( 729)		return this->_hx___glVertexSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glVertexSource,return )

::String Shader_obj::set_glVertexSource(::String value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_734_set_glVertexSource)
HXLINE( 736)		if ((value != this->_hx___glVertexSource)) {
HXLINE( 738)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 742)		return (this->_hx___glVertexSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glVertexSource,return )


hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::openfl::utils::ByteArrayData code) {
	hx::ObjectPtr< Shader_obj > __this = new Shader_obj();
	__this->__construct(code);
	return __this;
}

hx::ObjectPtr< Shader_obj > Shader_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData code) {
	Shader_obj *__this = (Shader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shader_obj), true, "openfl.display.Shader"));
	*(void **)__this = Shader_obj::_hx_vtable;
	__this->__construct(code);
	return __this;
}

Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(byteCode,"byteCode");
	HX_MARK_MEMBER_NAME(glProgram,"glProgram");
	HX_MARK_MEMBER_NAME(precisionHint,"precisionHint");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___data,"__data");
	HX_MARK_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_MARK_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_MARK_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_MARK_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_MARK_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_MARK_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_MARK_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_MARK_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_MARK_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix2,"__uniformMatrix2");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix3,"__uniformMatrix3");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix4,"__uniformMatrix4");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteCode,"byteCode");
	HX_VISIT_MEMBER_NAME(glProgram,"glProgram");
	HX_VISIT_MEMBER_NAME(precisionHint,"precisionHint");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___data,"__data");
	HX_VISIT_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_VISIT_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_VISIT_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_VISIT_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_VISIT_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_VISIT_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_VISIT_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_VISIT_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_VISIT_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix2,"__uniformMatrix2");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix3,"__uniformMatrix3");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix4,"__uniformMatrix4");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_data()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { return hx::Val( _hx___data); }
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { return hx::Val( byteCode); }
		if (HX_FIELD_EQ(inName,"__enable") ) { return hx::Val( _hx___enable_dyn()); }
		if (HX_FIELD_EQ(inName,"__initGL") ) { return hx::Val( _hx___initGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn()); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { return hx::Val( glProgram); }
		if (HX_FIELD_EQ(inName,"__disable") ) { return hx::Val( _hx___disable_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { return hx::Val( _hx___paramInt); }
		if (HX_FIELD_EQ(inName,"__enableGL") ) { return hx::Val( _hx___enableGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { return hx::Val( _hx___isUniform); }
		if (HX_FIELD_EQ(inName,"__numPasses") ) { return hx::Val( _hx___numPasses); }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { return hx::Val( _hx___paramBool); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { return hx::Val( _hx___paramFloat); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { return hx::Val( precisionHint); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_glVertexSource()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { return hx::Val( _hx___glSourceDirty); }
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return hx::Val( _hx___processGLData_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_glFragmentSource()); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { return hx::Val( _hx___glVertexSource); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix2") ) { return hx::Val( _hx___uniformMatrix2); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix3") ) { return hx::Val( _hx___uniformMatrix3); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix4") ) { return hx::Val( _hx___uniformMatrix4); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { return hx::Val( _hx___inputBitmapData); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { return hx::Val( _hx___glFragmentSource); }
		if (HX_FIELD_EQ(inName,"get_glVertexSource") ) { return hx::Val( get_glVertexSource_dyn()); }
		if (HX_FIELD_EQ(inName,"set_glVertexSource") ) { return hx::Val( set_glVertexSource_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_glFragmentSource") ) { return hx::Val( get_glFragmentSource_dyn()); }
		if (HX_FIELD_EQ(inName,"set_glFragmentSource") ) { return hx::Val( set_glFragmentSource_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { _hx___data=inValue.Cast<  ::openfl::display::ShaderData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { byteCode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { glProgram=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { _hx___paramInt=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { _hx___isUniform=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__numPasses") ) { _hx___numPasses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { _hx___paramBool=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { _hx___paramFloat=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { precisionHint=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glVertexSource(inValue) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { _hx___glSourceDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glFragmentSource(inValue) ); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { _hx___glVertexSource=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix2") ) { _hx___uniformMatrix2=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix3") ) { _hx___uniformMatrix3=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix4") ) { _hx___uniformMatrix4=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { _hx___inputBitmapData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { _hx___glFragmentSource=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7"));
	outFields->push(HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"));
	outFields->push(HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b"));
	outFields->push(HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"));
	outFields->push(HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"));
	outFields->push(HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"));
	outFields->push(HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"));
	outFields->push(HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"));
	outFields->push(HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"));
	outFields->push(HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"));
	outFields->push(HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"));
	outFields->push(HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"));
	outFields->push(HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"));
	outFields->push(HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81"));
	outFields->push(HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81"));
	outFields->push(HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Shader_obj,byteCode),HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Shader_obj,glProgram),HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,precisionHint),HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(Shader_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::openfl::display::ShaderData*/ ,(int)offsetof(Shader_obj,_hx___data),HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glFragmentSource),HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63")},
	{hx::fsBool,(int)offsetof(Shader_obj,_hx___glSourceDirty),HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glVertexSource),HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Shader_obj,_hx___isUniform),HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___inputBitmapData),HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64")},
	{hx::fsInt,(int)offsetof(Shader_obj,_hx___numPasses),HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramBool),HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramFloat),HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramInt),HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix2),HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix3),HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix4),HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"),
	HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"),
	HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"),
	HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"),
	HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"),
	HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"),
	HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"),
	HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"),
	HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"),
	HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"),
	HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"),
	HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"),
	HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81"),
	HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81"),
	HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81"),
	HX_HCSTRING("__disable","\xc8","\xba","\xa6","\x32"),
	HX_HCSTRING("__disableGL","\xed","\x3a","\xe1","\x35"),
	HX_HCSTRING("__enable","\xa3","\x19","\xb7","\xa0"),
	HX_HCSTRING("__enableGL","\x88","\x46","\xeb","\x8f"),
	HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"),
	HX_HCSTRING("__initGL","\x55","\xc8","\x7b","\x3f"),
	HX_HCSTRING("__processGLData","\x7e","\x0f","\x78","\x7c"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateGL","\x8e","\x8b","\x32","\x1b"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_glFragmentSource","\xd9","\x2a","\x35","\x16"),
	HX_HCSTRING("set_glFragmentSource","\x4d","\xe2","\xec","\xe2"),
	HX_HCSTRING("get_glVertexSource","\xed","\x4d","\xe4","\xf6"),
	HX_HCSTRING("set_glVertexSource","\x61","\x80","\x93","\xd3"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Object *dummy = new Shader_obj;
	Shader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Shader","\x0f","\xdf","\x61","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
