// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_FilterType
#include <openfl/_internal/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_Frame
#include <openfl/_internal/timeline/Frame.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObject
#include <openfl/_internal/timeline/FrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObjectType
#include <openfl/_internal/timeline/FrameObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__MovieClip_FrameSymbolInstance
#include <openfl/display/_MovieClip/FrameSymbolInstance.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_67_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",67,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_91_addFrameScript,"openfl.display.MovieClip","addFrameScript",0xff5029ef,"openfl.display.MovieClip.addFrameScript","openfl/display/MovieClip.hx",91,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_115_gotoAndPlay,"openfl.display.MovieClip","gotoAndPlay",0x3bade190,"openfl.display.MovieClip.gotoAndPlay","openfl/display/MovieClip.hx",115,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_123_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",123,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_131_nextFrame,"openfl.display.MovieClip","nextFrame",0x3b845cc2,"openfl.display.MovieClip.nextFrame","openfl/display/MovieClip.hx",131,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_139_play,"openfl.display.MovieClip","play",0x5c42706c,"openfl.display.MovieClip.play","openfl/display/MovieClip.hx",139,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_153_prevFrame,"openfl.display.MovieClip","prevFrame",0x7f95e2c2,"openfl.display.MovieClip.prevFrame","openfl/display/MovieClip.hx",153,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_163_stop,"openfl.display.MovieClip","stop",0x5e44327a,"openfl.display.MovieClip.stop","openfl/display/MovieClip.hx",163,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_168___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",168,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_352___evaluateFrameScripts,"openfl.display.MovieClip","__evaluateFrameScripts",0xeeb7ecec,"openfl.display.MovieClip.__evaluateFrameScripts","openfl/display/MovieClip.hx",352,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_377___fromSymbol,"openfl.display.MovieClip","__fromSymbol",0xc2d8a9fa,"openfl.display.MovieClip.__fromSymbol","openfl/display/MovieClip.hx",377,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_634___getNextFrame,"openfl.display.MovieClip","__getNextFrame",0x21b0ba5c,"openfl.display.MovieClip.__getNextFrame","openfl/display/MovieClip.hx",634,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_656___goto,"openfl.display.MovieClip","__goto",0x81b9cd3b,"openfl.display.MovieClip.__goto","openfl/display/MovieClip.hx",656,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_671___resolveFrameReference,"openfl.display.MovieClip","__resolveFrameReference",0x22812f52,"openfl.display.MovieClip.__resolveFrameReference","openfl/display/MovieClip.hx",671,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_701___sortDepths,"openfl.display.MovieClip","__sortDepths",0x5b255da6,"openfl.display.MovieClip.__sortDepths","openfl/display/MovieClip.hx",701,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_706___stopAllMovieClips,"openfl.display.MovieClip","__stopAllMovieClips",0x702dce5a,"openfl.display.MovieClip.__stopAllMovieClips","openfl/display/MovieClip.hx",706,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_714___updateDisplayObject,"openfl.display.MovieClip","__updateDisplayObject",0x83a2ca40,"openfl.display.MovieClip.__updateDisplayObject","openfl/display/MovieClip.hx",714,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_793___updateFrameLabel,"openfl.display.MovieClip","__updateFrameLabel",0x555c4988,"openfl.display.MovieClip.__updateFrameLabel","openfl/display/MovieClip.hx",793,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_831_get_currentFrame,"openfl.display.MovieClip","get_currentFrame",0xf2ac6035,"openfl.display.MovieClip.get_currentFrame","openfl/display/MovieClip.hx",831,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_832_get_currentFrameLabel,"openfl.display.MovieClip","get_currentFrameLabel",0x543e3d7f,"openfl.display.MovieClip.get_currentFrameLabel","openfl/display/MovieClip.hx",832,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_833_get_currentLabel,"openfl.display.MovieClip","get_currentLabel",0x5bd7f5fc,"openfl.display.MovieClip.get_currentLabel","openfl/display/MovieClip.hx",833,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_834_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",834,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_835_get_framesLoaded,"openfl.display.MovieClip","get_framesLoaded",0xb37eaf4c,"openfl.display.MovieClip.get_framesLoaded","openfl/display/MovieClip.hx",835,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_836_get_isPlaying,"openfl.display.MovieClip","get_isPlaying",0x16620f03,"openfl.display.MovieClip.get_isPlaying","openfl/display/MovieClip.hx",836,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_837_get_totalFrames,"openfl.display.MovieClip","get_totalFrames",0x46b3baa9,"openfl.display.MovieClip.get_totalFrames","openfl/display/MovieClip.hx",837,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_67_new)
HXLINE(  69)		super::__construct();
HXLINE(  71)		this->_hx___currentFrame = (int)1;
HXLINE(  72)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  73)		this->_hx___totalFrames = (int)0;
HXLINE(  74)		this->enabled = true;
HXLINE(  76)		if (hx::IsNotNull( ::openfl::display::MovieClip_obj::_hx___initSymbol )) {
HXLINE(  78)			this->_hx___swf = ::openfl::display::MovieClip_obj::_hx___initSWF;
HXLINE(  79)			this->_hx___symbol = ::openfl::display::MovieClip_obj::_hx___initSymbol;
HXLINE(  81)			::openfl::display::MovieClip_obj::_hx___initSWF = null();
HXLINE(  82)			::openfl::display::MovieClip_obj::_hx___initSymbol = null();
HXLINE(  84)			this->_hx___fromSymbol(this->_hx___swf,this->_hx___symbol);
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void MovieClip_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_91_addFrameScript)
HXLINE(  93)		if ((index < (int)0)) {
HXLINE(  93)			return;
            		}
HXLINE(  94)		int frame = (index + (int)1);
HXLINE(  96)		if (hx::IsNotNull( method )) {
HXLINE(  98)			if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 100)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 104)			this->_hx___frameScripts->set(frame,method);
            		}
            		else {
HXLINE( 106)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 108)				this->_hx___frameScripts->remove(frame);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,addFrameScript,(void))

void MovieClip_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_115_gotoAndPlay)
HXLINE( 117)		this->play();
HXLINE( 118)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndPlay,(void))

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_123_gotoAndStop)
HXLINE( 125)		this->stop();
HXLINE( 126)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_131_nextFrame)
HXLINE( 133)		this->stop();
HXLINE( 134)		this->_hx___goto((this->_hx___currentFrame + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,nextFrame,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_139_play)
HXLINE( 141)		bool _hx_tmp;
HXDLIN( 141)		bool _hx_tmp1;
HXDLIN( 141)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 141)			_hx_tmp1 = this->_hx___playing;
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = true;
            		}
HXDLIN( 141)		if (!(_hx_tmp1)) {
HXLINE( 141)			_hx_tmp = (this->_hx___totalFrames < (int)2);
            		}
            		else {
HXLINE( 141)			_hx_tmp = true;
            		}
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		this->_hx___playing = true;
HXLINE( 146)		this->_hx___frameTime = ::Std_obj::_hx_int(((Float)(int)1000 / (Float)this->_hx___swf->frameRate));
HXLINE( 147)		this->_hx___timeElapsed = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_153_prevFrame)
HXLINE( 155)		this->stop();
HXLINE( 156)		this->_hx___goto((this->_hx___currentFrame - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,prevFrame,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_163_stop)
HXLINE( 163)		this->_hx___playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_168___enterFrame)
HXLINE( 170)		bool _hx_tmp;
HXDLIN( 170)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 170)			_hx_tmp = this->_hx___playing;
            		}
            		else {
HXLINE( 170)			_hx_tmp = false;
            		}
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 172)			int nextFrame = this->_hx___getNextFrame(deltaTime);
HXLINE( 174)			if ((this->_hx___lastFrameScriptEval == nextFrame)) {
HXLINE( 176)				return;
            			}
HXLINE( 180)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 182)				if ((nextFrame < this->_hx___currentFrame)) {
HXLINE( 184)					this->_hx___evaluateFrameScripts(this->_hx___totalFrames);
HXLINE( 185)					this->_hx___currentFrame = (int)1;
            				}
HXLINE( 189)				this->_hx___evaluateFrameScripts(nextFrame);
            			}
            			else {
HXLINE( 193)				this->_hx___currentFrame = nextFrame;
            			}
            		}
HXLINE( 199)		bool _hx_tmp1;
HXDLIN( 199)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 199)			_hx_tmp1 = (this->_hx___currentFrame != this->_hx___lastFrameUpdate);
            		}
            		else {
HXLINE( 199)			_hx_tmp1 = false;
            		}
HXDLIN( 199)		if (_hx_tmp1) {
HXLINE( 201)			this->_hx___updateFrameLabel();
HXLINE( 203)			 ::haxe::ds::IntMap currentInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 205)			int frame;
HXLINE( 206)			 ::openfl::_internal::timeline::Frame frameData;
HXLINE( 207)			 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 211)			{
HXLINE( 211)				int _g1 = (int)0;
HXDLIN( 211)				int _g = this->_hx___currentFrame;
HXDLIN( 211)				while((_g1 < _g)){
HXLINE( 211)					_g1 = (_g1 + (int)1);
HXDLIN( 211)					int i = (_g1 - (int)1);
HXLINE( 213)					frame = (i + (int)1);
HXLINE( 214)					frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >();
HXLINE( 216)					if (hx::IsNull( frameData->objects )) {
HXLINE( 216)						continue;
            					}
HXLINE( 218)					{
HXLINE( 218)						int _g2 = (int)0;
HXDLIN( 218)						::Array< ::Dynamic> _g3 = frameData->objects;
HXDLIN( 218)						while((_g2 < _g3->length)){
HXLINE( 218)							 ::openfl::_internal::timeline::FrameObject frameObject = _g3->__get(_g2).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 218)							_g2 = (_g2 + (int)1);
HXLINE( 220)							{
HXLINE( 220)								 ::openfl::_internal::timeline::FrameObjectType _g4 = frameObject->type;
HXDLIN( 220)								switch((int)(_hx_getEnumValueIndex(_g4))){
            									case (int)0: {
HXLINE( 224)										instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(::haxe::IMap_obj::get(this->_hx___activeInstancesByFrameObjectID,frameObject->id)) );
HXLINE( 226)										if (hx::IsNotNull( instance )) {
HXLINE( 228)											currentInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 229)											this->_hx___updateDisplayObject(instance->displayObject,frameObject);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 235)										instance = currentInstancesByFrameObjectID->get(frameObject->id).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXLINE( 237)										bool _hx_tmp2;
HXDLIN( 237)										if (hx::IsNotNull( instance )) {
HXLINE( 237)											_hx_tmp2 = hx::IsNotNull( instance->displayObject );
            										}
            										else {
HXLINE( 237)											_hx_tmp2 = false;
            										}
HXDLIN( 237)										if (_hx_tmp2) {
HXLINE( 239)											this->_hx___updateDisplayObject(instance->displayObject,frameObject);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 245)										currentInstancesByFrameObjectID->remove(frameObject->id);
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 255)			::Array< ::Dynamic> currentInstances = ::Array_obj< ::Dynamic>::__new();
HXLINE( 256)			::Array< ::Dynamic> currentMasks = ::Array_obj< ::Dynamic>::__new();
HXLINE( 258)			{
HXLINE( 258)				 ::Dynamic instance1 = currentInstancesByFrameObjectID->iterator();
HXDLIN( 258)				while(( (bool)(instance1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 258)					 ::openfl::display::_MovieClip::FrameSymbolInstance instance2 = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(instance1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 260)					if ((currentInstances->indexOf(instance2,null()) == (int)-1)) {
HXLINE( 262)						if ((instance2->clipDepth > (int)0)) {
HXLINE( 264)							currentMasks->push(instance2);
            						}
            						else {
HXLINE( 268)							currentInstances->push(instance2);
            						}
            					}
            				}
            			}
HXLINE( 276)			currentInstances->sort(this->_hx___sortDepths_dyn());
HXLINE( 278)			 ::openfl::display::DisplayObject existingChild;
HXLINE( 279)			int targetDepth;
HXLINE( 280)			 ::openfl::display::DisplayObject targetChild;
HXLINE( 281)			 ::openfl::display::DisplayObject child;
HXLINE( 282)			bool maskApplied;
HXLINE( 284)			{
HXLINE( 284)				int _g11 = (int)0;
HXDLIN( 284)				int _g5 = currentInstances->length;
HXDLIN( 284)				while((_g11 < _g5)){
HXLINE( 284)					_g11 = (_g11 + (int)1);
HXDLIN( 284)					int i1 = (_g11 - (int)1);
HXLINE( 286)					existingChild = this->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 287)					instance = currentInstances->__get(i1).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXLINE( 289)					targetDepth = instance->depth;
HXLINE( 290)					targetChild = instance->displayObject;
HXLINE( 292)					if (hx::IsNotEq( existingChild,targetChild )) {
HXLINE( 294)						child = targetChild;
HXLINE( 295)						this->addChildAt(targetChild,i1);
            					}
            					else {
HXLINE( 299)						child = this->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
            					}
HXLINE( 303)					maskApplied = false;
HXLINE( 305)					{
HXLINE( 305)						int _g21 = (int)0;
HXDLIN( 305)						while((_g21 < currentMasks->length)){
HXLINE( 305)							 ::openfl::display::_MovieClip::FrameSymbolInstance mask = currentMasks->__get(_g21).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 305)							_g21 = (_g21 + (int)1);
HXLINE( 307)							bool _hx_tmp3;
HXDLIN( 307)							if ((targetDepth > mask->depth)) {
HXLINE( 307)								_hx_tmp3 = (targetDepth <= mask->clipDepth);
            							}
            							else {
HXLINE( 307)								_hx_tmp3 = false;
            							}
HXDLIN( 307)							if (_hx_tmp3) {
HXLINE( 309)								child->set_mask(mask->displayObject);
HXLINE( 310)								maskApplied = true;
HXLINE( 311)								goto _hx_goto_12;
            							}
            						}
            						_hx_goto_12:;
            					}
HXLINE( 317)					bool _hx_tmp4;
HXDLIN( 317)					bool _hx_tmp5;
HXDLIN( 317)					if ((currentMasks->length > (int)0)) {
HXLINE( 317)						_hx_tmp5 = !(maskApplied);
            					}
            					else {
HXLINE( 317)						_hx_tmp5 = false;
            					}
HXDLIN( 317)					if (_hx_tmp5) {
HXLINE( 317)						_hx_tmp4 = hx::IsNotNull( child->get_mask() );
            					}
            					else {
HXLINE( 317)						_hx_tmp4 = false;
            					}
HXDLIN( 317)					if (_hx_tmp4) {
HXLINE( 319)						child->set_mask(null());
            					}
            				}
            			}
HXLINE( 325)			 ::openfl::display::DisplayObject child1;
HXDLIN( 325)			int length = this->_hx___children->length;
HXLINE( 327)			{
HXLINE( 327)				int _g12 = currentInstances->length;
HXDLIN( 327)				int _g6 = length;
HXDLIN( 327)				while((_g12 < _g6)){
HXLINE( 327)					_g12 = (_g12 + (int)1);
HXDLIN( 327)					int i2 = (_g12 - (int)1);
HXLINE( 329)					child1 = this->_hx___children->__get(i2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 333)					{
HXLINE( 333)						int _g22 = (int)0;
HXDLIN( 333)						::Array< ::Dynamic> _g31 = this->_hx___activeInstances;
HXDLIN( 333)						while((_g22 < _g31->length)){
HXLINE( 333)							 ::openfl::display::_MovieClip::FrameSymbolInstance instance3 = _g31->__get(_g22).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 333)							_g22 = (_g22 + (int)1);
HXLINE( 334)							if (hx::IsEq( instance3->displayObject,child1 )) {
HXLINE( 335)								this->removeChild(child1);
            							}
            						}
            					}
            				}
            			}
HXLINE( 341)			this->_hx___lastFrameUpdate = this->_hx___currentFrame;
            		}
HXLINE( 345)		this->super::_hx___enterFrame(deltaTime);
            	}


void MovieClip_obj::_hx___evaluateFrameScripts(int advanceToFrame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_352___evaluateFrameScripts)
HXLINE( 352)		int _g1 = this->_hx___currentFrame;
HXDLIN( 352)		int _g = (advanceToFrame + (int)1);
HXDLIN( 352)		while((_g1 < _g)){
HXLINE( 352)			_g1 = (_g1 + (int)1);
HXDLIN( 352)			int frame = (_g1 - (int)1);
HXLINE( 354)			if ((frame == this->_hx___lastFrameScriptEval)) {
HXLINE( 354)				continue;
            			}
HXLINE( 356)			this->_hx___lastFrameScriptEval = frame;
HXLINE( 357)			this->_hx___currentFrame = frame;
HXLINE( 359)			if (this->_hx___frameScripts->exists(frame)) {
HXLINE( 361)				 ::Dynamic script = this->_hx___frameScripts->get(frame);
HXLINE( 362)				script();
            			}
HXLINE( 366)			if (!(this->_hx___playing)) {
HXLINE( 368)				goto _hx_goto_16;
            			}
            		}
            		_hx_goto_16:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___evaluateFrameScripts,(void))

void MovieClip_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::SpriteSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_377___fromSymbol)
HXLINE( 379)		if (hx::IsNotNull( this->_hx___activeInstances )) {
HXLINE( 379)			return;
            		}
HXLINE( 381)		this->_hx___swf = swf;
HXLINE( 382)		this->_hx___symbol = symbol;
HXLINE( 384)		this->_hx___activeInstances = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 385)		this->_hx___activeInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 386)		this->_hx___currentFrame = (int)1;
HXLINE( 387)		this->_hx___lastFrameScriptEval = (int)-1;
HXLINE( 388)		this->_hx___lastFrameUpdate = (int)-1;
HXLINE( 389)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 391)		int frame;
HXLINE( 392)		 ::openfl::_internal::timeline::Frame frameData;
HXLINE( 398)		{
HXLINE( 398)			int _g1 = (int)0;
HXDLIN( 398)			int _g = this->_hx___symbol->frames->length;
HXDLIN( 398)			while((_g1 < _g)){
HXLINE( 398)				_g1 = (_g1 + (int)1);
HXDLIN( 398)				int i = (_g1 - (int)1);
HXLINE( 400)				frame = (i + (int)1);
HXLINE( 401)				frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >();
HXLINE( 403)				if (hx::IsNotNull( frameData->label )) {
HXLINE( 405)					::Array< ::Dynamic> _hx_tmp = this->_hx___currentLabels;
HXDLIN( 405)					::String frameData1 = frameData->label;
HXDLIN( 405)					_hx_tmp->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,frameData1,(i + (int)1)));
            				}
HXLINE( 409)				if (hx::IsNotNull( frameData->script )) {
HXLINE( 411)					if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 413)						this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 417)					this->_hx___frameScripts->set(frame,frameData->script);
            				}
            				else {
HXLINE( 419)					if (hx::IsNotNull( frameData->scriptSource )) {
HXLINE( 421)						if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 423)							this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            						}
HXLINE( 427)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e = _hx_e;
HXLINE( 475)								if (hx::IsNotNull( this->_hx___symbol->className )) {
HXLINE( 477)									::lime::utils::Log_obj::warn((((((HX_("Unable to evaluate frame script source for symbol \"",a3,42,39,7c) + this->_hx___symbol->className) + HX_("\" frame ",91,af,e7,77)) + frame) + HX_("\n",0a,00,00,00)) + frameData->scriptSource),hx::SourceInfo(HX_("MovieClip.hx",3e,f0,29,2f),477,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            								else {
HXLINE( 481)									::lime::utils::Log_obj::warn((HX_("Unable to evaluate frame script source:\n",1e,90,6f,3e) + frameData->scriptSource),hx::SourceInfo(HX_("MovieClip.hx",3e,f0,29,2f),481,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 491)		int frame1;
HXLINE( 492)		 ::openfl::_internal::timeline::Frame frameData2;
HXLINE( 493)		 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 494)		bool duplicate;
HXLINE( 495)		 ::openfl::_internal::symbols::SWFSymbol symbol1;
HXLINE( 496)		 ::openfl::display::DisplayObject displayObject;
HXLINE( 500)		{
HXLINE( 500)			int _g11 = (int)0;
HXDLIN( 500)			int _g2 = this->_hx___totalFrames;
HXDLIN( 500)			while((_g11 < _g2)){
HXLINE( 500)				_g11 = (_g11 + (int)1);
HXDLIN( 500)				int i1 = (_g11 - (int)1);
HXLINE( 502)				frame1 = (i1 + (int)1);
HXLINE( 503)				frameData2 = this->_hx___symbol->frames->__get(i1).StaticCast<  ::openfl::_internal::timeline::Frame >();
HXLINE( 505)				if (hx::IsNull( frameData2->objects )) {
HXLINE( 505)					continue;
            				}
HXLINE( 507)				{
HXLINE( 507)					int _g21 = (int)0;
HXDLIN( 507)					::Array< ::Dynamic> _g3 = frameData2->objects;
HXDLIN( 507)					while((_g21 < _g3->length)){
HXLINE( 507)						 ::openfl::_internal::timeline::FrameObject frameObject = _g3->__get(_g21).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 507)						_g21 = (_g21 + (int)1);
HXLINE( 509)						if (hx::IsEq( frameObject->type,::openfl::_internal::timeline::FrameObjectType_obj::CREATE_dyn() )) {
HXLINE( 511)							if (this->_hx___activeInstancesByFrameObjectID->exists(frameObject->id)) {
HXLINE( 513)								continue;
            							}
            							else {
HXLINE( 517)								instance = null();
HXLINE( 518)								duplicate = false;
HXLINE( 520)								{
HXLINE( 520)									int _g4 = (int)0;
HXDLIN( 520)									::Array< ::Dynamic> _g5 = this->_hx___activeInstances;
HXDLIN( 520)									while((_g4 < _g5->length)){
HXLINE( 520)										 ::openfl::display::_MovieClip::FrameSymbolInstance activeInstance = _g5->__get(_g4).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 520)										_g4 = (_g4 + (int)1);
HXLINE( 522)										bool _hx_tmp1;
HXDLIN( 522)										bool _hx_tmp2;
HXDLIN( 522)										if (hx::IsNotNull( activeInstance->displayObject )) {
HXLINE( 522)											_hx_tmp2 = (activeInstance->characterID == frameObject->symbol);
            										}
            										else {
HXLINE( 522)											_hx_tmp2 = false;
            										}
HXDLIN( 522)										if (_hx_tmp2) {
HXLINE( 522)											_hx_tmp1 = (activeInstance->depth == frameObject->depth);
            										}
            										else {
HXLINE( 522)											_hx_tmp1 = false;
            										}
HXDLIN( 522)										if (_hx_tmp1) {
HXLINE( 525)											instance = activeInstance;
HXLINE( 526)											duplicate = true;
HXLINE( 527)											goto _hx_goto_21;
            										}
            									}
            									_hx_goto_21:;
            								}
            							}
HXLINE( 535)							if (hx::IsNull( instance )) {
HXLINE( 537)								symbol1 = this->_hx___swf->symbols->get(frameObject->symbol).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >();
HXLINE( 539)								if (hx::IsNotNull( symbol1 )) {
HXLINE( 541)									displayObject = symbol1->_hx___createObject(this->_hx___swf);
HXLINE( 543)									if (hx::IsNotNull( displayObject )) {
HXLINE( 545)										displayObject->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 546)										displayObject->stage = this->stage;
HXLINE( 547)										instance =  ::openfl::display::_MovieClip::FrameSymbolInstance_obj::__alloc( HX_CTX ,frame1,frameObject->id,frameObject->symbol,frameObject->depth,displayObject,frameObject->clipDepth);
            									}
            								}
            							}
HXLINE( 555)							if (hx::IsNotNull( instance )) {
HXLINE( 557)								this->_hx___activeInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 559)								if (!(duplicate)) {
HXLINE( 561)									this->_hx___activeInstances->push(instance);
HXLINE( 562)									this->_hx___updateDisplayObject(instance->displayObject,frameObject);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 607)		if ((this->_hx___totalFrames > (int)1)) {
HXLINE( 609)			this->play();
            		}
HXLINE( 613)		this->_hx___enterFrame((int)0);
HXLINE( 616)		{
HXLINE( 616)			int _g6 = (int)0;
HXDLIN( 616)			::Array< ::String > _g12 = ::Type_obj::getInstanceFields(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)));
HXDLIN( 616)			while((_g6 < _g12->length)){
HXLINE( 616)				::String field = _g12->__get(_g6);
HXDLIN( 616)				_g6 = (_g6 + (int)1);
HXLINE( 618)				{
HXLINE( 618)					int _g22 = (int)0;
HXDLIN( 618)					::Array< ::Dynamic> _g31 = this->_hx___children;
HXDLIN( 618)					while((_g22 < _g31->length)){
HXLINE( 618)						 ::openfl::display::DisplayObject child = _g31->__get(_g22).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 618)						_g22 = (_g22 + (int)1);
HXLINE( 620)						if ((child->get_name() == field)) {
HXLINE( 622)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),field,child);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___fromSymbol,(void))

int MovieClip_obj::_hx___getNextFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_634___getNextFrame)
HXLINE( 638)		 ::openfl::display::MovieClip _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 638)		_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 639)		int nextFrame = this->_hx___currentFrame;
HXDLIN( 639)		int nextFrame1 = (nextFrame + ::Math_obj::floor(((Float)this->_hx___timeElapsed / (Float)this->_hx___frameTime)));
HXLINE( 640)		if ((nextFrame1 < (int)1)) {
HXLINE( 640)			nextFrame1 = (int)1;
            		}
HXLINE( 641)		if ((nextFrame1 > this->_hx___totalFrames)) {
HXLINE( 641)			nextFrame1 = (::Math_obj::floor(hx::Mod((nextFrame1 - (int)1),this->_hx___totalFrames)) + (int)1);
            		}
HXLINE( 642)		this->_hx___timeElapsed = hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
HXLINE( 651)		return nextFrame1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___getNextFrame,return )

void MovieClip_obj::_hx___goto(int frame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_656___goto)
HXLINE( 658)		if (hx::IsNull( this->_hx___symbol )) {
HXLINE( 658)			return;
            		}
HXLINE( 660)		if ((frame < (int)1)) {
HXLINE( 660)			frame = (int)1;
            		}
            		else {
HXLINE( 661)			if ((frame > this->_hx___totalFrames)) {
HXLINE( 661)				frame = this->_hx___totalFrames;
            			}
            		}
HXLINE( 663)		this->_hx___currentFrame = frame;
HXLINE( 664)		this->_hx___enterFrame((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___goto,(void))

int MovieClip_obj::_hx___resolveFrameReference( ::Dynamic frame){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_671___resolveFrameReference)
HXLINE( 671)		if (::Std_obj::is(frame,hx::ClassOf< int >())) {
HXLINE( 673)			return ( (int)(frame) );
            		}
            		else {
HXLINE( 675)			if (::Std_obj::is(frame,hx::ClassOf< ::String >())) {
HXLINE( 677)				::String label = ( (::String)(frame) );
HXLINE( 679)				{
HXLINE( 679)					int _g = (int)0;
HXDLIN( 679)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 679)					while((_g < _g1->length)){
HXLINE( 679)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 679)						_g = (_g + (int)1);
HXLINE( 681)						if ((frameLabel->get_name() == label)) {
HXLINE( 683)							return frameLabel->get_frame();
            						}
            					}
            				}
HXLINE( 688)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Error #2109: Frame label ",f8,f0,5a,8a) + label) + HX_(" not found in scene.",b2,87,08,ff))));
            			}
            			else {
HXLINE( 692)				HX_STACK_DO_THROW((HX_("Invalid type for frame ",e7,83,86,d5) + ::Type_obj::getClassName(frame)));
            			}
            		}
HXLINE( 671)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___resolveFrameReference,return )

int MovieClip_obj::_hx___sortDepths( ::openfl::display::_MovieClip::FrameSymbolInstance a, ::openfl::display::_MovieClip::FrameSymbolInstance b){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_701___sortDepths)
HXLINE( 701)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___sortDepths,return )

void MovieClip_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_706___stopAllMovieClips)
HXLINE( 708)		this->super::_hx___stopAllMovieClips();
HXLINE( 709)		this->stop();
            	}


void MovieClip_obj::_hx___updateDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::timeline::FrameObject frameObject){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_714___updateDisplayObject)
HXLINE( 716)		if (hx::IsNull( displayObject )) {
HXLINE( 716)			return;
            		}
HXLINE( 718)		if (hx::IsNotNull( frameObject->name )) {
HXLINE( 720)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 724)		if (hx::IsNotNull( frameObject->matrix )) {
HXLINE( 726)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 730)		if (hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 732)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
HXLINE( 736)		if (hx::IsNotNull( frameObject->filters )) {
HXLINE( 738)			::Array< ::Dynamic> filters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 740)			{
HXLINE( 740)				int _g = (int)0;
HXDLIN( 740)				::Array< ::Dynamic> _g1 = frameObject->filters;
HXDLIN( 740)				while((_g < _g1->length)){
HXLINE( 740)					 ::openfl::_internal::swf::FilterType filter = _g1->__get(_g).StaticCast<  ::openfl::_internal::swf::FilterType >();
HXDLIN( 740)					_g = (_g + (int)1);
HXLINE( 742)					switch((int)(_hx_getEnumValueIndex(filter))){
            						case (int)0: {
HXLINE( 744)							int quality = filter->_hx_getInt(2);
HXDLIN( 744)							Float blurY = filter->_hx_getFloat(1);
HXDLIN( 744)							Float blurX = filter->_hx_getFloat(0);
HXLINE( 746)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,blurX,blurY,quality));
            						}
            						break;
            						case (int)1: {
HXLINE( 748)							::Array< Float > matrix = filter->_hx_getObject(0).StaticCast< ::Array< Float > >();
HXLINE( 750)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,matrix));
            						}
            						break;
            						case (int)2: {
HXLINE( 752)							bool hideObject = filter->_hx_getBool(10);
HXDLIN( 752)							bool knockout = filter->_hx_getBool(9);
HXDLIN( 752)							bool inner = filter->_hx_getBool(8);
HXDLIN( 752)							int quality1 = filter->_hx_getInt(7);
HXDLIN( 752)							Float strength = filter->_hx_getFloat(6);
HXDLIN( 752)							Float blurY1 = filter->_hx_getFloat(5);
HXDLIN( 752)							Float blurX1 = filter->_hx_getFloat(4);
HXDLIN( 752)							Float alpha = filter->_hx_getFloat(3);
HXDLIN( 752)							int color = filter->_hx_getInt(2);
HXDLIN( 752)							Float angle = filter->_hx_getFloat(1);
HXDLIN( 752)							Float distance = filter->_hx_getFloat(0);
HXLINE( 754)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
            						}
            						break;
            						case (int)3: {
HXLINE( 756)							bool knockout1 = filter->_hx_getBool(7);
HXDLIN( 756)							bool inner1 = filter->_hx_getBool(6);
HXDLIN( 756)							int quality2 = filter->_hx_getInt(5);
HXDLIN( 756)							Float strength1 = filter->_hx_getFloat(4);
HXDLIN( 756)							Float blurY2 = filter->_hx_getFloat(3);
HXDLIN( 756)							Float blurX2 = filter->_hx_getFloat(2);
HXDLIN( 756)							Float alpha1 = filter->_hx_getFloat(1);
HXDLIN( 756)							int color1 = filter->_hx_getInt(0);
HXLINE( 758)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 764)			displayObject->set_filters(filters);
            		}
HXLINE( 768)		if (hx::IsNotNull( frameObject->visible )) {
HXLINE( 770)			displayObject->set_visible(frameObject->visible);
            		}
HXLINE( 774)		if (hx::IsNotNull( frameObject->blendMode )) {
HXLINE( 776)			displayObject->set_blendMode(frameObject->blendMode);
            		}
HXLINE( 780)		bool _hx_tmp = hx::IsNotNull( frameObject->cacheAsBitmap );
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___updateDisplayObject,(void))

void MovieClip_obj::_hx___updateFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_793___updateFrameLabel)
HXLINE( 795)		::Array< ::Dynamic> _hx_tmp = this->_hx___symbol->frames;
HXDLIN( 795)		this->_hx___currentFrameLabel = _hx_tmp->__get((this->_hx___currentFrame - (int)1)).StaticCast<  ::openfl::_internal::timeline::Frame >()->label;
HXLINE( 797)		if (hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 799)			this->_hx___currentLabel = this->_hx___currentFrameLabel;
            		}
            		else {
HXLINE( 803)			this->_hx___currentLabel = null();
HXLINE( 805)			{
HXLINE( 805)				int _g = (int)0;
HXDLIN( 805)				::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 805)				while((_g < _g1->length)){
HXLINE( 805)					 ::openfl::display::FrameLabel label = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 805)					_g = (_g + (int)1);
HXLINE( 807)					int _hx_tmp1 = label->get_frame();
HXDLIN( 807)					if ((_hx_tmp1 < this->_hx___currentFrame)) {
HXLINE( 809)						this->_hx___currentLabel = label->get_name();
            					}
            					else {
HXLINE( 813)						goto _hx_goto_33;
            					}
            				}
            				_hx_goto_33:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateFrameLabel,(void))

int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_831_get_currentFrame)
HXLINE( 831)		return this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

::String MovieClip_obj::get_currentFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_832_get_currentFrameLabel)
HXLINE( 832)		return this->_hx___currentFrameLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrameLabel,return )

::String MovieClip_obj::get_currentLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_833_get_currentLabel)
HXLINE( 833)		return this->_hx___currentLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabel,return )

::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_834_get_currentLabels)
HXLINE( 834)		return this->_hx___currentLabels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )

int MovieClip_obj::get_framesLoaded(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_835_get_framesLoaded)
HXLINE( 835)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_framesLoaded,return )

bool MovieClip_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_836_get_isPlaying)
HXLINE( 836)		return this->_hx___playing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isPlaying,return )

int MovieClip_obj::get_totalFrames(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_837_get_totalFrames)
HXLINE( 837)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalFrames,return )

 ::openfl::_internal::swf::SWFLite MovieClip_obj::_hx___initSWF;

 ::openfl::_internal::symbols::SpriteSymbol MovieClip_obj::_hx___initSymbol;


hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_MARK_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_MARK_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___swf,"__swf");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_VISIT_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___swf,"__swf");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieClip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { return hx::Val( _hx___swf); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__goto") ) { return hx::Val( _hx___goto_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_isPlaying()); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return hx::Val( prevFrame_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalFrames()); }
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return hx::Val( _hx___frameTime); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return hx::Val( gotoAndPlay_dyn()); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return hx::Val( gotoAndStop_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentFrame()); }
		if (HX_FIELD_EQ(inName,"currentLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentLabel()); }
		if (HX_FIELD_EQ(inName,"framesLoaded") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_framesLoaded()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn()); }
		if (HX_FIELD_EQ(inName,"__sortDepths") ) { return hx::Val( _hx___sortDepths_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentLabels()); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return hx::Val( _hx___timeElapsed); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return hx::Val( _hx___totalFrames); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return hx::Val( get_isPlaying_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return hx::Val( _hx___currentFrame); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return hx::Val( _hx___currentLabel); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return hx::Val( _hx___frameScripts); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return hx::Val( addFrameScript_dyn()); }
		if (HX_FIELD_EQ(inName,"__getNextFrame") ) { return hx::Val( _hx___getNextFrame_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return hx::Val( _hx___currentLabels); }
		if (HX_FIELD_EQ(inName,"get_totalFrames") ) { return hx::Val( get_totalFrames_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return hx::Val( get_currentFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"get_currentLabel") ) { return hx::Val( get_currentLabel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_framesLoaded") ) { return hx::Val( get_framesLoaded_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentFrameLabel()); }
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { return hx::Val( _hx___activeInstances); }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { return hx::Val( _hx___lastFrameUpdate); }
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return hx::Val( get_currentLabels_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__updateFrameLabel") ) { return hx::Val( _hx___updateFrameLabel_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return hx::Val( _hx___currentFrameLabel); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { return hx::Val( _hx___lastFrameScriptEval); }
		if (HX_FIELD_EQ(inName,"__updateDisplayObject") ) { return hx::Val( _hx___updateDisplayObject_dyn()); }
		if (HX_FIELD_EQ(inName,"get_currentFrameLabel") ) { return hx::Val( get_currentFrameLabel_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__evaluateFrameScripts") ) { return hx::Val( _hx___evaluateFrameScripts_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__resolveFrameReference") ) { return hx::Val( _hx___resolveFrameReference_dyn()); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { return hx::Val( _hx___activeInstancesByFrameObjectID); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieClip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = _hx___initSWF; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = _hx___initSymbol; return true; }
	}
	return false;
}

hx::Val MovieClip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { _hx___swf=inValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { _hx___activeInstances=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { _hx___lastFrameUpdate=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { _hx___lastFrameScriptEval=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { _hx___activeInstancesByFrameObjectID=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieClip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return true; }
	}
	return false;
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentFrame","\x34","\x5d","\x8f","\x4d"));
	outFields->push(HX_HCSTRING("currentFrameLabel","\x20","\xc4","\x0a","\x2a"));
	outFields->push(HX_HCSTRING("currentLabel","\xfb","\xf2","\xba","\xb6"));
	outFields->push(HX_HCSTRING("currentLabels","\x18","\xa9","\xd9","\x2c"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("framesLoaded","\x4b","\xac","\x61","\x0e"));
	outFields->push(HX_HCSTRING("isPlaying","\xa4","\x8c","\x16","\x8e"));
	outFields->push(HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"));
	outFields->push(HX_HCSTRING("__activeInstances","\x78","\xe9","\x49","\x03"));
	outFields->push(HX_HCSTRING("__activeInstancesByFrameObjectID","\xb8","\x3a","\x9c","\x5b"));
	outFields->push(HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"));
	outFields->push(HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"));
	outFields->push(HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"));
	outFields->push(HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"));
	outFields->push(HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"));
	outFields->push(HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"));
	outFields->push(HX_HCSTRING("__lastFrameScriptEval","\xfe","\xcc","\x8c","\x81"));
	outFields->push(HX_HCSTRING("__lastFrameUpdate","\x40","\x24","\xe4","\x8a"));
	outFields->push(HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"));
	outFields->push(HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"));
	outFields->push(HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(MovieClip_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___activeInstances),HX_HCSTRING("__activeInstances","\x78","\xe9","\x49","\x03")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___activeInstancesByFrameObjectID),HX_HCSTRING("__activeInstancesByFrameObjectID","\xb8","\x3a","\x9c","\x5b")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrame),HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentFrameLabel),HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentLabel),HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___currentLabels),HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___frameScripts),HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___frameTime),HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameScriptEval),HX_HCSTRING("__lastFrameScriptEval","\xfe","\xcc","\x8c","\x81")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameUpdate),HX_HCSTRING("__lastFrameUpdate","\x40","\x24","\xe4","\x8a")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b")},
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(int)offsetof(MovieClip_obj,_hx___swf),HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(int)offsetof(MovieClip_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___timeElapsed),HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___totalFrames),HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MovieClip_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(void *) &MovieClip_obj::_hx___initSWF,HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(void *) &MovieClip_obj::_hx___initSymbol,HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("__activeInstances","\x78","\xe9","\x49","\x03"),
	HX_HCSTRING("__activeInstancesByFrameObjectID","\xb8","\x3a","\x9c","\x5b"),
	HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"),
	HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"),
	HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"),
	HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"),
	HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"),
	HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"),
	HX_HCSTRING("__lastFrameScriptEval","\xfe","\xcc","\x8c","\x81"),
	HX_HCSTRING("__lastFrameUpdate","\x40","\x24","\xe4","\x8a"),
	HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"),
	HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"),
	HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"),
	HX_HCSTRING("addFrameScript","\x77","\x21","\x7f","\xbb"),
	HX_HCSTRING("gotoAndPlay","\x08","\x65","\x84","\xef"),
	HX_HCSTRING("gotoAndStop","\x16","\x27","\x86","\xf1"),
	HX_HCSTRING("nextFrame","\x3a","\x92","\xc8","\xad"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("prevFrame","\x3a","\x18","\xda","\xf1"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__evaluateFrameScripts","\x74","\xac","\x75","\x85"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getNextFrame","\xe4","\xb1","\xdf","\xdd"),
	HX_HCSTRING("__goto","\xc3","\xfc","\x61","\xf3"),
	HX_HCSTRING("__resolveFrameReference","\xca","\x06","\xcb","\x71"),
	HX_HCSTRING("__sortDepths","\x2e","\xe3","\x01","\x03"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__updateDisplayObject","\xb8","\x53","\x1d","\xd8"),
	HX_HCSTRING("__updateFrameLabel","\x10","\xa5","\x51","\x08"),
	HX_HCSTRING("get_currentFrame","\xbd","\x49","\x2e","\x52"),
	HX_HCSTRING("get_currentFrameLabel","\xf7","\xc6","\xb8","\xa8"),
	HX_HCSTRING("get_currentLabel","\x84","\xdf","\x59","\xbb"),
	HX_HCSTRING("get_currentLabels","\x6f","\xb4","\x49","\x33"),
	HX_HCSTRING("get_framesLoaded","\xd4","\x98","\x00","\x13"),
	HX_HCSTRING("get_isPlaying","\x7b","\x60","\x7a","\x4f"),
	HX_HCSTRING("get_totalFrames","\x21","\x5a","\x9d","\x33"),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#endif

hx::Class MovieClip_obj::__mClass;

static ::String MovieClip_obj_sStaticFields[] = {
	HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c"),
	HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b"),
	::String(null())
};

void MovieClip_obj::__register()
{
	hx::Object *dummy = new MovieClip_obj;
	MovieClip_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.MovieClip","\xf6","\x30","\xc3","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieClip_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieClip_obj::__SetStatic;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MovieClip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
