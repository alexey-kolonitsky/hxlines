// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_127_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",127,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_175_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",175,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_170_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",170,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_233_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",233,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_522_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",522,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_543_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",543,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_562_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",562,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_700_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",700,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1426_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1426,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1541_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1541,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1579_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1579,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1604_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1604,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_201_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",201,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_243_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",243,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_295_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",295,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_317_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",317,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_52_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",52,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_54_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",54,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_55_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",55,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_57_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",57,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_127_new)
HXLINE( 129)		this->textField = textField;
HXLINE( 131)		this->width = (int)100;
HXLINE( 132)		this->height = (int)100;
HXLINE( 133)		this->set_text(HX_("",00,00,00,00));
HXLINE( 135)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 137)		this->type = (int)0;
HXLINE( 138)		this->autoSize = (int)2;
HXLINE( 139)		this->embedFonts = false;
HXLINE( 140)		this->selectable = true;
HXLINE( 141)		this->borderColor = (int)0;
HXLINE( 142)		this->border = false;
HXLINE( 143)		this->backgroundColor = (int)16777215;
HXLINE( 144)		this->background = false;
HXLINE( 145)		this->gridFitType = (int)1;
HXLINE( 146)		this->maxChars = (int)0;
HXLINE( 147)		this->multiline = false;
HXLINE( 148)		this->sharpness = (int)0;
HXLINE( 149)		this->scrollH = (int)0;
HXLINE( 150)		this->scrollV = (int)1;
HXLINE( 151)		this->wordWrap = false;
HXLINE( 153)		int length = null();
HXDLIN( 153)		bool fixed = null();
HXDLIN( 153)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 154)		int length1 = null();
HXDLIN( 154)		bool fixed1 = null();
HXDLIN( 154)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 155)		int length2 = null();
HXDLIN( 155)		bool fixed2 = null();
HXDLIN( 155)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null());
HXLINE( 156)		int length3 = null();
HXDLIN( 156)		bool fixed3 = null();
HXDLIN( 156)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null());
HXLINE( 157)		int length4 = null();
HXDLIN( 157)		bool fixed4 = null();
HXDLIN( 157)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null());
HXLINE( 158)		int length5 = null();
HXDLIN( 158)		bool fixed5 = null();
HXDLIN( 158)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null());
HXLINE( 159)		int length6 = null();
HXDLIN( 159)		bool fixed6 = null();
HXDLIN( 159)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null());
HXLINE( 160)		int length7 = null();
HXDLIN( 160)		bool fixed7 = null();
HXDLIN( 160)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null());
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_175_createRestrictRegexp)
HXLINE( 177)			::Array< ::String > declined1 = declined;
HXDLIN( 177)			int accepted1 = (int)0;
HXDLIN( 177)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 177)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 178)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_170_createRestrictRegexp)
HXLINE( 172)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 173)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 175)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 182)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 184)		if ((accepted.length > (int)0)) {
HXLINE( 186)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 190)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 192)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 196)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_233_getBounds)
HXLINE( 235)		int padding;
HXDLIN( 235)		if (this->border) {
HXLINE( 235)			padding = (int)1;
            		}
            		else {
HXLINE( 235)			padding = (int)0;
            		}
HXLINE( 237)		this->bounds->width = (this->width + padding);
HXLINE( 238)		this->bounds->height = (this->height + padding);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_522_getLine)
HXLINE( 524)		bool _hx_tmp;
HXDLIN( 524)		if ((index >= (int)0)) {
HXLINE( 524)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 524)			_hx_tmp = true;
            		}
HXDLIN( 524)		if (_hx_tmp) {
HXLINE( 526)			return null();
            		}
HXLINE( 530)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 532)			return this->text;
            		}
            		else {
HXLINE( 536)			::String _hx_tmp1 = this->text;
HXDLIN( 536)			int _hx_tmp2;
HXDLIN( 536)			if ((index > (int)0)) {
HXLINE( 536)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 536)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 536)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 530)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_543_getLineBreakIndex)
HXLINE( 545)		int br = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("<br>",b2,8d,f3,27),startIndex);
HXLINE( 546)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 547)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 549)		bool _hx_tmp;
HXDLIN( 549)		if ((cr == (int)-1)) {
HXLINE( 549)			_hx_tmp = (br == (int)-1);
            		}
            		else {
HXLINE( 549)			_hx_tmp = false;
            		}
HXDLIN( 549)		if (_hx_tmp) {
HXLINE( 549)			return lf;
            		}
HXLINE( 550)		bool _hx_tmp1;
HXDLIN( 550)		if ((lf == (int)-1)) {
HXLINE( 550)			_hx_tmp1 = (br == (int)-1);
            		}
            		else {
HXLINE( 550)			_hx_tmp1 = false;
            		}
HXDLIN( 550)		if (_hx_tmp1) {
HXLINE( 550)			return cr;
            		}
HXLINE( 551)		bool _hx_tmp2;
HXDLIN( 551)		if ((lf == (int)-1)) {
HXLINE( 551)			_hx_tmp2 = (cr == (int)-1);
            		}
            		else {
HXLINE( 551)			_hx_tmp2 = false;
            		}
HXDLIN( 551)		if (_hx_tmp2) {
HXLINE( 551)			return br;
            		}
HXLINE( 553)		if ((cr == (int)-1)) {
HXLINE( 553)			return ::Std_obj::_hx_int(::Math_obj::min(br,lf));
            		}
HXLINE( 554)		if ((lf == (int)-1)) {
HXLINE( 554)			return ::Std_obj::_hx_int(::Math_obj::min(br,cr));
            		}
HXLINE( 555)		if ((br == (int)-1)) {
HXLINE( 555)			return ::Std_obj::_hx_int(::Math_obj::min(cr,lf));
            		}
HXLINE( 557)		return ::Std_obj::_hx_int(::Math_obj::min(::Math_obj::min(cr,lf),br));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_562_getLineMeasurements)
HXLINE( 564)		this->lineAscents->set_length((int)0);
HXLINE( 565)		this->lineDescents->set_length((int)0);
HXLINE( 566)		this->lineLeadings->set_length((int)0);
HXLINE( 567)		this->lineHeights->set_length((int)0);
HXLINE( 568)		this->lineWidths->set_length((int)0);
HXLINE( 570)		Float currentLineAscent = ((Float)0.0);
HXLINE( 571)		Float currentLineDescent = ((Float)0.0);
HXLINE( 572)		 ::Dynamic currentLineLeading = null();
HXLINE( 573)		Float currentLineHeight = ((Float)0.0);
HXLINE( 574)		Float currentLineWidth = ((Float)0.0);
HXLINE( 575)		Float currentTextHeight = ((Float)0.0);
HXLINE( 577)		this->textWidth = (int)0;
HXLINE( 578)		this->textHeight = (int)0;
HXLINE( 579)		this->numLines = (int)1;
HXLINE( 580)		this->bottomScrollV = (int)0;
HXLINE( 581)		this->maxScrollH = (int)0;
HXLINE( 583)		{
HXLINE( 583)			int _g = (int)0;
HXDLIN( 583)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 583)			while((_g < _g1->get_length())){
HXLINE( 583)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 583)				_g = (_g + (int)1);
HXLINE( 585)				while(true){
HXLINE( 585)					int group1 = group->lineIndex;
HXDLIN( 585)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 585)						goto _hx_goto_8;
            					}
HXLINE( 587)					this->lineAscents->push(currentLineAscent);
HXLINE( 588)					this->lineDescents->push(currentLineDescent);
HXLINE( 589)					{
HXLINE( 589)						Float _hx_tmp;
HXDLIN( 589)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 589)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 589)							_hx_tmp = (int)0;
            						}
HXDLIN( 589)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 590)					this->lineHeights->push(currentLineHeight);
HXLINE( 591)					this->lineWidths->push(currentLineWidth);
HXLINE( 593)					currentLineAscent = (int)0;
HXLINE( 594)					currentLineDescent = (int)0;
HXLINE( 595)					currentLineLeading = null();
HXLINE( 596)					currentLineHeight = (int)0;
HXLINE( 597)					currentLineWidth = (int)0;
HXLINE( 599)					this->numLines++;
HXLINE( 601)					Float _hx_tmp1 = this->textHeight;
HXDLIN( 601)					if ((_hx_tmp1 <= (this->height - (int)2))) {
HXLINE( 603)						this->bottomScrollV++;
            					}
            				}
            				_hx_goto_8:;
HXLINE( 609)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 610)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 612)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 614)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 618)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 622)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 623)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 625)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 627)					this->textWidth = currentLineWidth;
            				}
HXLINE( 631)				currentTextHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
HXLINE( 633)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 635)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 641)		this->lineAscents->push(currentLineAscent);
HXLINE( 642)		this->lineDescents->push(currentLineDescent);
HXLINE( 643)		{
HXLINE( 643)			Float _hx_tmp2;
HXDLIN( 643)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 643)				_hx_tmp2 = currentLineLeading;
            			}
            			else {
HXLINE( 643)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 643)			this->lineLeadings->push(_hx_tmp2);
            		}
HXLINE( 644)		this->lineHeights->push(currentLineHeight);
HXLINE( 645)		this->lineWidths->push(currentLineWidth);
HXLINE( 647)		if ((this->numLines == (int)1)) {
HXLINE( 649)			this->bottomScrollV = (int)1;
HXLINE( 651)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 653)				 ::openfl::_internal::text::TextEngine _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 653)				_hx_tmp3->textHeight = (_hx_tmp3->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 657)			Float _hx_tmp4 = this->textHeight;
HXDLIN( 657)			if ((_hx_tmp4 <= (this->height - (int)2))) {
HXLINE( 659)				this->bottomScrollV++;
            			}
            		}
HXLINE( 663)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 665)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 665)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 669)				if (!(this->wordWrap)) {
HXLINE( 671)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 675)				this->height = (this->textHeight + (int)4);
HXLINE( 676)				this->bottomScrollV = this->numLines;
HXLINE( 667)				goto _hx_goto_9;
            			}
            			/* default */{
            			}
            			_hx_goto_9:;
            		}
HXLINE( 685)		Float _hx_tmp5 = this->textWidth;
HXDLIN( 685)		if ((_hx_tmp5 > (this->width - (int)4))) {
HXLINE( 687)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 691)			this->maxScrollH = (int)0;
            		}
HXLINE( 695)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_700_getLayoutGroups)
HXLINE( 700)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 702)		this->layoutGroups->set_length((int)0);
HXLINE( 704)		int rangeIndex = (int)-1;
HXLINE( 705)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 706)		 ::lime::text::Font font = null();
HXLINE( 708)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 710)		int leading = (int)0;
HXLINE( 711)		Float ascent = ((Float)0.0);
HXDLIN( 711)		Float maxAscent = ((Float)0.0);
HXLINE( 712)		Float descent = ((Float)0.0);
HXLINE( 714)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 714)		::Array< Float > advances = null();
HXLINE( 715)		Float widthValue = ((Float)0.0);
HXDLIN( 715)		Float heightValue = ((Float)0.0);
HXDLIN( 715)		Float maxHeightValue = ((Float)0.0);
HXLINE( 717)		int previousSpaceIndex = (int)-2;
HXLINE( 718)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 719)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 721)		Float offsetX = ((Float)2.0);
HXLINE( 722)		Float offsetY = ((Float)2.0);
HXLINE( 723)		int textIndex = (int)0;
HXLINE( 724)		int lineIndex = (int)0;
HXLINE( 725)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1063)		{
HXLINE(1063)			if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1063)				rangeIndex = (rangeIndex + (int)1);
HXDLIN(1063)				formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1063)				currentFormat->_hx___merge(formatRange->format);
HXDLIN(1063)				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1063)				if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1063)					ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1063)					descent = (currentFormat->size * currentFormat->_hx___descent);
            				}
            				else {
HXLINE(1063)					if (hx::IsNotNull( font )) {
HXLINE(1063)						int ascent1 = font->get_ascender();
HXDLIN(1063)						Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN(1063)						ascent = (ascent2 * currentFormat->size);
HXDLIN(1063)						int descent1 = font->get_descender();
HXDLIN(1063)						Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN(1063)						descent = ::Math_obj::abs((descent2 * currentFormat->size));
            					}
            					else {
HXLINE(1063)						ascent = currentFormat->size;
HXDLIN(1063)						descent = (currentFormat->size * ((Float)0.185));
            					}
            				}
HXDLIN(1063)				leading = currentFormat->leading;
HXDLIN(1063)				heightValue = ((ascent + descent) + leading);
            			}
HXDLIN(1063)			if ((heightValue > maxHeightValue)) {
HXLINE(1063)				maxHeightValue = heightValue;
            			}
HXDLIN(1063)			if ((ascent > maxAscent)) {
HXLINE(1063)				maxAscent = ascent;
            			}
            		}
HXLINE(1065)		lineFormat = formatRange->format;
HXLINE(1066)		bool wrap;
HXLINE(1067)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + (int)1);
HXLINE(1069)		while((textIndex < maxLoops)){
HXLINE(1071)			bool _hx_tmp;
HXDLIN(1071)			bool _hx_tmp1;
HXDLIN(1071)			if ((breakIndex > (int)-1)) {
HXLINE(1071)				if ((spaceIndex != (int)-1)) {
HXLINE(1071)					_hx_tmp1 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1071)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1071)				_hx_tmp1 = false;
            			}
HXDLIN(1071)			if (_hx_tmp1) {
HXLINE(1071)				_hx_tmp = (formatRange->end >= breakIndex);
            			}
            			else {
HXLINE(1071)				_hx_tmp = false;
            			}
HXDLIN(1071)			if (_hx_tmp) {
HXLINE(1074)				if ((textIndex <= breakIndex)) {
HXLINE(1076)					bool _hx_tmp2;
HXDLIN(1076)					if (this->wordWrap) {
HXLINE(1076)						_hx_tmp2 = (previousSpaceIndex <= textIndex);
            					}
            					else {
HXLINE(1076)						_hx_tmp2 = false;
            					}
HXDLIN(1076)					if (_hx_tmp2) {
HXLINE(1078)						::String text = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,breakIndex);
HXDLIN(1078)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1078)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1078)						Float width = ((Float)0.0);
HXDLIN(1078)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1078)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1078)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1078)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1078)						_gthis->_hx___textLayout->set_text(text);
HXDLIN(1078)						{
HXLINE(1078)							int _g = (int)0;
HXDLIN(1078)							::Array< ::Dynamic> _g1 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1078)							while((_g < _g1->length)){
HXLINE(1078)								 ::lime::text::GlyphPosition position = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1078)								_g = (_g + (int)1);
HXDLIN(1078)								width = (width + position->advance->x);
            							}
            						}
HXDLIN(1078)						Float tempWidth = width;
HXDLIN(1078)						while(((offsetX + tempWidth) > (_gthis->width - (int)2))){
HXLINE(1078)							int i = (int)1;
HXDLIN(1078)							while(((textIndex + i) < (breakIndex + (int)1))){
HXLINE(1078)								::String text1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i);
HXDLIN(1078)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1078)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1078)								Float width1 = ((Float)0.0);
HXDLIN(1078)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1078)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1078)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1078)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1078)								_gthis->_hx___textLayout->set_text(text1);
HXDLIN(1078)								{
HXLINE(1078)									int _g2 = (int)0;
HXDLIN(1078)									::Array< ::Dynamic> _g11 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1078)									while((_g2 < _g11->length)){
HXLINE(1078)										 ::lime::text::GlyphPosition position1 = _g11->__get(_g2).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1078)										_g2 = (_g2 + (int)1);
HXDLIN(1078)										width1 = (width1 + position1->advance->x);
            									}
            								}
HXDLIN(1078)								tempWidth = width1;
HXDLIN(1078)								if (((offsetX + tempWidth) > (_gthis->width - (int)2))) {
HXLINE(1078)									i = (i - (int)1);
HXDLIN(1078)									goto _hx_goto_14;
            								}
HXDLIN(1078)								i = (i + (int)1);
            							}
            							_hx_goto_14:;
HXDLIN(1078)							bool _hx_tmp3;
HXDLIN(1078)							if ((i == (int)0)) {
HXLINE(1078)								_hx_tmp3 = (tempWidth > (_gthis->width - (int)4));
            							}
            							else {
HXLINE(1078)								_hx_tmp3 = false;
            							}
HXDLIN(1078)							if (_hx_tmp3) {
HXLINE(1078)								i = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            							}
HXDLIN(1078)							if ((i == (int)0)) {
HXLINE(1078)								offsetX = (int)2;
HXDLIN(1078)								offsetY = (offsetY + layoutGroup->height);
HXDLIN(1078)								lineIndex = (lineIndex + (int)1);
HXDLIN(1078)								goto _hx_goto_13;
            							}
            							else {
HXLINE(1078)								{
HXLINE(1078)									int endIndex = (textIndex + i);
HXDLIN(1078)									bool _hx_tmp4;
HXDLIN(1078)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1078)										_hx_tmp4 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1078)										_hx_tmp4 = true;
            									}
HXDLIN(1078)									if (_hx_tmp4) {
HXLINE(1078)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex);
HXDLIN(1078)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1078)										layoutGroup->format = formatRange->format;
HXDLIN(1078)										layoutGroup->startIndex = textIndex;
HXDLIN(1078)										layoutGroup->endIndex = endIndex;
            									}
            								}
HXDLIN(1078)								::String text2 = _gthis->text;
HXDLIN(1078)								::Array< Float > advances1 = ::Array_obj< Float >::__new(0);
HXDLIN(1078)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1078)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1078)								Float width2 = ((Float)0.0);
HXDLIN(1078)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1078)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1078)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1078)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1078)								 ::lime::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1078)								_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,(textIndex + i)));
HXDLIN(1078)								{
HXLINE(1078)									int _g3 = (int)0;
HXDLIN(1078)									::Array< ::Dynamic> _g12 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1078)									while((_g3 < _g12->length)){
HXLINE(1078)										 ::lime::text::GlyphPosition position2 = _g12->__get(_g3).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1078)										_g3 = (_g3 + (int)1);
HXDLIN(1078)										advances1->push(position2->advance->x);
            									}
            								}
HXDLIN(1078)								layoutGroup->advances = advances1;
HXDLIN(1078)								layoutGroup->offsetX = offsetX;
HXDLIN(1078)								layoutGroup->ascent = ascent;
HXDLIN(1078)								layoutGroup->descent = descent;
HXDLIN(1078)								layoutGroup->leading = leading;
HXDLIN(1078)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1078)								layoutGroup->offsetY = offsetY;
HXDLIN(1078)								::Array< Float > advances2 = layoutGroup->advances;
HXDLIN(1078)								Float width3 = ((Float)0.0);
HXDLIN(1078)								{
HXLINE(1078)									int _g4 = (int)0;
HXDLIN(1078)									while((_g4 < advances2->length)){
HXLINE(1078)										Float advance = advances2->__get(_g4);
HXDLIN(1078)										_g4 = (_g4 + (int)1);
HXDLIN(1078)										width3 = (width3 + advance);
            									}
            								}
HXDLIN(1078)								layoutGroup->width = width3;
HXDLIN(1078)								layoutGroup->height = heightValue;
HXDLIN(1078)								layoutGroup = null();
HXDLIN(1078)								{
HXLINE(1078)									if ((ascent > maxAscent)) {
HXLINE(1078)										maxAscent = ascent;
            									}
HXDLIN(1078)									if ((heightValue > maxHeightValue)) {
HXLINE(1078)										maxHeightValue = heightValue;
            									}
HXDLIN(1078)									{
HXLINE(1078)										int _g5 = (int)0;
HXDLIN(1078)										 ::openfl::_Vector::ObjectVector _g13 = _gthis->layoutGroups;
HXDLIN(1078)										while((_g5 < _g13->get_length())){
HXLINE(1078)											 ::openfl::_internal::text::TextLayoutGroup lg = _g13->get(_g5).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1078)											_g5 = (_g5 + (int)1);
HXDLIN(1078)											if ((lg->lineIndex < lineIndex)) {
HXLINE(1078)												continue;
            											}
HXDLIN(1078)											if ((lg->lineIndex > lineIndex)) {
HXLINE(1078)												goto _hx_goto_18;
            											}
HXDLIN(1078)											lg->ascent = maxAscent;
HXDLIN(1078)											lg->height = maxHeightValue;
            										}
            										_hx_goto_18:;
            									}
HXDLIN(1078)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1078)									maxAscent = ((Float)0.0);
HXDLIN(1078)									maxHeightValue = ((Float)0.0);
HXDLIN(1078)									lineIndex = (lineIndex + (int)1);
HXDLIN(1078)									offsetX = (int)2;
            								}
HXDLIN(1078)								textIndex = (textIndex + i);
HXDLIN(1078)								::String text3 = _gthis->text;
HXDLIN(1078)								::Array< Float > advances3 = ::Array_obj< Float >::__new(0);
HXDLIN(1078)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1078)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1078)								Float width4 = ((Float)0.0);
HXDLIN(1078)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1078)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1078)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1078)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1078)								 ::lime::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1078)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,textIndex,breakIndex));
HXDLIN(1078)								{
HXLINE(1078)									int _g6 = (int)0;
HXDLIN(1078)									::Array< ::Dynamic> _g14 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1078)									while((_g6 < _g14->length)){
HXLINE(1078)										 ::lime::text::GlyphPosition position3 = _g14->__get(_g6).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1078)										_g6 = (_g6 + (int)1);
HXDLIN(1078)										advances3->push(position3->advance->x);
            									}
            								}
HXDLIN(1078)								advances = advances3;
HXDLIN(1078)								Float width5 = ((Float)0.0);
HXDLIN(1078)								{
HXLINE(1078)									int _g7 = (int)0;
HXDLIN(1078)									while((_g7 < advances->length)){
HXLINE(1078)										Float advance1 = advances->__get(_g7);
HXDLIN(1078)										_g7 = (_g7 + (int)1);
HXDLIN(1078)										width5 = (width5 + advance1);
            									}
            								}
HXDLIN(1078)								widthValue = width5;
HXDLIN(1078)								tempWidth = widthValue;
            							}
            						}
            						_hx_goto_13:;
            					}
HXLINE(1082)					bool _hx_tmp5;
HXDLIN(1082)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1082)						_hx_tmp5 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1082)						_hx_tmp5 = true;
            					}
HXDLIN(1082)					if (_hx_tmp5) {
HXLINE(1082)						layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1082)						::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            					}
            					else {
HXLINE(1082)						layoutGroup->format = formatRange->format;
HXDLIN(1082)						layoutGroup->startIndex = textIndex;
HXDLIN(1082)						layoutGroup->endIndex = breakIndex;
            					}
HXLINE(1084)					::String text4 = this->text;
HXDLIN(1084)					::Array< Float > advances4 = ::Array_obj< Float >::__new(0);
HXDLIN(1084)					if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1084)						_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            					}
HXDLIN(1084)					Float width6 = ((Float)0.0);
HXDLIN(1084)					_gthis->_hx___textLayout->set_text(null());
HXDLIN(1084)					_gthis->_hx___textLayout->set_font(font);
HXDLIN(1084)					if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1084)						_gthis->_hx___textLayout->set_size(formatRange->format->size);
            					}
HXDLIN(1084)					 ::lime::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1084)					_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,breakIndex));
HXDLIN(1084)					{
HXLINE(1084)						int _g8 = (int)0;
HXDLIN(1084)						::Array< ::Dynamic> _g15 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1084)						while((_g8 < _g15->length)){
HXLINE(1084)							 ::lime::text::GlyphPosition position4 = _g15->__get(_g8).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1084)							_g8 = (_g8 + (int)1);
HXDLIN(1084)							advances4->push(position4->advance->x);
            						}
            					}
HXDLIN(1084)					layoutGroup->advances = advances4;
HXLINE(1085)					layoutGroup->offsetX = offsetX;
HXLINE(1086)					layoutGroup->ascent = ascent;
HXLINE(1087)					layoutGroup->descent = descent;
HXLINE(1088)					layoutGroup->leading = leading;
HXLINE(1089)					layoutGroup->lineIndex = lineIndex;
HXLINE(1090)					layoutGroup->offsetY = offsetY;
HXLINE(1091)					::Array< Float > advances5 = layoutGroup->advances;
HXDLIN(1091)					Float width7 = ((Float)0.0);
HXDLIN(1091)					{
HXLINE(1091)						int _g9 = (int)0;
HXDLIN(1091)						while((_g9 < advances5->length)){
HXLINE(1091)							Float advance2 = advances5->__get(_g9);
HXDLIN(1091)							_g9 = (_g9 + (int)1);
HXDLIN(1091)							width7 = (width7 + advance2);
            						}
            					}
HXDLIN(1091)					layoutGroup->width = width7;
HXLINE(1092)					layoutGroup->height = heightValue;
HXLINE(1094)					layoutGroup = null();
            				}
            				else {
HXLINE(1096)					bool _hx_tmp6;
HXDLIN(1096)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1096)						_hx_tmp6 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1096)						_hx_tmp6 = false;
            					}
HXDLIN(1096)					if (_hx_tmp6) {
HXLINE(1099)						 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1099)						::Array< Float > layoutGroup2 = layoutGroup->advances;
HXDLIN(1099)						layoutGroup1->width = (layoutGroup1->width - layoutGroup2->__get((layoutGroup->advances->length - (int)1)));
HXLINE(1101)						layoutGroup = null();
            					}
            				}
HXLINE(1105)				if ((formatRange->end == breakIndex)) {
HXLINE(1107)					{
HXLINE(1107)						if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1107)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1107)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1107)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1107)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1107)							if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1107)								ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1107)								descent = (currentFormat->size * currentFormat->_hx___descent);
            							}
            							else {
HXLINE(1107)								if (hx::IsNotNull( font )) {
HXLINE(1107)									int ascent3 = font->get_ascender();
HXDLIN(1107)									Float ascent4 = ((Float)ascent3 / (Float)font->get_unitsPerEM());
HXDLIN(1107)									ascent = (ascent4 * currentFormat->size);
HXDLIN(1107)									int descent3 = font->get_descender();
HXDLIN(1107)									Float descent4 = ((Float)descent3 / (Float)font->get_unitsPerEM());
HXDLIN(1107)									descent = ::Math_obj::abs((descent4 * currentFormat->size));
            								}
            								else {
HXLINE(1107)									ascent = currentFormat->size;
HXDLIN(1107)									descent = (currentFormat->size * ((Float)0.185));
            								}
            							}
HXDLIN(1107)							leading = currentFormat->leading;
HXDLIN(1107)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN(1107)						if ((heightValue > maxHeightValue)) {
HXLINE(1107)							maxHeightValue = heightValue;
            						}
HXDLIN(1107)						if ((ascent > maxAscent)) {
HXLINE(1107)							maxAscent = ascent;
            						}
            					}
HXLINE(1108)					lineFormat = formatRange->format;
            				}
HXLINE(1112)				if ((breakIndex >= (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - (int)1))) {
HXLINE(1115)					offsetY = (offsetY - maxHeightValue);
            				}
HXLINE(1119)				{
HXLINE(1119)					if ((ascent > maxAscent)) {
HXLINE(1119)						maxAscent = ascent;
            					}
HXDLIN(1119)					if ((heightValue > maxHeightValue)) {
HXLINE(1119)						maxHeightValue = heightValue;
            					}
HXDLIN(1119)					{
HXLINE(1119)						int _g10 = (int)0;
HXDLIN(1119)						 ::openfl::_Vector::ObjectVector _g16 = _gthis->layoutGroups;
HXDLIN(1119)						while((_g10 < _g16->get_length())){
HXLINE(1119)							 ::openfl::_internal::text::TextLayoutGroup lg1 = _g16->get(_g10).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1119)							_g10 = (_g10 + (int)1);
HXDLIN(1119)							if ((lg1->lineIndex < lineIndex)) {
HXLINE(1119)								continue;
            							}
HXDLIN(1119)							if ((lg1->lineIndex > lineIndex)) {
HXLINE(1119)								goto _hx_goto_23;
            							}
HXDLIN(1119)							lg1->ascent = maxAscent;
HXDLIN(1119)							lg1->height = maxHeightValue;
            						}
            						_hx_goto_23:;
            					}
HXDLIN(1119)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1119)					maxAscent = ((Float)0.0);
HXDLIN(1119)					maxHeightValue = ((Float)0.0);
HXDLIN(1119)					lineIndex = (lineIndex + (int)1);
HXDLIN(1119)					offsetX = (int)2;
            				}
HXLINE(1121)				textIndex = (breakIndex + (int)1);
HXLINE(1122)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1124)				bool _hx_tmp7;
HXDLIN(1124)				bool _hx_tmp8;
HXDLIN(1124)				if ((formatRange->end >= spaceIndex)) {
HXLINE(1124)					_hx_tmp8 = (spaceIndex > (int)-1);
            				}
            				else {
HXLINE(1124)					_hx_tmp8 = false;
            				}
HXDLIN(1124)				if (_hx_tmp8) {
HXLINE(1124)					_hx_tmp7 = (textIndex < formatRange->end);
            				}
            				else {
HXLINE(1124)					_hx_tmp7 = false;
            				}
HXDLIN(1124)				if (_hx_tmp7) {
HXLINE(1127)					bool _hx_tmp9;
HXDLIN(1127)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1127)						_hx_tmp9 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1127)						_hx_tmp9 = false;
            					}
HXDLIN(1127)					if (_hx_tmp9) {
HXLINE(1129)						layoutGroup = null();
            					}
HXLINE(1133)					wrap = false;
HXLINE(1135)					while((textIndex != formatRange->end)){
HXLINE(1139)						int endIndex1 = (int)-1;
HXLINE(1141)						if ((spaceIndex == (int)-1)) {
HXLINE(1143)							endIndex1 = breakIndex;
            						}
            						else {
HXLINE(1149)							endIndex1 = (spaceIndex + (int)1);
HXLINE(1151)							bool _hx_tmp10;
HXDLIN(1151)							if ((breakIndex > (int)-1)) {
HXLINE(1151)								_hx_tmp10 = (breakIndex < endIndex1);
            							}
            							else {
HXLINE(1151)								_hx_tmp10 = false;
            							}
HXDLIN(1151)							if (_hx_tmp10) {
HXLINE(1153)								endIndex1 = breakIndex;
            							}
            						}
HXLINE(1159)						bool _hx_tmp11;
HXDLIN(1159)						if ((endIndex1 != (int)-1)) {
HXLINE(1159)							_hx_tmp11 = (endIndex1 > formatRange->end);
            						}
            						else {
HXLINE(1159)							_hx_tmp11 = true;
            						}
HXDLIN(1159)						if (_hx_tmp11) {
HXLINE(1161)							endIndex1 = formatRange->end;
            						}
HXLINE(1165)						::String text5 = this->text;
HXDLIN(1165)						::Array< Float > advances6 = ::Array_obj< Float >::__new(0);
HXDLIN(1165)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1165)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1165)						Float width8 = ((Float)0.0);
HXDLIN(1165)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1165)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1165)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1165)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1165)						 ::lime::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1165)						_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,textIndex,endIndex1));
HXDLIN(1165)						{
HXLINE(1165)							int _g17 = (int)0;
HXDLIN(1165)							::Array< ::Dynamic> _g18 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1165)							while((_g17 < _g18->length)){
HXLINE(1165)								 ::lime::text::GlyphPosition position5 = _g18->__get(_g17).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1165)								_g17 = (_g17 + (int)1);
HXDLIN(1165)								advances6->push(position5->advance->x);
            							}
            						}
HXDLIN(1165)						advances = advances6;
HXLINE(1166)						Float width9 = ((Float)0.0);
HXDLIN(1166)						{
HXLINE(1166)							int _g19 = (int)0;
HXDLIN(1166)							while((_g19 < advances->length)){
HXLINE(1166)								Float advance3 = advances->__get(_g19);
HXDLIN(1166)								_g19 = (_g19 + (int)1);
HXDLIN(1166)								width9 = (width9 + advance3);
            							}
            						}
HXDLIN(1166)						widthValue = width9;
HXLINE(1168)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE(1170)							bool _hx_tmp12;
HXDLIN(1170)							if ((advances->length > (int)0)) {
HXLINE(1170)								_hx_tmp12 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1170)								_hx_tmp12 = false;
            							}
HXDLIN(1170)							if (_hx_tmp12) {
HXLINE(1173)								textIndex = (textIndex + (int)1);
HXLINE(1175)								 ::Dynamic spaceWidth = advances->shift();
HXLINE(1176)								widthValue = (widthValue - spaceWidth);
HXLINE(1177)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1181)							bool _hx_tmp13;
HXDLIN(1181)							if ((advances->length > (int)0)) {
HXLINE(1181)								_hx_tmp13 = (endIndex1 == (spaceIndex + (int)1));
            							}
            							else {
HXLINE(1181)								_hx_tmp13 = false;
            							}
HXDLIN(1181)							if (_hx_tmp13) {
HXLINE(1184)								endIndex1 = (endIndex1 - (int)1);
HXLINE(1186)								 ::Dynamic spaceWidth1 = advances->pop();
HXLINE(1187)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1193)						if (this->wordWrap) {
HXLINE(1195)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE(1197)								wrap = true;
            							}
            						}
HXLINE(1203)						if (wrap) {
HXLINE(1205)							bool _hx_tmp14;
HXDLIN(1205)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1205)								if (hx::IsNull( layoutGroup )) {
HXLINE(1205)									_hx_tmp14 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1205)									_hx_tmp14 = true;
            								}
            							}
            							else {
HXLINE(1205)								_hx_tmp14 = false;
            							}
HXDLIN(1205)							if (_hx_tmp14) {
HXLINE(1207)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1208)								if (hx::IsNull( previous )) {
HXLINE(1209)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1209)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1213)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1213)								::Array< Float > previous2 = previous->advances;
HXDLIN(1213)								previous1->width = (previous1->width - previous2->__get((previous->advances->length - (int)1)));
HXLINE(1214)								previous->endIndex--;
            							}
HXLINE(1218)							int i1 = (this->layoutGroups->get_length() - (int)1);
HXLINE(1219)							int offsetCount = (int)0;
HXLINE(1221)							while(true){
HXLINE(1223)								layoutGroup = this->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1225)								bool _hx_tmp15;
HXDLIN(1225)								if ((i1 > (int)0)) {
HXLINE(1225)									_hx_tmp15 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1225)									_hx_tmp15 = false;
            								}
HXDLIN(1225)								if (_hx_tmp15) {
HXLINE(1227)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1231)									goto _hx_goto_27;
            								}
HXLINE(1235)								i1 = (i1 - (int)1);
            							}
            							_hx_goto_27:;
HXLINE(1239)							if ((textIndex == (previousSpaceIndex + (int)1))) {
HXLINE(1241)								if ((ascent > maxAscent)) {
HXLINE(1241)									maxAscent = ascent;
            								}
HXDLIN(1241)								if ((heightValue > maxHeightValue)) {
HXLINE(1241)									maxHeightValue = heightValue;
            								}
HXDLIN(1241)								{
HXLINE(1241)									int _g20 = (int)0;
HXDLIN(1241)									 ::openfl::_Vector::ObjectVector _g110 = _gthis->layoutGroups;
HXDLIN(1241)									while((_g20 < _g110->get_length())){
HXLINE(1241)										 ::openfl::_internal::text::TextLayoutGroup lg2 = _g110->get(_g20).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1241)										_g20 = (_g20 + (int)1);
HXDLIN(1241)										if ((lg2->lineIndex < lineIndex)) {
HXLINE(1241)											continue;
            										}
HXDLIN(1241)										if ((lg2->lineIndex > lineIndex)) {
HXLINE(1241)											goto _hx_goto_28;
            										}
HXDLIN(1241)										lg2->ascent = maxAscent;
HXDLIN(1241)										lg2->height = maxHeightValue;
            									}
            									_hx_goto_28:;
            								}
HXDLIN(1241)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1241)								maxAscent = ((Float)0.0);
HXDLIN(1241)								maxHeightValue = ((Float)0.0);
HXDLIN(1241)								lineIndex = (lineIndex + (int)1);
HXDLIN(1241)								offsetX = (int)2;
            							}
HXLINE(1245)							offsetX = (int)2;
HXLINE(1247)							if ((offsetCount > (int)0)) {
HXLINE(1249)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1249)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1251)								{
HXLINE(1251)									int _g111 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1251)									int _g21 = this->layoutGroups->get_length();
HXDLIN(1251)									while((_g111 < _g21)){
HXLINE(1251)										_g111 = (_g111 + (int)1);
HXDLIN(1251)										int i2 = (_g111 - (int)1);
HXLINE(1253)										layoutGroup = this->layoutGroups->get(i2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1254)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1254)										layoutGroup3->offsetX = (layoutGroup3->offsetX - bumpX);
HXLINE(1255)										layoutGroup->offsetY = offsetY;
HXLINE(1256)										layoutGroup->lineIndex = lineIndex;
HXLINE(1257)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1263)							{
HXLINE(1263)								::String text6 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,endIndex1);
HXDLIN(1263)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1263)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1263)								Float width10 = ((Float)0.0);
HXDLIN(1263)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1263)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1263)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1263)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1263)								_gthis->_hx___textLayout->set_text(text6);
HXDLIN(1263)								{
HXLINE(1263)									int _g22 = (int)0;
HXDLIN(1263)									::Array< ::Dynamic> _g112 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1263)									while((_g22 < _g112->length)){
HXLINE(1263)										 ::lime::text::GlyphPosition position6 = _g112->__get(_g22).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1263)										_g22 = (_g22 + (int)1);
HXDLIN(1263)										width10 = (width10 + position6->advance->x);
            									}
            								}
HXDLIN(1263)								Float tempWidth1 = width10;
HXDLIN(1263)								while(((offsetX + tempWidth1) > (_gthis->width - (int)2))){
HXLINE(1263)									int i3 = (int)1;
HXDLIN(1263)									while(((textIndex + i3) < (endIndex1 + (int)1))){
HXLINE(1263)										::String text7 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i3);
HXDLIN(1263)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1263)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1263)										Float width11 = ((Float)0.0);
HXDLIN(1263)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1263)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1263)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1263)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1263)										_gthis->_hx___textLayout->set_text(text7);
HXDLIN(1263)										{
HXLINE(1263)											int _g23 = (int)0;
HXDLIN(1263)											::Array< ::Dynamic> _g113 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1263)											while((_g23 < _g113->length)){
HXLINE(1263)												 ::lime::text::GlyphPosition position7 = _g113->__get(_g23).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1263)												_g23 = (_g23 + (int)1);
HXDLIN(1263)												width11 = (width11 + position7->advance->x);
            											}
            										}
HXDLIN(1263)										tempWidth1 = width11;
HXDLIN(1263)										if (((offsetX + tempWidth1) > (_gthis->width - (int)2))) {
HXLINE(1263)											i3 = (i3 - (int)1);
HXDLIN(1263)											goto _hx_goto_32;
            										}
HXDLIN(1263)										i3 = (i3 + (int)1);
            									}
            									_hx_goto_32:;
HXDLIN(1263)									bool _hx_tmp16;
HXDLIN(1263)									if ((i3 == (int)0)) {
HXLINE(1263)										_hx_tmp16 = (tempWidth1 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1263)										_hx_tmp16 = false;
            									}
HXDLIN(1263)									if (_hx_tmp16) {
HXLINE(1263)										i3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            									}
HXDLIN(1263)									if ((i3 == (int)0)) {
HXLINE(1263)										offsetX = (int)2;
HXDLIN(1263)										offsetY = (offsetY + layoutGroup->height);
HXDLIN(1263)										lineIndex = (lineIndex + (int)1);
HXDLIN(1263)										goto _hx_goto_31;
            									}
            									else {
HXLINE(1263)										{
HXLINE(1263)											int endIndex2 = (textIndex + i3);
HXDLIN(1263)											bool _hx_tmp17;
HXDLIN(1263)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1263)												_hx_tmp17 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1263)												_hx_tmp17 = true;
            											}
HXDLIN(1263)											if (_hx_tmp17) {
HXLINE(1263)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1263)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1263)												layoutGroup->format = formatRange->format;
HXDLIN(1263)												layoutGroup->startIndex = textIndex;
HXDLIN(1263)												layoutGroup->endIndex = endIndex2;
            											}
            										}
HXDLIN(1263)										::String text8 = _gthis->text;
HXDLIN(1263)										::Array< Float > advances7 = ::Array_obj< Float >::__new(0);
HXDLIN(1263)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1263)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1263)										Float width12 = ((Float)0.0);
HXDLIN(1263)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1263)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1263)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1263)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1263)										 ::lime::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1263)										_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,textIndex,(textIndex + i3)));
HXDLIN(1263)										{
HXLINE(1263)											int _g24 = (int)0;
HXDLIN(1263)											::Array< ::Dynamic> _g114 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1263)											while((_g24 < _g114->length)){
HXLINE(1263)												 ::lime::text::GlyphPosition position8 = _g114->__get(_g24).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1263)												_g24 = (_g24 + (int)1);
HXDLIN(1263)												advances7->push(position8->advance->x);
            											}
            										}
HXDLIN(1263)										layoutGroup->advances = advances7;
HXDLIN(1263)										layoutGroup->offsetX = offsetX;
HXDLIN(1263)										layoutGroup->ascent = ascent;
HXDLIN(1263)										layoutGroup->descent = descent;
HXDLIN(1263)										layoutGroup->leading = leading;
HXDLIN(1263)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1263)										layoutGroup->offsetY = offsetY;
HXDLIN(1263)										::Array< Float > advances8 = layoutGroup->advances;
HXDLIN(1263)										Float width13 = ((Float)0.0);
HXDLIN(1263)										{
HXLINE(1263)											int _g25 = (int)0;
HXDLIN(1263)											while((_g25 < advances8->length)){
HXLINE(1263)												Float advance4 = advances8->__get(_g25);
HXDLIN(1263)												_g25 = (_g25 + (int)1);
HXDLIN(1263)												width13 = (width13 + advance4);
            											}
            										}
HXDLIN(1263)										layoutGroup->width = width13;
HXDLIN(1263)										layoutGroup->height = heightValue;
HXDLIN(1263)										layoutGroup = null();
HXDLIN(1263)										{
HXLINE(1263)											if ((ascent > maxAscent)) {
HXLINE(1263)												maxAscent = ascent;
            											}
HXDLIN(1263)											if ((heightValue > maxHeightValue)) {
HXLINE(1263)												maxHeightValue = heightValue;
            											}
HXDLIN(1263)											{
HXLINE(1263)												int _g26 = (int)0;
HXDLIN(1263)												 ::openfl::_Vector::ObjectVector _g115 = _gthis->layoutGroups;
HXDLIN(1263)												while((_g26 < _g115->get_length())){
HXLINE(1263)													 ::openfl::_internal::text::TextLayoutGroup lg3 = _g115->get(_g26).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1263)													_g26 = (_g26 + (int)1);
HXDLIN(1263)													if ((lg3->lineIndex < lineIndex)) {
HXLINE(1263)														continue;
            													}
HXDLIN(1263)													if ((lg3->lineIndex > lineIndex)) {
HXLINE(1263)														goto _hx_goto_36;
            													}
HXDLIN(1263)													lg3->ascent = maxAscent;
HXDLIN(1263)													lg3->height = maxHeightValue;
            												}
            												_hx_goto_36:;
            											}
HXDLIN(1263)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1263)											maxAscent = ((Float)0.0);
HXDLIN(1263)											maxHeightValue = ((Float)0.0);
HXDLIN(1263)											lineIndex = (lineIndex + (int)1);
HXDLIN(1263)											offsetX = (int)2;
            										}
HXDLIN(1263)										textIndex = (textIndex + i3);
HXDLIN(1263)										::String text9 = _gthis->text;
HXDLIN(1263)										::Array< Float > advances9 = ::Array_obj< Float >::__new(0);
HXDLIN(1263)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1263)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1263)										Float width14 = ((Float)0.0);
HXDLIN(1263)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1263)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1263)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1263)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1263)										 ::lime::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1263)										_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,textIndex,endIndex1));
HXDLIN(1263)										{
HXLINE(1263)											int _g27 = (int)0;
HXDLIN(1263)											::Array< ::Dynamic> _g116 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1263)											while((_g27 < _g116->length)){
HXLINE(1263)												 ::lime::text::GlyphPosition position9 = _g116->__get(_g27).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1263)												_g27 = (_g27 + (int)1);
HXDLIN(1263)												advances9->push(position9->advance->x);
            											}
            										}
HXDLIN(1263)										advances = advances9;
HXDLIN(1263)										Float width15 = ((Float)0.0);
HXDLIN(1263)										{
HXLINE(1263)											int _g28 = (int)0;
HXDLIN(1263)											while((_g28 < advances->length)){
HXLINE(1263)												Float advance5 = advances->__get(_g28);
HXDLIN(1263)												_g28 = (_g28 + (int)1);
HXDLIN(1263)												width15 = (width15 + advance5);
            											}
            										}
HXDLIN(1263)										widthValue = width15;
HXDLIN(1263)										tempWidth1 = widthValue;
            									}
            								}
            								_hx_goto_31:;
            							}
HXLINE(1265)							bool _hx_tmp18;
HXDLIN(1265)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1265)								_hx_tmp18 = (layoutGroup->startIndex != layoutGroup->endIndex);
            							}
            							else {
HXLINE(1265)								_hx_tmp18 = true;
            							}
HXDLIN(1265)							if (_hx_tmp18) {
HXLINE(1265)								layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1265)								::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            							}
            							else {
HXLINE(1265)								layoutGroup->format = formatRange->format;
HXDLIN(1265)								layoutGroup->startIndex = textIndex;
HXDLIN(1265)								layoutGroup->endIndex = endIndex1;
            							}
HXLINE(1267)							layoutGroup->advances = advances;
HXLINE(1268)							layoutGroup->offsetX = offsetX;
HXLINE(1269)							layoutGroup->ascent = ascent;
HXLINE(1270)							layoutGroup->descent = descent;
HXLINE(1271)							layoutGroup->leading = leading;
HXLINE(1272)							layoutGroup->lineIndex = lineIndex;
HXLINE(1273)							layoutGroup->offsetY = offsetY;
HXLINE(1274)							layoutGroup->width = widthValue;
HXLINE(1275)							layoutGroup->height = heightValue;
HXLINE(1277)							offsetX = (offsetX + widthValue);
HXLINE(1279)							textIndex = endIndex1;
HXLINE(1281)							wrap = false;
            						}
            						else {
HXLINE(1285)							bool _hx_tmp19;
HXDLIN(1285)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1285)								_hx_tmp19 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1285)								_hx_tmp19 = false;
            							}
HXDLIN(1285)							if (_hx_tmp19) {
HXLINE(1287)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1289)									layoutGroup->endIndex = spaceIndex;
HXLINE(1290)									layoutGroup->advances = layoutGroup->advances->concat(advances);
HXLINE(1291)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1291)									layoutGroup4->width = (layoutGroup4->width + widthValue);
            								}
            							}
            							else {
HXLINE(1295)								bool _hx_tmp20;
HXDLIN(1295)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1295)									_hx_tmp20 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1295)									_hx_tmp20 = true;
            								}
HXDLIN(1295)								if (_hx_tmp20) {
HXLINE(1297)									bool _hx_tmp21;
HXDLIN(1297)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1297)										_hx_tmp21 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1297)										_hx_tmp21 = true;
            									}
HXDLIN(1297)									if (_hx_tmp21) {
HXLINE(1297)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex1);
HXDLIN(1297)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1297)										layoutGroup->format = formatRange->format;
HXDLIN(1297)										layoutGroup->startIndex = textIndex;
HXDLIN(1297)										layoutGroup->endIndex = endIndex1;
            									}
HXLINE(1299)									layoutGroup->advances = advances;
HXLINE(1300)									layoutGroup->offsetX = offsetX;
HXLINE(1301)									layoutGroup->ascent = ascent;
HXLINE(1302)									layoutGroup->descent = descent;
HXLINE(1303)									layoutGroup->leading = leading;
HXLINE(1304)									layoutGroup->lineIndex = lineIndex;
HXLINE(1305)									layoutGroup->offsetY = offsetY;
HXLINE(1306)									layoutGroup->width = widthValue;
HXLINE(1307)									layoutGroup->height = heightValue;
            								}
            								else {
HXLINE(1311)									layoutGroup->endIndex = endIndex1;
HXLINE(1312)									layoutGroup->advances = layoutGroup->advances->concat(advances);
HXLINE(1313)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup5 = layoutGroup;
HXDLIN(1313)									layoutGroup5->width = (layoutGroup5->width + widthValue);
HXLINE(1316)									if ((breakIndex == endIndex1)) {
HXLINE(1316)										endIndex1 = (endIndex1 + (int)1);
            									}
            								}
            							}
HXLINE(1320)							offsetX = (offsetX + widthValue);
HXLINE(1322)							textIndex = endIndex1;
            						}
HXLINE(1326)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1328)						if ((formatRange->end <= previousSpaceIndex)) {
HXLINE(1330)							layoutGroup = null();
HXLINE(1331)							textIndex = formatRange->end;
HXLINE(1332)							{
HXLINE(1332)								if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1332)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1332)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1332)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1332)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1332)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1332)										ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1332)										descent = (currentFormat->size * currentFormat->_hx___descent);
            									}
            									else {
HXLINE(1332)										if (hx::IsNotNull( font )) {
HXLINE(1332)											int ascent5 = font->get_ascender();
HXDLIN(1332)											Float ascent6 = ((Float)ascent5 / (Float)font->get_unitsPerEM());
HXDLIN(1332)											ascent = (ascent6 * currentFormat->size);
HXDLIN(1332)											int descent5 = font->get_descender();
HXDLIN(1332)											Float descent6 = ((Float)descent5 / (Float)font->get_unitsPerEM());
HXDLIN(1332)											descent = ::Math_obj::abs((descent6 * currentFormat->size));
            										}
            										else {
HXLINE(1332)											ascent = currentFormat->size;
HXDLIN(1332)											descent = (currentFormat->size * ((Float)0.185));
            										}
            									}
HXDLIN(1332)									leading = currentFormat->leading;
HXDLIN(1332)									heightValue = ((ascent + descent) + leading);
            								}
HXDLIN(1332)								if ((heightValue > maxHeightValue)) {
HXLINE(1332)									maxHeightValue = heightValue;
            								}
HXDLIN(1332)								if ((ascent > maxAscent)) {
HXLINE(1332)									maxAscent = ascent;
            								}
            							}
            						}
            						else {
HXLINE(1339)							if ((breakIndex == previousSpaceIndex)) {
HXLINE(1341)								layoutGroup->endIndex = breakIndex;
HXLINE(1343)								if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->advances->length) < (int)0)) {
HXLINE(1346)									layoutGroup->advances->push(((Float)0.0));
            								}
HXLINE(1350)								textIndex = (breakIndex + (int)1);
            							}
HXLINE(1354)							previousSpaceIndex = spaceIndex;
HXLINE(1355)							spaceIndex = nextSpaceIndex;
            						}
HXLINE(1359)						bool _hx_tmp22;
HXDLIN(1359)						bool _hx_tmp23;
HXDLIN(1359)						bool _hx_tmp24;
HXDLIN(1359)						bool _hx_tmp25;
HXDLIN(1359)						if ((breakIndex > (int)-1)) {
HXLINE(1359)							_hx_tmp25 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1359)							_hx_tmp25 = false;
            						}
HXDLIN(1359)						if (_hx_tmp25) {
HXLINE(1359)							if ((spaceIndex <= breakIndex)) {
HXLINE(1359)								_hx_tmp24 = (spaceIndex == (int)-1);
            							}
            							else {
HXLINE(1359)								_hx_tmp24 = true;
            							}
            						}
            						else {
HXLINE(1359)							_hx_tmp24 = false;
            						}
HXDLIN(1359)						if (!(_hx_tmp24)) {
HXLINE(1359)							_hx_tmp23 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1359)							_hx_tmp23 = true;
            						}
HXDLIN(1359)						if (!(_hx_tmp23)) {
HXLINE(1359)							_hx_tmp22 = (spaceIndex > formatRange->end);
            						}
            						else {
HXLINE(1359)							_hx_tmp22 = true;
            						}
HXDLIN(1359)						if (_hx_tmp22) {
HXLINE(1361)							goto _hx_goto_24;
            						}
            					}
            					_hx_goto_24:;
            				}
            				else {
HXLINE(1370)					if ((textIndex > formatRange->end)) {
HXLINE(1372)						goto _hx_goto_11;
            					}
            					else {
HXLINE(1374)						bool _hx_tmp26;
HXDLIN(1374)						if ((textIndex >= formatRange->end)) {
HXLINE(1374)							_hx_tmp26 = (textIndex == ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1374)							_hx_tmp26 = true;
            						}
HXDLIN(1374)						if (_hx_tmp26) {
HXLINE(1376)							if (this->wordWrap) {
HXLINE(1378)								int endIndex3 = formatRange->end;
HXDLIN(1378)								::String text10 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_gthis->text,textIndex,endIndex3);
HXDLIN(1378)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1378)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1378)								Float width16 = ((Float)0.0);
HXDLIN(1378)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1378)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1378)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1378)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1378)								_gthis->_hx___textLayout->set_text(text10);
HXDLIN(1378)								{
HXLINE(1378)									int _g29 = (int)0;
HXDLIN(1378)									::Array< ::Dynamic> _g117 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1378)									while((_g29 < _g117->length)){
HXLINE(1378)										 ::lime::text::GlyphPosition position10 = _g117->__get(_g29).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1378)										_g29 = (_g29 + (int)1);
HXDLIN(1378)										width16 = (width16 + position10->advance->x);
            									}
            								}
HXDLIN(1378)								Float tempWidth2 = width16;
HXDLIN(1378)								while(((offsetX + tempWidth2) > (_gthis->width - (int)2))){
HXLINE(1378)									int i4 = (int)1;
HXDLIN(1378)									while(((textIndex + i4) < (endIndex3 + (int)1))){
HXLINE(1378)										::String text11 = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(_gthis->text,textIndex,i4);
HXDLIN(1378)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1378)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1378)										Float width17 = ((Float)0.0);
HXDLIN(1378)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1378)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1378)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1378)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1378)										_gthis->_hx___textLayout->set_text(text11);
HXDLIN(1378)										{
HXLINE(1378)											int _g30 = (int)0;
HXDLIN(1378)											::Array< ::Dynamic> _g118 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1378)											while((_g30 < _g118->length)){
HXLINE(1378)												 ::lime::text::GlyphPosition position11 = _g118->__get(_g30).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1378)												_g30 = (_g30 + (int)1);
HXDLIN(1378)												width17 = (width17 + position11->advance->x);
            											}
            										}
HXDLIN(1378)										tempWidth2 = width17;
HXDLIN(1378)										if (((offsetX + tempWidth2) > (_gthis->width - (int)2))) {
HXLINE(1378)											i4 = (i4 - (int)1);
HXDLIN(1378)											goto _hx_goto_41;
            										}
HXDLIN(1378)										i4 = (i4 + (int)1);
            									}
            									_hx_goto_41:;
HXDLIN(1378)									bool _hx_tmp27;
HXDLIN(1378)									if ((i4 == (int)0)) {
HXLINE(1378)										_hx_tmp27 = (tempWidth2 > (_gthis->width - (int)4));
            									}
            									else {
HXLINE(1378)										_hx_tmp27 = false;
            									}
HXDLIN(1378)									if (_hx_tmp27) {
HXLINE(1378)										i4 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(_gthis->text);
            									}
HXDLIN(1378)									if ((i4 == (int)0)) {
HXLINE(1378)										offsetX = (int)2;
HXDLIN(1378)										offsetY = (offsetY + layoutGroup->height);
HXDLIN(1378)										lineIndex = (lineIndex + (int)1);
HXDLIN(1378)										goto _hx_goto_40;
            									}
            									else {
HXLINE(1378)										{
HXLINE(1378)											int endIndex4 = (textIndex + i4);
HXDLIN(1378)											bool _hx_tmp28;
HXDLIN(1378)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1378)												_hx_tmp28 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1378)												_hx_tmp28 = true;
            											}
HXDLIN(1378)											if (_hx_tmp28) {
HXLINE(1378)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex4);
HXDLIN(1378)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1378)												layoutGroup->format = formatRange->format;
HXDLIN(1378)												layoutGroup->startIndex = textIndex;
HXDLIN(1378)												layoutGroup->endIndex = endIndex4;
            											}
            										}
HXDLIN(1378)										::String text12 = _gthis->text;
HXDLIN(1378)										::Array< Float > advances10 = ::Array_obj< Float >::__new(0);
HXDLIN(1378)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1378)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1378)										Float width18 = ((Float)0.0);
HXDLIN(1378)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1378)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1378)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1378)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1378)										 ::lime::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1378)										_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,(textIndex + i4)));
HXDLIN(1378)										{
HXLINE(1378)											int _g31 = (int)0;
HXDLIN(1378)											::Array< ::Dynamic> _g119 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1378)											while((_g31 < _g119->length)){
HXLINE(1378)												 ::lime::text::GlyphPosition position12 = _g119->__get(_g31).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1378)												_g31 = (_g31 + (int)1);
HXDLIN(1378)												advances10->push(position12->advance->x);
            											}
            										}
HXDLIN(1378)										layoutGroup->advances = advances10;
HXDLIN(1378)										layoutGroup->offsetX = offsetX;
HXDLIN(1378)										layoutGroup->ascent = ascent;
HXDLIN(1378)										layoutGroup->descent = descent;
HXDLIN(1378)										layoutGroup->leading = leading;
HXDLIN(1378)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1378)										layoutGroup->offsetY = offsetY;
HXDLIN(1378)										::Array< Float > advances11 = layoutGroup->advances;
HXDLIN(1378)										Float width19 = ((Float)0.0);
HXDLIN(1378)										{
HXLINE(1378)											int _g32 = (int)0;
HXDLIN(1378)											while((_g32 < advances11->length)){
HXLINE(1378)												Float advance6 = advances11->__get(_g32);
HXDLIN(1378)												_g32 = (_g32 + (int)1);
HXDLIN(1378)												width19 = (width19 + advance6);
            											}
            										}
HXDLIN(1378)										layoutGroup->width = width19;
HXDLIN(1378)										layoutGroup->height = heightValue;
HXDLIN(1378)										layoutGroup = null();
HXDLIN(1378)										{
HXLINE(1378)											if ((ascent > maxAscent)) {
HXLINE(1378)												maxAscent = ascent;
            											}
HXDLIN(1378)											if ((heightValue > maxHeightValue)) {
HXLINE(1378)												maxHeightValue = heightValue;
            											}
HXDLIN(1378)											{
HXLINE(1378)												int _g33 = (int)0;
HXDLIN(1378)												 ::openfl::_Vector::ObjectVector _g120 = _gthis->layoutGroups;
HXDLIN(1378)												while((_g33 < _g120->get_length())){
HXLINE(1378)													 ::openfl::_internal::text::TextLayoutGroup lg4 = _g120->get(_g33).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1378)													_g33 = (_g33 + (int)1);
HXDLIN(1378)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1378)														continue;
            													}
HXDLIN(1378)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1378)														goto _hx_goto_45;
            													}
HXDLIN(1378)													lg4->ascent = maxAscent;
HXDLIN(1378)													lg4->height = maxHeightValue;
            												}
            												_hx_goto_45:;
            											}
HXDLIN(1378)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1378)											maxAscent = ((Float)0.0);
HXDLIN(1378)											maxHeightValue = ((Float)0.0);
HXDLIN(1378)											lineIndex = (lineIndex + (int)1);
HXDLIN(1378)											offsetX = (int)2;
            										}
HXDLIN(1378)										textIndex = (textIndex + i4);
HXDLIN(1378)										::String text13 = _gthis->text;
HXDLIN(1378)										::Array< Float > advances12 = ::Array_obj< Float >::__new(0);
HXDLIN(1378)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1378)											_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1378)										Float width20 = ((Float)0.0);
HXDLIN(1378)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1378)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1378)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1378)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1378)										 ::lime::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1378)										_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,textIndex,endIndex3));
HXDLIN(1378)										{
HXLINE(1378)											int _g34 = (int)0;
HXDLIN(1378)											::Array< ::Dynamic> _g121 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1378)											while((_g34 < _g121->length)){
HXLINE(1378)												 ::lime::text::GlyphPosition position13 = _g121->__get(_g34).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1378)												_g34 = (_g34 + (int)1);
HXDLIN(1378)												advances12->push(position13->advance->x);
            											}
            										}
HXDLIN(1378)										advances = advances12;
HXDLIN(1378)										Float width21 = ((Float)0.0);
HXDLIN(1378)										{
HXLINE(1378)											int _g35 = (int)0;
HXDLIN(1378)											while((_g35 < advances->length)){
HXLINE(1378)												Float advance7 = advances->__get(_g35);
HXDLIN(1378)												_g35 = (_g35 + (int)1);
HXDLIN(1378)												width21 = (width21 + advance7);
            											}
            										}
HXDLIN(1378)										widthValue = width21;
HXDLIN(1378)										tempWidth2 = widthValue;
            									}
            								}
            								_hx_goto_40:;
            							}
HXLINE(1382)							::String text14 = this->text;
HXDLIN(1382)							int endIndex5 = formatRange->end;
HXDLIN(1382)							::Array< Float > advances13 = ::Array_obj< Float >::__new(0);
HXDLIN(1382)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1382)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1382)							Float width22 = ((Float)0.0);
HXDLIN(1382)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1382)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1382)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1382)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1382)							 ::lime::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1382)							_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,endIndex5));
HXDLIN(1382)							{
HXLINE(1382)								int _g36 = (int)0;
HXDLIN(1382)								::Array< ::Dynamic> _g122 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1382)								while((_g36 < _g122->length)){
HXLINE(1382)									 ::lime::text::GlyphPosition position14 = _g122->__get(_g36).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1382)									_g36 = (_g36 + (int)1);
HXDLIN(1382)									advances13->push(position14->advance->x);
            								}
            							}
HXDLIN(1382)							advances = advances13;
HXLINE(1383)							Float width23 = ((Float)0.0);
HXDLIN(1383)							{
HXLINE(1383)								int _g37 = (int)0;
HXDLIN(1383)								while((_g37 < advances->length)){
HXLINE(1383)									Float advance8 = advances->__get(_g37);
HXDLIN(1383)									_g37 = (_g37 + (int)1);
HXDLIN(1383)									width23 = (width23 + advance8);
            								}
            							}
HXDLIN(1383)							widthValue = width23;
HXLINE(1385)							{
HXLINE(1385)								int endIndex6 = formatRange->end;
HXDLIN(1385)								bool _hx_tmp29;
HXDLIN(1385)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1385)									_hx_tmp29 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1385)									_hx_tmp29 = true;
            								}
HXDLIN(1385)								if (_hx_tmp29) {
HXLINE(1385)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex6);
HXDLIN(1385)									::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            								}
            								else {
HXLINE(1385)									layoutGroup->format = formatRange->format;
HXDLIN(1385)									layoutGroup->startIndex = textIndex;
HXDLIN(1385)									layoutGroup->endIndex = endIndex6;
            								}
            							}
HXLINE(1387)							::String text15 = this->text;
HXDLIN(1387)							int endIndex7 = formatRange->end;
HXDLIN(1387)							::Array< Float > advances14 = ::Array_obj< Float >::__new(0);
HXDLIN(1387)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1387)								_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1387)							Float width24 = ((Float)0.0);
HXDLIN(1387)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1387)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1387)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1387)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1387)							 ::lime::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1387)							_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,textIndex,endIndex7));
HXDLIN(1387)							{
HXLINE(1387)								int _g38 = (int)0;
HXDLIN(1387)								::Array< ::Dynamic> _g123 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1387)								while((_g38 < _g123->length)){
HXLINE(1387)									 ::lime::text::GlyphPosition position15 = _g123->__get(_g38).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1387)									_g38 = (_g38 + (int)1);
HXDLIN(1387)									advances14->push(position15->advance->x);
            								}
            							}
HXDLIN(1387)							layoutGroup->advances = advances14;
HXLINE(1388)							layoutGroup->offsetX = offsetX;
HXLINE(1389)							layoutGroup->ascent = ascent;
HXLINE(1390)							layoutGroup->descent = descent;
HXLINE(1391)							layoutGroup->leading = leading;
HXLINE(1392)							layoutGroup->lineIndex = lineIndex;
HXLINE(1393)							layoutGroup->offsetY = offsetY;
HXLINE(1394)							::Array< Float > advances15 = layoutGroup->advances;
HXDLIN(1394)							Float width25 = ((Float)0.0);
HXDLIN(1394)							{
HXLINE(1394)								int _g39 = (int)0;
HXDLIN(1394)								while((_g39 < advances15->length)){
HXLINE(1394)									Float advance9 = advances15->__get(_g39);
HXDLIN(1394)									_g39 = (_g39 + (int)1);
HXDLIN(1394)									width25 = (width25 + advance9);
            								}
            							}
HXDLIN(1394)							layoutGroup->width = width25;
HXLINE(1395)							layoutGroup->height = heightValue;
HXLINE(1397)							offsetX = (offsetX + widthValue);
HXLINE(1398)							textIndex = formatRange->end;
            						}
            					}
HXLINE(1402)					{
HXLINE(1402)						if ((rangeIndex < (( (int)(_gthis->textFormatRanges->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) ) - (int)1))) {
HXLINE(1402)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1402)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1402)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1402)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1402)							if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1402)								ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1402)								descent = (currentFormat->size * currentFormat->_hx___descent);
            							}
            							else {
HXLINE(1402)								if (hx::IsNotNull( font )) {
HXLINE(1402)									int ascent7 = font->get_ascender();
HXDLIN(1402)									Float ascent8 = ((Float)ascent7 / (Float)font->get_unitsPerEM());
HXDLIN(1402)									ascent = (ascent8 * currentFormat->size);
HXDLIN(1402)									int descent7 = font->get_descender();
HXDLIN(1402)									Float descent8 = ((Float)descent7 / (Float)font->get_unitsPerEM());
HXDLIN(1402)									descent = ::Math_obj::abs((descent8 * currentFormat->size));
            								}
            								else {
HXLINE(1402)									ascent = currentFormat->size;
HXDLIN(1402)									descent = (currentFormat->size * ((Float)0.185));
            								}
            							}
HXDLIN(1402)							leading = currentFormat->leading;
HXDLIN(1402)							heightValue = ((ascent + descent) + leading);
            						}
HXDLIN(1402)						if ((heightValue > maxHeightValue)) {
HXLINE(1402)							maxHeightValue = heightValue;
            						}
HXDLIN(1402)						if ((ascent > maxAscent)) {
HXLINE(1402)							maxAscent = ascent;
            						}
            					}
HXLINE(1404)					if ((textIndex == formatRange->end)) {
HXLINE(1406)						{
HXLINE(1406)							if ((ascent > maxAscent)) {
HXLINE(1406)								maxAscent = ascent;
            							}
HXDLIN(1406)							if ((heightValue > maxHeightValue)) {
HXLINE(1406)								maxHeightValue = heightValue;
            							}
HXDLIN(1406)							{
HXLINE(1406)								int _g40 = (int)0;
HXDLIN(1406)								 ::openfl::_Vector::ObjectVector _g124 = _gthis->layoutGroups;
HXDLIN(1406)								while((_g40 < _g124->get_length())){
HXLINE(1406)									 ::openfl::_internal::text::TextLayoutGroup lg5 = _g124->get(_g40).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1406)									_g40 = (_g40 + (int)1);
HXDLIN(1406)									if ((lg5->lineIndex < lineIndex)) {
HXLINE(1406)										continue;
            									}
HXDLIN(1406)									if ((lg5->lineIndex > lineIndex)) {
HXLINE(1406)										goto _hx_goto_52;
            									}
HXDLIN(1406)									lg5->ascent = maxAscent;
HXDLIN(1406)									lg5->height = maxHeightValue;
            								}
            								_hx_goto_52:;
            							}
HXDLIN(1406)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1406)							maxAscent = ((Float)0.0);
HXDLIN(1406)							maxHeightValue = ((Float)0.0);
HXDLIN(1406)							lineIndex = (lineIndex + (int)1);
HXDLIN(1406)							offsetX = (int)2;
            						}
HXLINE(1408)						textIndex = (textIndex + (int)1);
HXLINE(1409)						goto _hx_goto_11;
            					}
            				}
            			}
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1426_setTextAlignment)
HXLINE(1428)		int lineIndex = (int)-1;
HXLINE(1429)		Float offsetX = ((Float)0.0);
HXLINE(1430)		Float totalWidth = (this->width - (int)4);
HXLINE(1431)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1431)		int lineLength;
HXLINE(1433)		{
HXLINE(1433)			int _g1 = (int)0;
HXDLIN(1433)			int _g = this->layoutGroups->get_length();
HXDLIN(1433)			while((_g1 < _g)){
HXLINE(1433)				_g1 = (_g1 + (int)1);
HXDLIN(1433)				int i = (_g1 - (int)1);
HXLINE(1435)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1437)				if ((group->lineIndex != lineIndex)) {
HXLINE(1439)					lineIndex = group->lineIndex;
HXLINE(1441)					{
HXLINE(1441)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1441)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1445)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1447)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1451)								offsetX = (int)0;
            							}
HXLINE(1445)							goto _hx_goto_55;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1469)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1471)								lineLength = (int)1;
HXLINE(1473)								{
HXLINE(1473)									int _g3 = (i + (int)1);
HXDLIN(1473)									int _g21 = ( (int)(this->layoutGroups->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) );
HXDLIN(1473)									while((_g3 < _g21)){
HXLINE(1473)										_g3 = (_g3 + (int)1);
HXDLIN(1473)										int j = (_g3 - (int)1);
HXLINE(1475)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1477)											bool _hx_tmp;
HXDLIN(1477)											if ((j != (int)0)) {
HXLINE(1477)												::String _hx_tmp1 = this->text;
HXDLIN(1477)												_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1477)												_hx_tmp = true;
            											}
HXDLIN(1477)											if (_hx_tmp) {
HXLINE(1479)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1485)											goto _hx_goto_56;
            										}
            									}
            									_hx_goto_56:;
            								}
HXLINE(1491)								if ((lineLength > (int)1)) {
HXLINE(1493)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1495)									 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1496)									bool _hx_tmp2;
HXDLIN(1496)									bool _hx_tmp3;
HXDLIN(1496)									int group1 = group->endIndex;
HXDLIN(1496)									if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1496)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1496)										_hx_tmp3 = false;
            									}
HXDLIN(1496)									if (_hx_tmp3) {
HXLINE(1496)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1496)										_hx_tmp2 = false;
            									}
HXDLIN(1496)									if (_hx_tmp2) {
HXLINE(1498)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1498)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1500)										int j1 = (int)0;
HXLINE(1501)										while(true){
HXLINE(1503)											bool _hx_tmp4;
HXDLIN(1503)											if ((j1 > (int)1)) {
HXLINE(1503)												::String _hx_tmp5 = this->text;
HXDLIN(1503)												_hx_tmp4 = hx::IsNotEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp5,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j1)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1503)												_hx_tmp4 = false;
            											}
HXDLIN(1503)											if (_hx_tmp4) {
HXLINE(1505)												 ::openfl::_internal::text::TextLayoutGroup _hx_tmp6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1505)												_hx_tmp6->offsetX = (_hx_tmp6->offsetX + (offsetX * (j1 - (int)1)));
HXLINE(1506)												j1 = (j1 + (int)1);
            											}
HXLINE(1510)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp7 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1510)											_hx_tmp7->offsetX = (_hx_tmp7->offsetX + (offsetX * j1));
HXLINE(1512)											j1 = (j1 + (int)1);
HXLINE(1501)											if (!((j1 < lineLength))) {
HXLINE(1501)												goto _hx_goto_57;
            											}
            										}
            										_hx_goto_57:;
            									}
            								}
            							}
HXLINE(1520)							offsetX = (int)0;
HXLINE(1467)							goto _hx_goto_55;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1457)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1459)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1463)								offsetX = (int)0;
            							}
HXLINE(1457)							goto _hx_goto_55;
            						}
            						/* default */{
HXLINE(1524)							offsetX = (int)0;
            						}
            						_hx_goto_55:;
            					}
            				}
HXLINE(1530)				if ((offsetX > (int)0)) {
HXLINE(1532)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1532)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1541_update)
HXLINE(1543)		bool _hx_tmp;
HXDLIN(1543)		bool _hx_tmp1;
HXDLIN(1543)		if (hx::IsNotNull( this->text )) {
HXLINE(1543)			_hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1543)			_hx_tmp1 = true;
            		}
HXDLIN(1543)		if (!(_hx_tmp1)) {
HXLINE(1543)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1543)			_hx_tmp = true;
            		}
HXDLIN(1543)		if (_hx_tmp) {
HXLINE(1545)			this->lineAscents->set_length((int)0);
HXLINE(1546)			this->lineBreaks->set_length((int)0);
HXLINE(1547)			this->lineDescents->set_length((int)0);
HXLINE(1548)			this->lineLeadings->set_length((int)0);
HXLINE(1549)			this->lineHeights->set_length((int)0);
HXLINE(1550)			this->lineWidths->set_length((int)0);
HXLINE(1551)			this->layoutGroups->set_length((int)0);
HXLINE(1553)			this->textWidth = (int)0;
HXLINE(1554)			this->textHeight = (int)0;
HXLINE(1555)			this->numLines = (int)1;
HXLINE(1556)			this->maxScrollH = (int)0;
HXLINE(1557)			this->maxScrollV = (int)1;
HXLINE(1558)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1562)			this->getLayoutGroups();
HXLINE(1563)			this->getLineMeasurements();
HXLINE(1564)			this->setTextAlignment();
            		}
HXLINE(1568)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1579_set_restrict)
HXLINE(1581)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1583)			return this->restrict;
            		}
HXLINE(1587)		this->restrict = value;
HXLINE(1589)		bool _hx_tmp;
HXDLIN(1589)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1589)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == (int)0);
            		}
            		else {
HXLINE(1589)			_hx_tmp = true;
            		}
HXDLIN(1589)		if (_hx_tmp) {
HXLINE(1591)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1595)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1599)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1604_set_text)
HXLINE(1606)		if (hx::IsNull( value )) {
HXLINE(1607)			return (this->text = value);
            		}
HXLINE(1610)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1612)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1616)		bool _hx_tmp;
HXDLIN(1616)		if ((this->maxChars > (int)0)) {
HXLINE(1616)			_hx_tmp = (value.length > this->maxChars);
            		}
            		else {
HXLINE(1616)			_hx_tmp = false;
            		}
HXDLIN(1616)		if (_hx_tmp) {
HXLINE(1618)			value = value.substr((int)0,this->maxChars);
            		}
HXLINE(1622)		this->text = value;
HXLINE(1624)		return this->text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_201_findFont)
HXLINE( 205)		{
HXLINE( 205)			int _g = (int)0;
HXDLIN( 205)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 205)			while((_g < _g1->length)){
HXLINE( 205)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 205)				_g = (_g + (int)1);
HXLINE( 207)				if (hx::IsNull( registeredFont )) {
HXLINE( 207)					continue;
            				}
HXLINE( 209)				bool _hx_tmp;
HXDLIN( 209)				if ((registeredFont->name != name)) {
HXLINE( 209)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 209)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 209)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 209)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 209)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 209)					_hx_tmp = true;
            				}
HXDLIN( 209)				if (_hx_tmp) {
HXLINE( 211)					return registeredFont;
            				}
            			}
            		}
HXLINE( 217)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 219)		if (hx::IsNotNull( font )) {
HXLINE( 221)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 222)			return font;
            		}
HXLINE( 228)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_243_getFormatHeight)
HXLINE( 245)		Float ascent;
HXDLIN( 245)		Float descent;
HXDLIN( 245)		int leading;
HXLINE( 267)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 269)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 271)			ascent = (format->size * format->_hx___ascent);
HXLINE( 272)			descent = (format->size * format->_hx___descent);
            		}
            		else {
HXLINE( 274)			if (hx::IsNotNull( font )) {
HXLINE( 276)				int ascent1 = font->get_ascender();
HXDLIN( 276)				Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN( 276)				ascent = (ascent2 * format->size);
HXLINE( 277)				int descent1 = font->get_descender();
HXDLIN( 277)				Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN( 277)				descent = ::Math_obj::abs((descent2 * format->size));
            			}
            			else {
HXLINE( 281)				ascent = format->size;
HXLINE( 282)				descent = (format->size * ((Float)0.185));
            			}
            		}
HXLINE( 286)		leading = format->leading;
HXLINE( 290)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_295_getFont)
HXLINE( 297)		::String font;
HXDLIN( 297)		if (format->italic) {
HXLINE( 297)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 297)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 298)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 299)		::String font1;
HXDLIN( 299)		if (format->bold) {
HXLINE( 299)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 299)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 299)		font = (font + font1);
HXLINE( 300)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 301)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 303)		::String _g1 = format->font;
HXDLIN( 303)		::String font2;
HXDLIN( 303)		::String _hx_switch_0 = _g1;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 303)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 303)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 303)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 303)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 303)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 303)			goto _hx_goto_65;
            		}
            		/* default */{
HXLINE( 303)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(format->font,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_65:;
HXDLIN( 303)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 312)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_317_getFontInstance)
HXLINE( 321)		 ::openfl::text::Font instance = null();
HXLINE( 322)		::Array< ::String > fontList = null();
HXLINE( 324)		bool _hx_tmp;
HXDLIN( 324)		if (hx::IsNotNull( format )) {
HXLINE( 324)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 324)			_hx_tmp = false;
            		}
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 326)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 328)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 332)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(format->font);
HXLINE( 333)			if (hx::IsNotNull( instance )) {
HXLINE( 333)				return instance;
            			}
HXLINE( 335)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 337)			{
HXLINE( 337)				::String _g = format->font;
HXDLIN( 337)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 342)					if (format->bold) {
HXLINE( 344)						if (format->italic) {
HXLINE( 346)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            						}
            						else {
HXLINE( 350)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            						}
            					}
            					else {
HXLINE( 356)						if (format->italic) {
HXLINE( 358)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            						}
            						else {
HXLINE( 362)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            						}
            					}
HXLINE( 342)					goto _hx_goto_67;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 377)					goto _hx_goto_67;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 384)					if (format->bold) {
HXLINE( 386)						if (format->italic) {
HXLINE( 388)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            						}
            						else {
HXLINE( 392)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            						}
            					}
            					else {
HXLINE( 398)						if (format->italic) {
HXLINE( 400)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            						}
            						else {
HXLINE( 404)							fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            						}
            					}
HXLINE( 384)					goto _hx_goto_67;
            				}
            				/* default */{
HXLINE( 421)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_67:;
            			}
HXLINE( 438)			if (hx::IsNotNull( fontList )) {
HXLINE( 440)				int _g1 = (int)0;
HXDLIN( 440)				while((_g1 < fontList->length)){
HXLINE( 440)					::String font = fontList->__get(_g1);
HXDLIN( 440)					_g1 = (_g1 + (int)1);
HXLINE( 442)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 444)					if (hx::IsNotNull( instance )) {
HXLINE( 446)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 447)						return instance;
            					}
            				}
            			}
HXLINE( 455)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 456)			if (hx::IsNotNull( instance )) {
HXLINE( 456)				return instance;
            			}
            		}
HXLINE( 460)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 463)		if (format->bold) {
HXLINE( 465)			if (format->italic) {
HXLINE( 467)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 471)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 477)			if (format->italic) {
HXLINE( 479)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 483)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 500)		{
HXLINE( 500)			int _g2 = (int)0;
HXDLIN( 500)			while((_g2 < fontList->length)){
HXLINE( 500)				::String font1 = fontList->__get(_g2);
HXDLIN( 500)				_g2 = (_g2 + (int)1);
HXLINE( 502)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 504)				if (hx::IsNotNull( instance )) {
HXLINE( 506)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 507)					return instance;
            				}
            			}
            		}
HXLINE( 513)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 517)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = _hx___defaultFonts; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::lime::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::lime::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_52_boot)
HXLINE(  52)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXLINE(  53)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_54_boot)
HXLINE(  54)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_55_boot)
HXLINE(  55)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_57_boot)
HXLINE(  57)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
