// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_GameLoop
#include <GameLoop.h>
#endif
#ifndef INCLUDED_IGameLoopHandler
#include <IGameLoopHandler.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2a359810faa60e5_4_new,"GameLoop","new",0x29538788,"GameLoop.new","GameLoop.hx",4,0xe939c0e8)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a359810faa60e5_17_start,"GameLoop","start",0xb5c5458a,"GameLoop.start","GameLoop.hx",17,0xe939c0e8)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a359810faa60e5_21_stop,"GameLoop","stop",0x031c7bda,"GameLoop.stop","GameLoop.hx",21,0xe939c0e8)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a359810faa60e5_25_add,"GameLoop","add",0x2949a949,"GameLoop.add","GameLoop.hx",25,0xe939c0e8)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a359810faa60e5_29_remove,"GameLoop","remove",0x5565ce1c,"GameLoop.remove","GameLoop.hx",29,0xe939c0e8)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a359810faa60e5_33_timerHandler,"GameLoop","timerHandler",0xd0fcee5d,"GameLoop.timerHandler","GameLoop.hx",33,0xe939c0e8)

void GameLoop_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e2a359810faa60e5_4_new)
HXLINE(   9)		this->lastUpdateTime = ((Float)-1);
HXLINE(   8)		this->_invalidated = false;
HXLINE(  12)		this->_handlers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  13)		this->_timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,(int)250);
            	}

Dynamic GameLoop_obj::__CreateEmpty() { return new GameLoop_obj; }

void *GameLoop_obj::_hx_vtable = 0;

Dynamic GameLoop_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameLoop_obj > _hx_result = new GameLoop_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameLoop_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a296c5e;
}

void GameLoop_obj::start(){
            	HX_STACKFRAME(&_hx_pos_e2a359810faa60e5_17_start)
HXLINE(  17)		this->_timer->run = this->timerHandler_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameLoop_obj,start,(void))

void GameLoop_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_e2a359810faa60e5_21_stop)
HXLINE(  21)		this->_timer->stop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameLoop_obj,stop,(void))

void GameLoop_obj::add(::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_e2a359810faa60e5_25_add)
HXLINE(  25)		this->_handlers->push(handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameLoop_obj,add,(void))

void GameLoop_obj::remove(::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_e2a359810faa60e5_29_remove)
HXLINE(  29)		this->_handlers->remove(handler);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameLoop_obj,remove,(void))

void GameLoop_obj::timerHandler(){
            	HX_STACKFRAME(&_hx_pos_e2a359810faa60e5_33_timerHandler)
HXLINE(  33)		int _g = (int)0;
HXDLIN(  33)		::Array< ::Dynamic> _g1 = this->_handlers;
HXDLIN(  33)		while((_g < _g1->length)){
HXLINE(  33)			::Dynamic handler = _g1->__get(_g);
HXDLIN(  33)			_g = (_g + (int)1);
HXLINE(  34)			Float time = ::Date_obj::now()->getTime();
HXLINE(  35)			Float diff;
HXDLIN(  35)			if ((this->lastUpdateTime != (int)-1)) {
HXLINE(  35)				diff = (time - this->lastUpdateTime);
            			}
            			else {
HXLINE(  35)				diff = (int)0;
            			}
HXLINE(  36)			::IGameLoopHandler_obj::update(handler,time,diff);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameLoop_obj,timerHandler,(void))


hx::ObjectPtr< GameLoop_obj > GameLoop_obj::__new() {
	hx::ObjectPtr< GameLoop_obj > __this = new GameLoop_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GameLoop_obj > GameLoop_obj::__alloc(hx::Ctx *_hx_ctx) {
	GameLoop_obj *__this = (GameLoop_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameLoop_obj), true, "GameLoop"));
	*(void **)__this = GameLoop_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GameLoop_obj::GameLoop_obj()
{
}

void GameLoop_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameLoop);
	HX_MARK_MEMBER_NAME(_handlers,"_handlers");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_invalidated,"_invalidated");
	HX_MARK_MEMBER_NAME(lastUpdateTime,"lastUpdateTime");
	HX_MARK_END_CLASS();
}

void GameLoop_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_handlers,"_handlers");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_invalidated,"_invalidated");
	HX_VISIT_MEMBER_NAME(lastUpdateTime,"lastUpdateTime");
}

hx::Val GameLoop_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_handlers") ) { return hx::Val( _handlers); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_invalidated") ) { return hx::Val( _invalidated); }
		if (HX_FIELD_EQ(inName,"timerHandler") ) { return hx::Val( timerHandler_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastUpdateTime") ) { return hx::Val( lastUpdateTime); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GameLoop_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_handlers") ) { _handlers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_invalidated") ) { _invalidated=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastUpdateTime") ) { lastUpdateTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameLoop_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_handlers","\xc8","\x18","\xba","\x1c"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_invalidated","\x8a","\xe0","\xb5","\x23"));
	outFields->push(HX_HCSTRING("lastUpdateTime","\xac","\x4c","\x38","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GameLoop_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::IGameLoopHandler >*/ ,(int)offsetof(GameLoop_obj,_handlers),HX_HCSTRING("_handlers","\xc8","\x18","\xba","\x1c")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(GameLoop_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsBool,(int)offsetof(GameLoop_obj,_invalidated),HX_HCSTRING("_invalidated","\x8a","\xe0","\xb5","\x23")},
	{hx::fsFloat,(int)offsetof(GameLoop_obj,lastUpdateTime),HX_HCSTRING("lastUpdateTime","\xac","\x4c","\x38","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GameLoop_obj_sStaticStorageInfo = 0;
#endif

static ::String GameLoop_obj_sMemberFields[] = {
	HX_HCSTRING("_handlers","\xc8","\x18","\xba","\x1c"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_invalidated","\x8a","\xe0","\xb5","\x23"),
	HX_HCSTRING("lastUpdateTime","\xac","\x4c","\x38","\x79"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("timerHandler","\x85","\xca","\x88","\x4a"),
	::String(null()) };

static void GameLoop_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameLoop_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameLoop_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameLoop_obj::__mClass,"__mClass");
};

#endif

hx::Class GameLoop_obj::__mClass;

void GameLoop_obj::__register()
{
	hx::Object *dummy = new GameLoop_obj;
	GameLoop_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GameLoop","\x96","\x63","\x8f","\x8d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameLoop_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameLoop_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameLoop_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameLoop_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameLoop_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameLoop_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

