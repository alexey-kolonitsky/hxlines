// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_view_controls_SimpleButton
#include <view/controls/SimpleButton.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e88f042e89908e3_11_new,"view.controls.SimpleButton","new",0x4cd4f685,"view.controls.SimpleButton.new","view/controls/SimpleButton.hx",11,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_25_set_label,"view.controls.SimpleButton","set_label",0xec25263c,"view.controls.SimpleButton.set_label","view/controls/SimpleButton.hx",25,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_29_get_label,"view.controls.SimpleButton","get_label",0x08d43a30,"view.controls.SimpleButton.get_label","view/controls/SimpleButton.hx",29,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_63_createCaptionTextField,"view.controls.SimpleButton","createCaptionTextField",0xcc20251e,"view.controls.SimpleButton.createCaptionTextField","view/controls/SimpleButton.hx",63,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_84_mouseDownHandler,"view.controls.SimpleButton","mouseDownHandler",0x0c87d01e,"view.controls.SimpleButton.mouseDownHandler","view/controls/SimpleButton.hx",84,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_89_mouseUpHandler,"view.controls.SimpleButton","mouseUpHandler",0x6f7b91c5,"view.controls.SimpleButton.mouseUpHandler","view/controls/SimpleButton.hx",89,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_94_mouseOverHandler,"view.controls.SimpleButton","mouseOverHandler",0xe7f0196c,"view.controls.SimpleButton.mouseOverHandler","view/controls/SimpleButton.hx",94,0x0d6764ab)
HX_LOCAL_STACK_FRAME(_hx_pos_8e88f042e89908e3_99_mouseOutHandler,"view.controls.SimpleButton","mouseOutHandler",0x08c8e906,"view.controls.SimpleButton.mouseOutHandler","view/controls/SimpleButton.hx",99,0x0d6764ab)
namespace view{
namespace controls{

void SimpleButton_obj::__construct( ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
::String caption = __o_caption.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
bool fitText = __o_fitText.Default(true);
Float width = __o_width.Default(100);
Float height = __o_height.Default(22);
            	HX_GC_STACKFRAME(&_hx_pos_8e88f042e89908e3_11_new)
HXLINE(  21)		this->_label =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  40)		super::__construct();
HXLINE(  41)		this->_width = width;
HXLINE(  42)		this->_height = height;
HXLINE(  43)		this->createCaptionTextField(caption,fitText);
HXLINE(  45)		if (hx::IsNotNull( bitmap )) {
HXLINE(  46)			this->_bitmap = bitmap;
HXLINE(  47)			this->addChild(bitmap);
            		}
HXLINE(  50)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->mouseDownHandler_dyn(),null(),null(),null());
HXLINE(  51)		this->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->mouseUpHandler_dyn(),null(),null(),null());
HXLINE(  52)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->mouseOverHandler_dyn(),null(),null(),null());
HXLINE(  53)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->mouseOutHandler_dyn(),null(),null(),null());
HXLINE(  55)		this->buttonMode = true;
HXLINE(  56)		this->useHandCursor = true;
HXLINE(  57)		this->set_visible(true);
HXLINE(  58)		this->mouseEnabled = true;
HXLINE(  59)		this->mouseChildren = false;
            	}

Dynamic SimpleButton_obj::__CreateEmpty() { return new SimpleButton_obj; }

void *SimpleButton_obj::_hx_vtable = 0;

Dynamic SimpleButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SimpleButton_obj > _hx_result = new SimpleButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool SimpleButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2d3c2c87) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2d3c2c87;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

::String SimpleButton_obj::set_label(::String value){
            	HX_STACKFRAME(&_hx_pos_8e88f042e89908e3_25_set_label)
HXLINE(  25)		return this->_label->set_text(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,set_label,return )

::String SimpleButton_obj::get_label(){
            	HX_STACKFRAME(&_hx_pos_8e88f042e89908e3_29_get_label)
HXLINE(  29)		return this->_label->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SimpleButton_obj,get_label,return )

void SimpleButton_obj::createCaptionTextField(::String text,bool fitText){
            	HX_GC_STACKFRAME(&_hx_pos_8e88f042e89908e3_63_createCaptionTextField)
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		if (hx::IsNotNull( text )) {
HXLINE(  63)			_hx_tmp = (text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  64)			this->_label =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  65)			this->_label->set_selectable(false);
HXLINE(  66)			this->_label->set_type((int)0);
HXLINE(  67)			this->_label->set_autoSize((int)1);
HXLINE(  68)			this->_label->set_multiline(false);
HXLINE(  69)			 ::openfl::text::TextField _hx_tmp1 = this->_label;
HXDLIN(  69)			_hx_tmp1->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),(int)12,(int)16777215,true,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  70)			this->_label->set_text(text);
HXLINE(  71)			this->_label->mouseEnabled = false;
HXLINE(  72)			this->_label->set_x((int)10);
HXLINE(  73)			this->addChild(this->_label);
HXLINE(  74)			if (fitText) {
HXLINE(  75)				this->_width = (this->_label->get_width() + (int)20);
HXLINE(  76)				this->_height = this->_label->get_height();
            			}
            			else {
HXLINE(  78)				this->_label->set_width(this->_width);
HXLINE(  79)				this->_label->set_height(this->_width);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SimpleButton_obj,createCaptionTextField,(void))

void SimpleButton_obj::mouseDownHandler( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_8e88f042e89908e3_84_mouseDownHandler)
HXLINE(  85)		this->_bitmap->set_alpha(((Float)1.0));
HXLINE(  86)		this->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)2,(int)90,(int)0,((Float)0.7),(int)4,(int)4,null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,mouseDownHandler,(void))

void SimpleButton_obj::mouseUpHandler( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_8e88f042e89908e3_89_mouseUpHandler)
HXLINE(  90)		this->_bitmap->set_alpha(((Float)1.0));
HXLINE(  91)		this->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)2,(int)90,(int)0,((Float)0.7),(int)4,(int)4,null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,mouseUpHandler,(void))

void SimpleButton_obj::mouseOverHandler( ::openfl::events::MouseEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_8e88f042e89908e3_94_mouseOverHandler)
HXLINE(  95)		this->_label->set_textColor((int)16777215);
HXLINE(  96)		this->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)2,(int)90,(int)0,((Float)0.7),(int)4,(int)4,null(),null(),null(),null(),null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,mouseOverHandler,(void))

void SimpleButton_obj::mouseOutHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_8e88f042e89908e3_99_mouseOutHandler)
HXLINE( 100)		this->_label->set_textColor((int)16777215);
HXLINE( 101)		this->set_filters(::Array_obj< ::Dynamic>::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SimpleButton_obj,mouseOutHandler,(void))


hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__new( ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< SimpleButton_obj > __this = new SimpleButton_obj();
	__this->__construct(bitmap,__o_caption,__o_fitText,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< SimpleButton_obj > SimpleButton_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Bitmap bitmap,::String __o_caption,hx::Null< bool >  __o_fitText,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	SimpleButton_obj *__this = (SimpleButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SimpleButton_obj), true, "view.controls.SimpleButton"));
	*(void **)__this = SimpleButton_obj::_hx_vtable;
	__this->__construct(bitmap,__o_caption,__o_fitText,__o_width,__o_height);
	return __this;
}

SimpleButton_obj::SimpleButton_obj()
{
}

void SimpleButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SimpleButton);
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_bitmap,"_bitmap");
	HX_MARK_MEMBER_NAME(_label,"_label");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SimpleButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_bitmap,"_bitmap");
	HX_VISIT_MEMBER_NAME(_label,"_label");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SimpleButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_label()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width); }
		if (HX_FIELD_EQ(inName,"_label") ) { return hx::Val( _label); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height); }
		if (HX_FIELD_EQ(inName,"_bitmap") ) { return hx::Val( _bitmap); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_label") ) { return hx::Val( set_label_dyn()); }
		if (HX_FIELD_EQ(inName,"get_label") ) { return hx::Val( get_label_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mouseUpHandler") ) { return hx::Val( mouseUpHandler_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mouseOutHandler") ) { return hx::Val( mouseOutHandler_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mouseDownHandler") ) { return hx::Val( mouseDownHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"mouseOverHandler") ) { return hx::Val( mouseOverHandler_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createCaptionTextField") ) { return hx::Val( createCaptionTextField_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SimpleButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_label(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_label") ) { _label=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bitmap") ) { _bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SimpleButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_bitmap","\x8e","\x21","\x83","\x5f"));
	outFields->push(HX_HCSTRING("_label","\x35","\x55","\x96","\x6b"));
	outFields->push(HX_HCSTRING("label","\xf4","\x0d","\xaf","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SimpleButton_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SimpleButton_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsFloat,(int)offsetof(SimpleButton_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(SimpleButton_obj,_bitmap),HX_HCSTRING("_bitmap","\x8e","\x21","\x83","\x5f")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(SimpleButton_obj,_label),HX_HCSTRING("_label","\x35","\x55","\x96","\x6b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SimpleButton_obj_sStaticStorageInfo = 0;
#endif

static ::String SimpleButton_obj_sMemberFields[] = {
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_bitmap","\x8e","\x21","\x83","\x5f"),
	HX_HCSTRING("_label","\x35","\x55","\x96","\x6b"),
	HX_HCSTRING("set_label","\x57","\x56","\xa9","\x96"),
	HX_HCSTRING("get_label","\x4b","\x6a","\x58","\xb3"),
	HX_HCSTRING("createCaptionTextField","\x23","\xc0","\x05","\xe7"),
	HX_HCSTRING("mouseDownHandler","\x63","\xa9","\x3b","\xf8"),
	HX_HCSTRING("mouseUpHandler","\xca","\x1f","\x6c","\x13"),
	HX_HCSTRING("mouseOverHandler","\xb1","\xf2","\xa3","\xd3"),
	HX_HCSTRING("mouseOutHandler","\x61","\x9f","\x54","\xd7"),
	::String(null()) };

static void SimpleButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SimpleButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SimpleButton_obj::__mClass,"__mClass");
};

#endif

hx::Class SimpleButton_obj::__mClass;

void SimpleButton_obj::__register()
{
	hx::Object *dummy = new SimpleButton_obj;
	SimpleButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("view.controls.SimpleButton","\x13","\x50","\x14","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SimpleButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SimpleButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SimpleButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SimpleButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SimpleButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SimpleButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace view
} // end namespace controls
