// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_view_Field
#include <view/Field.h>
#endif
#ifndef INCLUDED_view_FieldBitmapFactory
#include <view/FieldBitmapFactory.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_6_new,"view.Field","new",0x2a278743,"view.Field.new","view/Field.hx",6,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_16_get_select,"view.Field","get_select",0xf624c642,"view.Field.get_select","view/Field.hx",16,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_19_set_select,"view.Field","set_select",0xf9a264b6,"view.Field.set_select","view/Field.hx",19,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_41_get_state,"view.Field","get_state",0xb3bd558b,"view.Field.get_state","view/Field.hx",41,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_44_set_state,"view.Field","set_state",0x970e4197,"view.Field.set_state","view/Field.hx",44,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_60_get_background,"view.Field","get_background",0xd1cd5a34,"view.Field.get_background","view/Field.hx",60,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_63_set_background,"view.Field","set_background",0xf1ed42a8,"view.Field.set_background","view/Field.hx",63,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_100_updateBg,"view.Field","updateBg",0x87f5866b,"view.Field.updateBg","view/Field.hx",100,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_104_updateBitmap,"view.Field","updateBitmap",0xe7dd8b95,"view.Field.updateBitmap","view/Field.hx",104,0x9895ba8e)
HX_LOCAL_STACK_FRAME(_hx_pos_f5e7b096d9a16b19_94_boot,"view.Field","boot",0xb087d3ef,"view.Field.boot","view/Field.hx",94,0x9895ba8e)
namespace view{

void Field_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_6_new)
HXLINE(  97)		this->bg = null();
HXLINE(  96)		this->bitmap = null();
HXLINE(  56)		this->_background = (int)0;
HXLINE(  37)		this->_state = (int)0;
HXLINE(  12)		this->_select = false;
HXLINE(  77)		super::__construct();
HXLINE(  78)		this->_fieldFactory =  ::view::FieldBitmapFactory_obj::__alloc( HX_CTX );
HXLINE(  79)		this->addChild((this->bg =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null())));
HXLINE(  80)		this->addChild((this->bitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null())));
HXLINE(  81)		this->updateBg();
HXLINE(  82)		this->updateBitmap();
HXLINE(  83)		this->mouseChildren = false;
HXLINE(  84)		this->mouseEnabled = false;
            	}

Dynamic Field_obj::__CreateEmpty() { return new Field_obj; }

void *Field_obj::_hx_vtable = 0;

Dynamic Field_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Field_obj > _hx_result = new Field_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Field_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x4512ee15;
		}
	}
}

bool Field_obj::get_select(){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_16_get_select)
HXLINE(  16)		return this->_select;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,get_select,return )

bool Field_obj::set_select(bool value){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_19_set_select)
HXLINE(  20)		if ((this->_select != value)) {
HXLINE(  21)			this->_select = value;
HXLINE(  22)			if (this->_select) {
HXLINE(  23)				this->bitmap->set_y((int)-10);
HXLINE(  24)				this->bitmap->set_filters(::Array_obj< ::Dynamic>::__new(1)->init(0,::view::Field_obj::DROP_SHADOW_FILTER));
            			}
            			else {
HXLINE(  26)				this->bitmap->set_y((int)0);
HXLINE(  27)				this->bitmap->set_filters(::Array_obj< ::Dynamic>::__new(0));
            			}
            		}
HXLINE(  30)		return this->_select;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,set_select,return )

int Field_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_41_get_state)
HXLINE(  41)		return this->_state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,get_state,return )

int Field_obj::set_state(int value){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_44_set_state)
HXLINE(  45)		if ((this->_state != value)) {
HXLINE(  46)			this->_state = value;
HXLINE(  47)			this->updateBitmap();
            		}
HXLINE(  49)		return this->_state;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,set_state,return )

int Field_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_60_get_background)
HXLINE(  60)		return this->_background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,get_background,return )

int Field_obj::set_background(int value){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_63_set_background)
HXLINE(  64)		if ((this->_background != value)) {
HXLINE(  65)			this->_background = value;
HXLINE(  66)			this->updateBg();
            		}
HXLINE(  68)		return this->_background;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,set_background,return )

void Field_obj::updateBg(){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_100_updateBg)
HXLINE( 100)		 ::openfl::display::Bitmap _hx_tmp = this->bg;
HXDLIN( 100)		 ::view::FieldBitmapFactory _hx_tmp1 = this->_fieldFactory;
HXDLIN( 100)		_hx_tmp->set_bitmapData(_hx_tmp1->getFieldByCode(this->get_background()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,updateBg,(void))

void Field_obj::updateBitmap(){
            	HX_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_104_updateBitmap)
HXLINE( 104)		 ::openfl::display::Bitmap _hx_tmp = this->bitmap;
HXDLIN( 104)		 ::view::FieldBitmapFactory _hx_tmp1 = this->_fieldFactory;
HXDLIN( 104)		_hx_tmp->set_bitmapData(_hx_tmp1->getChipByCode(this->get_state()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,updateBitmap,(void))

 ::openfl::filters::DropShadowFilter Field_obj::DROP_SHADOW_FILTER;


hx::ObjectPtr< Field_obj > Field_obj::__new() {
	hx::ObjectPtr< Field_obj > __this = new Field_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Field_obj > Field_obj::__alloc(hx::Ctx *_hx_ctx) {
	Field_obj *__this = (Field_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Field_obj), true, "view.Field"));
	*(void **)__this = Field_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Field_obj::Field_obj()
{
}

void Field_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Field);
	HX_MARK_MEMBER_NAME(_select,"_select");
	HX_MARK_MEMBER_NAME(_state,"_state");
	HX_MARK_MEMBER_NAME(_background,"_background");
	HX_MARK_MEMBER_NAME(_fieldFactory,"_fieldFactory");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(bg,"bg");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Field_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_select,"_select");
	HX_VISIT_MEMBER_NAME(_state,"_state");
	HX_VISIT_MEMBER_NAME(_background,"_background");
	HX_VISIT_MEMBER_NAME(_fieldFactory,"_fieldFactory");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Field_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_state()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"select") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_select()); }
		if (HX_FIELD_EQ(inName,"_state") ) { return hx::Val( _state); }
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_select") ) { return hx::Val( _select); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"updateBg") ) { return hx::Val( updateBg_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn()); }
		if (HX_FIELD_EQ(inName,"set_state") ) { return hx::Val( set_state_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_select") ) { return hx::Val( get_select_dyn()); }
		if (HX_FIELD_EQ(inName,"set_select") ) { return hx::Val( set_select_dyn()); }
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_background()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { return hx::Val( _background); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateBitmap") ) { return hx::Val( updateBitmap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fieldFactory") ) { return hx::Val( _fieldFactory); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn()); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Field_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"DROP_SHADOW_FILTER") ) { outValue = DROP_SHADOW_FILTER; return true; }
	}
	return false;
}

hx::Val Field_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_state(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"select") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_select(inValue) ); }
		if (HX_FIELD_EQ(inName,"_state") ) { _state=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_select") ) { _select=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_background") ) { _background=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_fieldFactory") ) { _fieldFactory=inValue.Cast<  ::view::FieldBitmapFactory >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Field_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"DROP_SHADOW_FILTER") ) { DROP_SHADOW_FILTER=ioValue.Cast<  ::openfl::filters::DropShadowFilter >(); return true; }
	}
	return false;
}

void Field_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_select","\x9b","\x2c","\xaa","\xd8"));
	outFields->push(HX_HCSTRING("select","\xfc","\x1a","\x33","\x6a"));
	outFields->push(HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("_fieldFactory","\x0f","\xae","\x05","\x98"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Field_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Field_obj,_select),HX_HCSTRING("_select","\x9b","\x2c","\xaa","\xd8")},
	{hx::fsInt,(int)offsetof(Field_obj,_state),HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f")},
	{hx::fsInt,(int)offsetof(Field_obj,_background),HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8")},
	{hx::fsObject /*::view::FieldBitmapFactory*/ ,(int)offsetof(Field_obj,_fieldFactory),HX_HCSTRING("_fieldFactory","\x0f","\xae","\x05","\x98")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(Field_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(Field_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Field_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::DropShadowFilter*/ ,(void *) &Field_obj::DROP_SHADOW_FILTER,HX_HCSTRING("DROP_SHADOW_FILTER","\x27","\xea","\xc8","\x2f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Field_obj_sMemberFields[] = {
	HX_HCSTRING("_select","\x9b","\x2c","\xaa","\xd8"),
	HX_HCSTRING("get_select","\xc5","\x8a","\xba","\x5a"),
	HX_HCSTRING("set_select","\x39","\x29","\x38","\x5e"),
	HX_HCSTRING("_state","\x52","\xbd","\xf2","\x7f"),
	HX_HCSTRING("get_state","\x68","\xd2","\xb4","\xc7"),
	HX_HCSTRING("set_state","\x74","\xbe","\x05","\xab"),
	HX_HCSTRING("_background","\x0d","\x61","\xa7","\xf8"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("_fieldFactory","\x0f","\xae","\x05","\x98"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("updateBg","\x2e","\x14","\xfa","\x77"),
	HX_HCSTRING("updateBitmap","\xd8","\xb6","\xcf","\xf0"),
	::String(null()) };

static void Field_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Field_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Field_obj::DROP_SHADOW_FILTER,"DROP_SHADOW_FILTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Field_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Field_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Field_obj::DROP_SHADOW_FILTER,"DROP_SHADOW_FILTER");
};

#endif

hx::Class Field_obj::__mClass;

static ::String Field_obj_sStaticFields[] = {
	HX_HCSTRING("DROP_SHADOW_FILTER","\x27","\xea","\xc8","\x2f"),
	::String(null())
};

void Field_obj::__register()
{
	hx::Object *dummy = new Field_obj;
	Field_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("view.Field","\xd1","\x29","\xe4","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Field_obj::__GetStatic;
	__mClass->mSetStaticField = &Field_obj::__SetStatic;
	__mClass->mMarkFunc = Field_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Field_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Field_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Field_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Field_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Field_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Field_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Field_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f5e7b096d9a16b19_94_boot)
HXLINE(  94)		DROP_SHADOW_FILTER =  ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,(int)4,(int)90,(int)3355443,(int)1,(int)6,(int)6,null(),null(),null(),null(),null());
            	}
}

} // end namespace view
