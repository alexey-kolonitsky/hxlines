// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_assets_GameAssets
#include <assets/GameAssets.h>
#endif
#ifndef INCLUDED_config_StaticConfig
#include <config/StaticConfig.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_view_FieldBitmapFactory
#include <view/FieldBitmapFactory.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0c35ffe87b96817_8_new,"view.FieldBitmapFactory","new",0x4a86a5fc,"view.FieldBitmapFactory.new","view/FieldBitmapFactory.hx",8,0xbe537753)
HX_LOCAL_STACK_FRAME(_hx_pos_c0c35ffe87b96817_29_init,"view.FieldBitmapFactory","init",0xe8034df4,"view.FieldBitmapFactory.init","view/FieldBitmapFactory.hx",29,0xbe537753)
HX_LOCAL_STACK_FRAME(_hx_pos_c0c35ffe87b96817_49_getChipByCode,"view.FieldBitmapFactory","getChipByCode",0xa1867262,"view.FieldBitmapFactory.getChipByCode","view/FieldBitmapFactory.hx",49,0xbe537753)
HX_LOCAL_STACK_FRAME(_hx_pos_c0c35ffe87b96817_65_getFieldByCode,"view.FieldBitmapFactory","getFieldByCode",0x494325ec,"view.FieldBitmapFactory.getFieldByCode","view/FieldBitmapFactory.hx",65,0xbe537753)
HX_LOCAL_STACK_FRAME(_hx_pos_c0c35ffe87b96817_98_sliceImage,"view.FieldBitmapFactory","sliceImage",0xb02b378d,"view.FieldBitmapFactory.sliceImage","view/FieldBitmapFactory.hx",98,0xbe537753)
namespace view{

void FieldBitmapFactory_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c0c35ffe87b96817_8_new)
HXLINE(  95)		this->emptyCellBitmap = null();
HXLINE(  93)		this->fields = null();
HXLINE(  92)		this->chips = null();
HXLINE(  87)		this->chipsBitmap = null();
HXLINE(  19)		this->init();
            	}

Dynamic FieldBitmapFactory_obj::__CreateEmpty() { return new FieldBitmapFactory_obj; }

void *FieldBitmapFactory_obj::_hx_vtable = 0;

Dynamic FieldBitmapFactory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FieldBitmapFactory_obj > _hx_result = new FieldBitmapFactory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FieldBitmapFactory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33be1946;
}

void FieldBitmapFactory_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_c0c35ffe87b96817_29_init)
HXLINE(  30)		this->emptyCellBitmap =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::config::StaticConfig_obj::TILE_WIDTH,::config::StaticConfig_obj::TILE_HEIGHT,!(::config::StaticConfig_obj::DEBUG),(int)16711680);
HXLINE(  32)		this->chipsBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::assets::GameAssets_obj::get_CHIPS_BITMAP(),null(),null());
HXLINE(  34)		this->chips = ::Array_obj< ::Dynamic>::__new();
HXLINE(  35)		this->fields = ::Array_obj< ::Dynamic>::__new();
HXLINE(  37)		{
HXLINE(  37)			int _g1 = (int)0;
HXDLIN(  37)			int _g = ::config::StaticConfig_obj::COLOR_COUNT;
HXDLIN(  37)			while((_g1 < _g)){
HXLINE(  37)				_g1 = (_g1 + (int)1);
HXDLIN(  37)				int i = (_g1 - (int)1);
HXLINE(  38)				::Array< ::Dynamic> _hx_tmp = this->chips;
HXDLIN(  38)				_hx_tmp[i] = this->sliceImage((int)0,i);
HXLINE(  39)				::Array< ::Dynamic> _hx_tmp1 = this->fields;
HXDLIN(  39)				_hx_tmp1[i] = this->sliceImage((int)1,i);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FieldBitmapFactory_obj,init,(void))

 ::openfl::display::BitmapData FieldBitmapFactory_obj::getChipByCode(int code){
            	HX_STACKFRAME(&_hx_pos_c0c35ffe87b96817_49_getChipByCode)
HXLINE(  50)		bool _hx_tmp;
HXDLIN(  50)		if ((code > (int)0)) {
HXLINE(  50)			_hx_tmp = (code < ::config::StaticConfig_obj::COLOR_COUNT);
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  51)			::Array< ::Dynamic> _hx_tmp1 = this->chips;
HXDLIN(  51)			return _hx_tmp1->__get((code - (int)1)).StaticCast<  ::openfl::display::BitmapData >();
            		}
            		else {
HXLINE(  53)			if ((code == ::config::StaticConfig_obj::COLOR_COUNT)) {
HXLINE(  54)				::Array< ::Dynamic> _hx_tmp2 = this->chips;
HXDLIN(  54)				return _hx_tmp2->__get((code - (int)1)).StaticCast<  ::openfl::display::BitmapData >();
            			}
            		}
HXLINE(  57)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FieldBitmapFactory_obj,getChipByCode,return )

 ::openfl::display::BitmapData FieldBitmapFactory_obj::getFieldByCode(int code){
            	HX_STACKFRAME(&_hx_pos_c0c35ffe87b96817_65_getFieldByCode)
HXLINE(  66)		bool _hx_tmp;
HXDLIN(  66)		if ((code > (int)0)) {
HXLINE(  66)			_hx_tmp = (code < ::config::StaticConfig_obj::COLOR_COUNT);
            		}
            		else {
HXLINE(  66)			_hx_tmp = false;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  67)			::Array< ::Dynamic> _hx_tmp1 = this->fields;
HXDLIN(  67)			return _hx_tmp1->__get((code - (int)1)).StaticCast<  ::openfl::display::BitmapData >();
            		}
            		else {
HXLINE(  69)			if ((code == ::config::StaticConfig_obj::COLOR_COUNT)) {
HXLINE(  70)				::Array< ::Dynamic> _hx_tmp2 = this->fields;
HXDLIN(  70)				return _hx_tmp2->__get((code - (int)1)).StaticCast<  ::openfl::display::BitmapData >();
            			}
            		}
HXLINE(  72)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FieldBitmapFactory_obj,getFieldByCode,return )

 ::openfl::display::BitmapData FieldBitmapFactory_obj::sliceImage(int xIndex,int yIndex){
            	HX_GC_STACKFRAME(&_hx_pos_c0c35ffe87b96817_98_sliceImage)
HXLINE(  99)		Float tileX = (xIndex * ::config::StaticConfig_obj::TILE_WIDTH);
HXLINE( 100)		Float tileY = (yIndex * ::config::StaticConfig_obj::TILE_HEIGHT);
HXLINE( 101)		 ::openfl::geom::Matrix translateMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,(int)1,-(tileX),-(tileY));
HXLINE( 102)		 ::openfl::display::BitmapData tileBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::config::StaticConfig_obj::TILE_WIDTH,::config::StaticConfig_obj::TILE_HEIGHT,true,(int)16711680);
HXLINE( 103)		tileBitmapData->draw(this->chipsBitmap,translateMatrix,null(),null(),null(),null());
HXLINE( 104)		return tileBitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FieldBitmapFactory_obj,sliceImage,return )


hx::ObjectPtr< FieldBitmapFactory_obj > FieldBitmapFactory_obj::__new() {
	hx::ObjectPtr< FieldBitmapFactory_obj > __this = new FieldBitmapFactory_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FieldBitmapFactory_obj > FieldBitmapFactory_obj::__alloc(hx::Ctx *_hx_ctx) {
	FieldBitmapFactory_obj *__this = (FieldBitmapFactory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FieldBitmapFactory_obj), true, "view.FieldBitmapFactory"));
	*(void **)__this = FieldBitmapFactory_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FieldBitmapFactory_obj::FieldBitmapFactory_obj()
{
}

void FieldBitmapFactory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FieldBitmapFactory);
	HX_MARK_MEMBER_NAME(chipsBitmap,"chipsBitmap");
	HX_MARK_MEMBER_NAME(chips,"chips");
	HX_MARK_MEMBER_NAME(fields,"fields");
	HX_MARK_MEMBER_NAME(emptyCellBitmap,"emptyCellBitmap");
	HX_MARK_END_CLASS();
}

void FieldBitmapFactory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(chipsBitmap,"chipsBitmap");
	HX_VISIT_MEMBER_NAME(chips,"chips");
	HX_VISIT_MEMBER_NAME(fields,"fields");
	HX_VISIT_MEMBER_NAME(emptyCellBitmap,"emptyCellBitmap");
}

hx::Val FieldBitmapFactory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"chips") ) { return hx::Val( chips); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { return hx::Val( fields); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sliceImage") ) { return hx::Val( sliceImage_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"chipsBitmap") ) { return hx::Val( chipsBitmap); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getChipByCode") ) { return hx::Val( getChipByCode_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getFieldByCode") ) { return hx::Val( getFieldByCode_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"emptyCellBitmap") ) { return hx::Val( emptyCellBitmap); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FieldBitmapFactory_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chips") ) { chips=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { fields=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"chipsBitmap") ) { chipsBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"emptyCellBitmap") ) { emptyCellBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FieldBitmapFactory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("chipsBitmap","\x76","\x08","\x1f","\x53"));
	outFields->push(HX_HCSTRING("chips","\x27","\xad","\xb9","\x45"));
	outFields->push(HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"));
	outFields->push(HX_HCSTRING("emptyCellBitmap","\x1e","\x5c","\xda","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FieldBitmapFactory_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(FieldBitmapFactory_obj,chipsBitmap),HX_HCSTRING("chipsBitmap","\x76","\x08","\x1f","\x53")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FieldBitmapFactory_obj,chips),HX_HCSTRING("chips","\x27","\xad","\xb9","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FieldBitmapFactory_obj,fields),HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(FieldBitmapFactory_obj,emptyCellBitmap),HX_HCSTRING("emptyCellBitmap","\x1e","\x5c","\xda","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FieldBitmapFactory_obj_sStaticStorageInfo = 0;
#endif

static ::String FieldBitmapFactory_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("getChipByCode","\xc6","\x01","\x0e","\x4e"),
	HX_HCSTRING("getFieldByCode","\x08","\x0e","\x59","\x93"),
	HX_HCSTRING("chipsBitmap","\x76","\x08","\x1f","\x53"),
	HX_HCSTRING("chips","\x27","\xad","\xb9","\x45"),
	HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"),
	HX_HCSTRING("emptyCellBitmap","\x1e","\x5c","\xda","\x41"),
	HX_HCSTRING("sliceImage","\xa9","\xe1","\x6b","\x9c"),
	::String(null()) };

static void FieldBitmapFactory_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FieldBitmapFactory_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FieldBitmapFactory_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FieldBitmapFactory_obj::__mClass,"__mClass");
};

#endif

hx::Class FieldBitmapFactory_obj::__mClass;

void FieldBitmapFactory_obj::__register()
{
	hx::Object *dummy = new FieldBitmapFactory_obj;
	FieldBitmapFactory_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("view.FieldBitmapFactory","\x0a","\x38","\xcd","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FieldBitmapFactory_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FieldBitmapFactory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FieldBitmapFactory_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FieldBitmapFactory_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FieldBitmapFactory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FieldBitmapFactory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace view
