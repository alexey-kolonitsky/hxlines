// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_AppController
#include <AppController.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_GameController
#include <GameController.h>
#endif
#ifndef INCLUDED_GameView
#include <GameView.h>
#endif
#ifndef INCLUDED_IGameLoopHandler
#include <IGameLoopHandler.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69efd8c9269cf369_15_new,"Game","new",0x79ba3204,"Game.new","Game.hx",15,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_27_initilize,"Game","initilize",0x14cfeae5,"Game.initilize","Game.hx",27,0x56a4f9ec)

void Game_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_15_new)
HXLINE(  17)		this->_inited = false;
HXLINE(  23)		super::__construct();
HXLINE(  24)		this->initilize();
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

void *Game_obj::_hx_vtable = 0;

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Game_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2f382012) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2f382012;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Game_obj::initilize(){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_27_initilize)
HXLINE(  28)		if (this->_inited) {
HXLINE(  29)			return;
            		}
HXLINE(  30)		this->_view =  ::GameView_obj::__alloc( HX_CTX );
HXLINE(  31)		this->addChild(this->_view);
HXLINE(  33)		this->_controller =  ::AppController_obj::__alloc( HX_CTX ,this->_view);
HXLINE(  34)		this->_controller->playGame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,initilize,(void))


hx::ObjectPtr< Game_obj > Game_obj::__new() {
	hx::ObjectPtr< Game_obj > __this = new Game_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Game_obj > Game_obj::__alloc(hx::Ctx *_hx_ctx) {
	Game_obj *__this = (Game_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Game_obj), true, "Game"));
	*(void **)__this = Game_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(_inited,"_inited");
	HX_MARK_MEMBER_NAME(_controller,"_controller");
	HX_MARK_MEMBER_NAME(_model,"_model");
	HX_MARK_MEMBER_NAME(_view,"_view");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_inited,"_inited");
	HX_VISIT_MEMBER_NAME(_controller,"_controller");
	HX_VISIT_MEMBER_NAME(_model,"_model");
	HX_VISIT_MEMBER_NAME(_view,"_view");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_view") ) { return hx::Val( _view); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_model") ) { return hx::Val( _model); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inited") ) { return hx::Val( _inited); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"initilize") ) { return hx::Val( initilize_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_controller") ) { return hx::Val( _controller); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_view") ) { _view=inValue.Cast<  ::GameView >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_model") ) { _model=inValue.Cast<  ::GameController >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_inited") ) { _inited=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_controller") ) { _controller=inValue.Cast<  ::AppController >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_inited","\x0e","\x89","\xc3","\x05"));
	outFields->push(HX_HCSTRING("_controller","\xbb","\x65","\x48","\xd7"));
	outFields->push(HX_HCSTRING("_model","\xea","\x6a","\x3f","\x08"));
	outFields->push(HX_HCSTRING("_view","\x44","\x4e","\x60","\x01"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Game_obj,_inited),HX_HCSTRING("_inited","\x0e","\x89","\xc3","\x05")},
	{hx::fsObject /*::AppController*/ ,(int)offsetof(Game_obj,_controller),HX_HCSTRING("_controller","\xbb","\x65","\x48","\xd7")},
	{hx::fsObject /*::GameController*/ ,(int)offsetof(Game_obj,_model),HX_HCSTRING("_model","\xea","\x6a","\x3f","\x08")},
	{hx::fsObject /*::GameView*/ ,(int)offsetof(Game_obj,_view),HX_HCSTRING("_view","\x44","\x4e","\x60","\x01")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Game_obj_sStaticStorageInfo = 0;
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_HCSTRING("_inited","\x0e","\x89","\xc3","\x05"),
	HX_HCSTRING("_controller","\xbb","\x65","\x48","\xd7"),
	HX_HCSTRING("_model","\xea","\x6a","\x3f","\x08"),
	HX_HCSTRING("_view","\x44","\x4e","\x60","\x01"),
	HX_HCSTRING("initilize","\x41","\xb6","\x2a","\x45"),
	::String(null()) };

static void Game_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Game_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Game_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Game_obj::__mClass,"__mClass");
};

#endif

hx::Class Game_obj::__mClass;

void Game_obj::__register()
{
	hx::Object *dummy = new Game_obj;
	Game_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Game","\x12","\x20","\x38","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Game_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Game_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

