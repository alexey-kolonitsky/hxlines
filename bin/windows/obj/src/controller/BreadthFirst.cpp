// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_controller_BreadthFirst
#include <controller/BreadthFirst.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ff3c48172aab5cc6_52_bfs,"controller.BreadthFirst","bfs",0x851fb957,"controller.BreadthFirst.bfs","controller/BreadthFirst.hx",52,0x81c21e07)
HX_LOCAL_STACK_FRAME(_hx_pos_ff3c48172aab5cc6_98_bfsArray,"controller.BreadthFirst","bfsArray",0x120ae8c2,"controller.BreadthFirst.bfsArray","controller/BreadthFirst.hx",98,0x81c21e07)
HX_LOCAL_STACK_FRAME(_hx_pos_ff3c48172aab5cc6_145_bfsPath,"controller.BreadthFirst","bfsPath",0x6ef7c29c,"controller.BreadthFirst.bfsPath","controller/BreadthFirst.hx",145,0x81c21e07)
HX_LOCAL_STACK_FRAME(_hx_pos_ff3c48172aab5cc6_27_boot,"controller.BreadthFirst","boot",0xf6a9440a,"controller.BreadthFirst.boot","controller/BreadthFirst.hx",27,0x81c21e07)
HX_LOCAL_STACK_FRAME(_hx_pos_ff3c48172aab5cc6_28_boot,"controller.BreadthFirst","boot",0xf6a9440a,"controller.BreadthFirst.boot","controller/BreadthFirst.hx",28,0x81c21e07)
namespace controller{

void BreadthFirst_obj::__construct() { }

Dynamic BreadthFirst_obj::__CreateEmpty() { return new BreadthFirst_obj; }

void *BreadthFirst_obj::_hx_vtable = 0;

Dynamic BreadthFirst_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BreadthFirst_obj > _hx_result = new BreadthFirst_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BreadthFirst_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x27e630e0;
}

int BreadthFirst_obj::MAX_VALUE;

int BreadthFirst_obj::MIN_VALUE;

::Array< int > BreadthFirst_obj::bfs(::cpp::VirtualArray source,int startIndex,int endIndex, ::Dynamic getNeighburs){
            	HX_STACKFRAME(&_hx_pos_ff3c48172aab5cc6_52_bfs)
HXLINE(  53)		int i;
HXDLIN(  53)		int N = source->get_length();
HXLINE(  54)		::Array< int > q = ::Array_obj< int >::__new();
HXLINE(  55)		q->push(startIndex);
HXLINE(  57)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  57)		{
HXLINE(  57)			int _g2 = (int)0;
HXDLIN(  57)			int _g1 = N;
HXDLIN(  57)			while((_g2 < _g1)){
HXLINE(  57)				_g2 = (_g2 + (int)1);
HXDLIN(  57)				int i1 = (_g2 - (int)1);
HXDLIN(  57)				_g->push(::controller::BreadthFirst_obj::MAX_VALUE);
            			}
            		}
HXDLIN(  57)		::Array< int > distance = _g;
HXLINE(  58)		distance[startIndex] = (int)1;
HXLINE(  60)		while((q->length > (int)0)){
HXLINE(  61)			int curIndex = ( (int)(q->shift()) );
HXLINE(  62)			bool _hx_tmp;
HXDLIN(  62)			if ((curIndex == endIndex)) {
HXLINE(  62)				_hx_tmp = (curIndex != startIndex);
            			}
            			else {
HXLINE(  62)				_hx_tmp = false;
            			}
HXDLIN(  62)			if (_hx_tmp) {
HXLINE(  63)				goto _hx_goto_1;
            			}
HXLINE(  64)			::Array< int > neighbors = ( (::Array< int >)(getNeighburs(source,curIndex)) );
HXLINE(  65)			{
HXLINE(  65)				int _g21 = (int)0;
HXDLIN(  65)				int _g11 = neighbors->length;
HXDLIN(  65)				while((_g21 < _g11)){
HXLINE(  65)					_g21 = (_g21 + (int)1);
HXDLIN(  65)					int i2 = (_g21 - (int)1);
HXLINE(  66)					int neighborIndex = neighbors->__get(i2);
HXLINE(  67)					bool _hx_tmp1;
HXDLIN(  67)					if ((q->indexOf(neighborIndex,null()) == (int)-1)) {
HXLINE(  67)						_hx_tmp1 = (distance->__get(neighborIndex) > (distance->__get(curIndex) + (int)1));
            					}
            					else {
HXLINE(  67)						_hx_tmp1 = false;
            					}
HXDLIN(  67)					if (_hx_tmp1) {
HXLINE(  68)						distance[neighborIndex] = (distance->__get(curIndex) + (int)1);
HXLINE(  69)						q->push(neighborIndex);
            					}
            				}
            			}
            		}
            		_hx_goto_1:;
HXLINE(  74)		return distance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BreadthFirst_obj,bfs,return )

::Array< int > BreadthFirst_obj::bfsArray(::cpp::VirtualArray source,::Array< int > startIndexes, ::Dynamic getNeighburs){
            	HX_STACKFRAME(&_hx_pos_ff3c48172aab5cc6_98_bfsArray)
HXLINE(  99)		int i = (int)0;
HXDLIN(  99)		int N = source->get_length();
HXLINE( 100)		::Array< int > q = startIndexes;
HXLINE( 102)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 102)		{
HXLINE( 102)			int _g2 = (int)0;
HXDLIN( 102)			int _g1 = N;
HXDLIN( 102)			while((_g2 < _g1)){
HXLINE( 102)				_g2 = (_g2 + (int)1);
HXDLIN( 102)				int i1 = (_g2 - (int)1);
HXDLIN( 102)				_g->push(::controller::BreadthFirst_obj::MAX_VALUE);
            			}
            		}
HXDLIN( 102)		::Array< int > distance = _g;
HXLINE( 103)		{
HXLINE( 103)			int _g21 = (int)0;
HXDLIN( 103)			int _g11 = q->length;
HXDLIN( 103)			while((_g21 < _g11)){
HXLINE( 103)				_g21 = (_g21 + (int)1);
HXDLIN( 103)				int i2 = (_g21 - (int)1);
HXLINE( 104)				distance[q->__get(i2)] = (int)1;
            			}
            		}
HXLINE( 106)		while((q->length > (int)0)){
HXLINE( 107)			int curIndex = ( (int)(q->shift()) );
HXLINE( 108)			::Array< int > neighbors = ( (::Array< int >)(getNeighburs(source,curIndex)) );
HXLINE( 109)			{
HXLINE( 109)				int _g22 = (int)0;
HXDLIN( 109)				int _g12 = neighbors->length;
HXDLIN( 109)				while((_g22 < _g12)){
HXLINE( 109)					_g22 = (_g22 + (int)1);
HXDLIN( 109)					int i3 = (_g22 - (int)1);
HXLINE( 110)					int neighborIndex = neighbors->__get(i3);
HXLINE( 111)					bool _hx_tmp;
HXDLIN( 111)					if ((q->indexOf(neighborIndex,null()) == (int)-1)) {
HXLINE( 111)						_hx_tmp = (distance->__get(neighborIndex) > (distance->__get(curIndex) + (int)1));
            					}
            					else {
HXLINE( 111)						_hx_tmp = false;
            					}
HXDLIN( 111)					if (_hx_tmp) {
HXLINE( 112)						distance[neighborIndex] = (distance->__get(curIndex) + (int)1);
HXLINE( 113)						q->push(neighborIndex);
            					}
            				}
            			}
            		}
HXLINE( 118)		return distance;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BreadthFirst_obj,bfsArray,return )

::Array< int > BreadthFirst_obj::bfsPath(::cpp::VirtualArray source,::Array< int > distance,int startIndex,int endIndex, ::Dynamic getNeighbors){
            	HX_STACKFRAME(&_hx_pos_ff3c48172aab5cc6_145_bfsPath)
HXLINE( 146)		int cur = endIndex;
HXDLIN( 146)		int i;
HXDLIN( 146)		int j;
HXDLIN( 146)		int N = distance->__get(endIndex);
HXLINE( 147)		::Array< int > neighbours = ::Array_obj< int >::__new();
HXLINE( 148)		int neighboursCount = (int)0;
HXLINE( 149)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN( 149)		{
HXLINE( 149)			int _g2 = (int)0;
HXDLIN( 149)			int _g1 = N;
HXDLIN( 149)			while((_g2 < _g1)){
HXLINE( 149)				_g2 = (_g2 + (int)1);
HXDLIN( 149)				int i1 = (_g2 - (int)1);
HXDLIN( 149)				_g->push((int)0);
            			}
            		}
HXDLIN( 149)		::Array< int > result = _g;
HXLINE( 150)		result[(N - (int)1)] = endIndex;
HXLINE( 152)		int i2 = (N - (int)2);
HXLINE( 153)		while((i2 > (int)0)){
HXLINE( 154)			neighbours = ( (::Array< int >)(getNeighbors(source,cur)) );
HXLINE( 155)			neighboursCount = neighbours->length;
HXLINE( 157)			j = (int)0;
HXLINE( 158)			while(true){
HXLINE( 158)				bool _hx_tmp;
HXDLIN( 158)				if ((j < neighboursCount)) {
HXLINE( 158)					_hx_tmp = (distance->__get(neighbours->__get(j)) != (i2 + (int)1));
            				}
            				else {
HXLINE( 158)					_hx_tmp = false;
            				}
HXDLIN( 158)				if (!(_hx_tmp)) {
HXLINE( 158)					goto _hx_goto_11;
            				}
HXLINE( 159)				j = (j + (int)1);
            			}
            			_hx_goto_11:;
HXLINE( 161)			cur = (result[i2] = neighbours->__get(j));
HXLINE( 162)			i2 = (i2 - (int)1);
            		}
HXLINE( 164)		result[(int)0] = startIndex;
HXLINE( 165)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(BreadthFirst_obj,bfsPath,return )


BreadthFirst_obj::BreadthFirst_obj()
{
}

bool BreadthFirst_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bfs") ) { outValue = bfs_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bfsPath") ) { outValue = bfsPath_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bfsArray") ) { outValue = bfsArray_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"MAX_VALUE") ) { outValue = MAX_VALUE; return true; }
		if (HX_FIELD_EQ(inName,"MIN_VALUE") ) { outValue = MIN_VALUE; return true; }
	}
	return false;
}

bool BreadthFirst_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"MAX_VALUE") ) { MAX_VALUE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"MIN_VALUE") ) { MIN_VALUE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BreadthFirst_obj_sMemberStorageInfo = 0;
static hx::StaticInfo BreadthFirst_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BreadthFirst_obj::MAX_VALUE,HX_HCSTRING("MAX_VALUE","\x16","\x60","\x5a","\xef")},
	{hx::fsInt,(void *) &BreadthFirst_obj::MIN_VALUE,HX_HCSTRING("MIN_VALUE","\x84","\x4d","\x17","\x19")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void BreadthFirst_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BreadthFirst_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BreadthFirst_obj::MAX_VALUE,"MAX_VALUE");
	HX_MARK_MEMBER_NAME(BreadthFirst_obj::MIN_VALUE,"MIN_VALUE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BreadthFirst_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BreadthFirst_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BreadthFirst_obj::MAX_VALUE,"MAX_VALUE");
	HX_VISIT_MEMBER_NAME(BreadthFirst_obj::MIN_VALUE,"MIN_VALUE");
};

#endif

hx::Class BreadthFirst_obj::__mClass;

static ::String BreadthFirst_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_VALUE","\x16","\x60","\x5a","\xef"),
	HX_HCSTRING("MIN_VALUE","\x84","\x4d","\x17","\x19"),
	HX_HCSTRING("bfs","\x2f","\xb6","\x4a","\x00"),
	HX_HCSTRING("bfsArray","\xea","\x5c","\xa4","\x2a"),
	HX_HCSTRING("bfsPath","\x74","\x0b","\xde","\x1f"),
	::String(null())
};

void BreadthFirst_obj::__register()
{
	hx::Object *dummy = new BreadthFirst_obj;
	BreadthFirst_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("controller.BreadthFirst","\x96","\xaf","\xce","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BreadthFirst_obj::__GetStatic;
	__mClass->mSetStaticField = &BreadthFirst_obj::__SetStatic;
	__mClass->mMarkFunc = BreadthFirst_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BreadthFirst_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BreadthFirst_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BreadthFirst_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BreadthFirst_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BreadthFirst_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BreadthFirst_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ff3c48172aab5cc6_27_boot)
HXLINE(  27)		MAX_VALUE = (int)2147483647;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ff3c48172aab5cc6_28_boot)
HXLINE(  28)		MIN_VALUE = (int)-2147483648;
            	}
}

} // end namespace controller
