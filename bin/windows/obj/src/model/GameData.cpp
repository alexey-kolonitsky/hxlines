// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_GameState
#include <GameState.h>
#endif
#ifndef INCLUDED_model_GameData
#include <model/GameData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c6a0282ddacf1d7_3_new,"model.GameData","new",0x526a2633,"model.GameData.new","model/GameData.hx",3,0x7a5e4e3c)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6a0282ddacf1d7_69_toObject,"model.GameData","toObject",0x4da0d3e7,"model.GameData.toObject","model/GameData.hx",69,0x7a5e4e3c)
HX_LOCAL_STACK_FRAME(_hx_pos_2c6a0282ddacf1d7_81_toString,"model.GameData","toString",0x49917df9,"model.GameData.toString","model/GameData.hx",81,0x7a5e4e3c)
namespace model{

void GameData_obj::__construct( ::Dynamic init){
            	HX_STACKFRAME(&_hx_pos_2c6a0282ddacf1d7_3_new)
HXLINE(  47)		this->sessionId = HX_("",00,00,00,00);
HXLINE(  45)		this->path = null();
HXLINE(  43)		this->endIndex = (int)-1;
HXLINE(  38)		this->startIndex = (int)-1;
HXLINE(  28)		this->score = (int)0;
HXLINE(  23)		this->duration = ((Float)0.0);
HXLINE(  18)		this->level = (int)1;
HXLINE(  12)		this->stepCount = (int)0;
HXLINE(   7)		this->state = ::GameState_obj::NONE_dyn();
            	}

Dynamic GameData_obj::__CreateEmpty() { return new GameData_obj; }

void *GameData_obj::_hx_vtable = 0;

Dynamic GameData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameData_obj > _hx_result = new GameData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GameData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x49a2b705;
}

 ::Dynamic GameData_obj::toObject(){
            	HX_STACKFRAME(&_hx_pos_2c6a0282ddacf1d7_69_toObject)
HXLINE(  70)		 ::Dynamic result =  ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("fields",79,8e,8e,80),this->fields)
            			->setFixed(1,HX_("sessionId",d1,58,4d,bb),this->sessionId)
            			->setFixed(2,HX_("duration",54,0f,8e,14),this->duration)
            			->setFixed(3,HX_("level",84,15,63,72),this->level)
            			->setFixed(4,HX_("score",52,73,d9,78),this->score));
HXLINE(  77)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameData_obj,toObject,return )

::String GameData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2c6a0282ddacf1d7_81_toString)
HXLINE(  82)		::String fieldsString;
HXDLIN(  82)		if (hx::IsNotNull( this->fields )) {
HXLINE(  82)			fieldsString = ((HX_("[",5b,00,00,00) + this->fields->join(HX_(" ",20,00,00,00))) + HX_("]",5d,00,00,00));
            		}
            		else {
HXLINE(  82)			fieldsString = HX_("is empty",d7,ed,1a,5f);
            		}
HXLINE(  83)		::String result = (((((HX_("PuzzleVO score: ",ef,85,51,3f) + this->score) + HX_(", duration: ",6e,fe,63,48)) + this->duration) + HX_(", ",74,26,00,00)) + fieldsString);
HXLINE(  86)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameData_obj,toString,return )


hx::ObjectPtr< GameData_obj > GameData_obj::__new( ::Dynamic init) {
	hx::ObjectPtr< GameData_obj > __this = new GameData_obj();
	__this->__construct(init);
	return __this;
}

hx::ObjectPtr< GameData_obj > GameData_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic init) {
	GameData_obj *__this = (GameData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameData_obj), true, "model.GameData"));
	*(void **)__this = GameData_obj::_hx_vtable;
	__this->__construct(init);
	return __this;
}

GameData_obj::GameData_obj()
{
}

void GameData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameData);
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(stepCount,"stepCount");
	HX_MARK_MEMBER_NAME(level,"level");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(score,"score");
	HX_MARK_MEMBER_NAME(fields,"fields");
	HX_MARK_MEMBER_NAME(startIndex,"startIndex");
	HX_MARK_MEMBER_NAME(endIndex,"endIndex");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(sessionId,"sessionId");
	HX_MARK_END_CLASS();
}

void GameData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(stepCount,"stepCount");
	HX_VISIT_MEMBER_NAME(level,"level");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(score,"score");
	HX_VISIT_MEMBER_NAME(fields,"fields");
	HX_VISIT_MEMBER_NAME(startIndex,"startIndex");
	HX_VISIT_MEMBER_NAME(endIndex,"endIndex");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(sessionId,"sessionId");
}

hx::Val GameData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state); }
		if (HX_FIELD_EQ(inName,"level") ) { return hx::Val( level); }
		if (HX_FIELD_EQ(inName,"score") ) { return hx::Val( score); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { return hx::Val( fields); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return hx::Val( duration); }
		if (HX_FIELD_EQ(inName,"endIndex") ) { return hx::Val( endIndex); }
		if (HX_FIELD_EQ(inName,"toObject") ) { return hx::Val( toObject_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stepCount") ) { return hx::Val( stepCount); }
		if (HX_FIELD_EQ(inName,"sessionId") ) { return hx::Val( sessionId); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startIndex") ) { return hx::Val( startIndex); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GameData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::GameState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"level") ) { level=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"score") ) { score=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { fields=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endIndex") ) { endIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stepCount") ) { stepCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sessionId") ) { sessionId=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startIndex") ) { startIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	outFields->push(HX_HCSTRING("stepCount","\xe3","\xd9","\xce","\xba"));
	outFields->push(HX_HCSTRING("level","\x84","\x15","\x63","\x72"));
	outFields->push(HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"));
	outFields->push(HX_HCSTRING("score","\x52","\x73","\xd9","\x78"));
	outFields->push(HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"));
	outFields->push(HX_HCSTRING("startIndex","\x50","\x73","\x2b","\xda"));
	outFields->push(HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GameData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::GameState*/ ,(int)offsetof(GameData_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(GameData_obj,stepCount),HX_HCSTRING("stepCount","\xe3","\xd9","\xce","\xba")},
	{hx::fsInt,(int)offsetof(GameData_obj,level),HX_HCSTRING("level","\x84","\x15","\x63","\x72")},
	{hx::fsFloat,(int)offsetof(GameData_obj,duration),HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14")},
	{hx::fsInt,(int)offsetof(GameData_obj,score),HX_HCSTRING("score","\x52","\x73","\xd9","\x78")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(GameData_obj,fields),HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80")},
	{hx::fsInt,(int)offsetof(GameData_obj,startIndex),HX_HCSTRING("startIndex","\x50","\x73","\x2b","\xda")},
	{hx::fsInt,(int)offsetof(GameData_obj,endIndex),HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(GameData_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsString,(int)offsetof(GameData_obj,sessionId),HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GameData_obj_sStaticStorageInfo = 0;
#endif

static ::String GameData_obj_sMemberFields[] = {
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("stepCount","\xe3","\xd9","\xce","\xba"),
	HX_HCSTRING("level","\x84","\x15","\x63","\x72"),
	HX_HCSTRING("duration","\x54","\x0f","\x8e","\x14"),
	HX_HCSTRING("score","\x52","\x73","\xd9","\x78"),
	HX_HCSTRING("fields","\x79","\x8e","\x8e","\x80"),
	HX_HCSTRING("startIndex","\x50","\x73","\x2b","\xda"),
	HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb"),
	HX_HCSTRING("toObject","\x9a","\x26","\x7e","\x3c"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void GameData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameData_obj::__mClass,"__mClass");
};

#endif

hx::Class GameData_obj::__mClass;

void GameData_obj::__register()
{
	hx::Object *dummy = new GameData_obj;
	GameData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("model.GameData","\xc1","\x90","\xd0","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace model
