// Generated by Haxe 3.4.0 (git build development @ d2a02e8)
#include <hxcpp.h>

#ifndef INCLUDED_GameView
#include <GameView.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_view_GameScreen
#include <view/GameScreen.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b3c6b15b099028d3_5_new,"GameView","new",0x7407a809,"GameView.new","GameView.hx",5,0x658aeb87)

void GameView_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b3c6b15b099028d3_5_new)
HXLINE(   7)		this->gameScreen =  ::view::GameScreen_obj::__alloc( HX_CTX );
HXLINE(  11)		super::__construct();
HXLINE(  12)		this->addChild(this->gameScreen);
            	}

Dynamic GameView_obj::__CreateEmpty() { return new GameView_obj; }

void *GameView_obj::_hx_vtable = 0;

Dynamic GameView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameView_obj > _hx_result = new GameView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x60c0f85f;
		}
	}
}


hx::ObjectPtr< GameView_obj > GameView_obj::__new() {
	hx::ObjectPtr< GameView_obj > __this = new GameView_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GameView_obj > GameView_obj::__alloc(hx::Ctx *_hx_ctx) {
	GameView_obj *__this = (GameView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameView_obj), true, "GameView"));
	*(void **)__this = GameView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GameView_obj::GameView_obj()
{
}

void GameView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameView);
	HX_MARK_MEMBER_NAME(gameScreen,"gameScreen");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gameScreen,"gameScreen");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GameView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"gameScreen") ) { return hx::Val( gameScreen); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GameView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"gameScreen") ) { gameScreen=inValue.Cast<  ::view::GameScreen >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gameScreen","\xfe","\x24","\xd3","\x89"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GameView_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::view::GameScreen*/ ,(int)offsetof(GameView_obj,gameScreen),HX_HCSTRING("gameScreen","\xfe","\x24","\xd3","\x89")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GameView_obj_sStaticStorageInfo = 0;
#endif

static ::String GameView_obj_sMemberFields[] = {
	HX_HCSTRING("gameScreen","\xfe","\x24","\xd3","\x89"),
	::String(null()) };

static void GameView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameView_obj::__mClass,"__mClass");
};

#endif

hx::Class GameView_obj::__mClass;

void GameView_obj::__register()
{
	hx::Object *dummy = new GameView_obj;
	GameView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GameView","\x97","\xef","\x26","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

